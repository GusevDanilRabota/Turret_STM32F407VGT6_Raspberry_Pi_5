
Release.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a50  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004bd8  08004bd8  00005bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf0  08004bf0  00006138  2**0
                  CONTENTS
  4 .ARM          00000008  08004bf0  08004bf0  00005bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bf8  08004bf8  00006138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf8  08004bf8  00005bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bfc  08004bfc  00005bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  20000000  08004c00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006138  2**0
                  CONTENTS
 10 .bss          00000250  20000138  20000138  00006138  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000388  20000388  00006138  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006138  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112ec  00000000  00000000  00006168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025af  00000000  00000000  00017454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea8  00000000  00000000  00019a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b5a  00000000  00000000  0001a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022677  00000000  00000000  0001b40a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130e5  00000000  00000000  0003da81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8706  00000000  00000000  00050b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012926c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ccc  00000000  00000000  001292b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  0012cf7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000138 	.word	0x20000138
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bc0 	.word	0x08004bc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000013c 	.word	0x2000013c
 80001c4:	08004bc0 	.word	0x08004bc0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <Read_AD_Conversion>:
 */

#include "Moving_system.h"

void Read_AD_Conversion(Motor *Motor_xx)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08c      	sub	sp, #48	@ 0x30
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	uint32_t TimeOut = 100;
 80004c0:	2364      	movs	r3, #100	@ 0x64
 80004c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	HAL_ADC_Start(Motor_xx->Config.Convertor.Convertor);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 f929 	bl	8001720 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(Motor_xx->Config.Convertor.Convertor, TimeOut);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80004d4:	4618      	mov	r0, r3
 80004d6:	f001 fa28 	bl	800192a <HAL_ADC_PollForConversion>

		uint32_t raw_value = HAL_ADC_GetValue(Motor_xx->Config.Convertor.Convertor);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 fbbe 	bl	8001c60 <HAL_ADC_GetValue>
 80004e4:	62b8      	str	r0, [r7, #40]	@ 0x28
		HAL_ADC_Stop(Motor_xx->Config.Convertor.Convertor);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 f9ea 	bl	80018c4 <HAL_ADC_Stop>

//		float alfa = Motor_xx->Config.Alfa;
		float alfa = 0.05f;
 80004f0:	4b3e      	ldr	r3, [pc, #248]	@ (80005ec <Read_AD_Conversion+0x134>)
 80004f2:	627b      	str	r3, [r7, #36]	@ 0x24
		float one_minus_alfa = 1.0f - alfa;
 80004f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80004f8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80004fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000500:	edc7 7a08 	vstr	s15, [r7, #32]

		float filtered_discrete = alfa * (float)raw_value + one_minus_alfa * Motor_xx->Status.filtered_Discrete_level;
 8000504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000506:	ee07 3a90 	vmov	s15, r3
 800050a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800050e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	691b      	ldr	r3, [r3, #16]
 800051a:	ee07 3a90 	vmov	s15, r3
 800051e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000522:	edd7 7a08 	vldr	s15, [r7, #32]
 8000526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800052a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800052e:	edc7 7a07 	vstr	s15, [r7, #28]
		Motor_xx->Status.filtered_Discrete_level = filtered_discrete;
 8000532:	edd7 7a07 	vldr	s15, [r7, #28]
 8000536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800053a:	ee17 2a90 	vmov	r2, s15
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	611a      	str	r2, [r3, #16]

		float discrete_range = (float)(Motor_xx->Config.Convertor.Maximum_discrete_level - Motor_xx->Config.Convertor.Minimum_discrete_level);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	ee07 3a90 	vmov	s15, r3
 8000550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000554:	edc7 7a06 	vstr	s15, [r7, #24]
		float angular_range = Motor_xx->Config.Angular.Maximum_angular - Motor_xx->Config.Angular.Minimum_angular;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8000564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000568:	edc7 7a05 	vstr	s15, [r7, #20]

		float norma = (filtered_discrete - (float)Motor_xx->Config.Convertor.Minimum_discrete_level) / discrete_range;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000570:	ee07 3a90 	vmov	s15, r3
 8000574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000578:	ed97 7a07 	vldr	s14, [r7, #28]
 800057c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000580:	ed97 7a06 	vldr	s14, [r7, #24]
 8000584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000588:	edc7 7a04 	vstr	s15, [r7, #16]

		float angular = Motor_xx->Config.Angular.Minimum_angular + norma * angular_range;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8000592:	edd7 6a04 	vldr	s13, [r7, #16]
 8000596:	edd7 7a05 	vldr	s15, [r7, #20]
 800059a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800059e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005a2:	edc7 7a03 	vstr	s15, [r7, #12]
		float filtered_angular = alfa * angular + one_minus_alfa * Motor_xx->Status.filter_Angular;
 80005a6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80005aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	edd3 6a06 	vldr	s13, [r3, #24]
 80005b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80005bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005c4:	edc7 7a02 	vstr	s15, [r7, #8]
		Motor_xx->Status.filter_Angular = filtered_angular;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	619a      	str	r2, [r3, #24]

		Motor_xx->Status.Discrete_level = filtered_discrete;
 80005ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80005d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005d6:	ee17 2a90 	vmov	r2, s15
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60da      	str	r2, [r3, #12]
		Motor_xx->Status.Angular = filtered_angular;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	615a      	str	r2, [r3, #20]
};
 80005e4:	bf00      	nop
 80005e6:	3730      	adds	r7, #48	@ 0x30
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	3d4ccccd 	.word	0x3d4ccccd

080005f0 <Working_area>:
	Motor_xx->Config.PWM.Timer->Instance->CCR1 = period / 2;
	HAL_TIM_PWM_Start(Motor_xx->Config.PWM.Timer, TIM_CHANNEL_1);
};

char Working_area(Motor *Motor_xx)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b087      	sub	sp, #28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    float current_angle = Motor_xx->Status.Angular;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	617b      	str	r3, [r7, #20]

    float lower_bound = Motor_xx->Config.Angular.Minimum_angular + Motor_xx->Config.Angular.Deviation;;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800060a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800060e:	edc7 7a04 	vstr	s15, [r7, #16]
    float upper_bound = Motor_xx->Config.Angular.Maximum_angular - Motor_xx->Config.Angular.Deviation;;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800061e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000622:	edc7 7a03 	vstr	s15, [r7, #12]

    return (current_angle > lower_bound) && (current_angle < upper_bound);
 8000626:	ed97 7a05 	vldr	s14, [r7, #20]
 800062a:	edd7 7a04 	vldr	s15, [r7, #16]
 800062e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000636:	dd0a      	ble.n	800064e <Working_area+0x5e>
 8000638:	ed97 7a05 	vldr	s14, [r7, #20]
 800063c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000648:	d501      	bpl.n	800064e <Working_area+0x5e>
 800064a:	2301      	movs	r3, #1
 800064c:	e000      	b.n	8000650 <Working_area+0x60>
 800064e:	2300      	movs	r3, #0
 8000650:	b2db      	uxtb	r3, r3
};
 8000652:	4618      	mov	r0, r3
 8000654:	371c      	adds	r7, #28
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  	Size_Rx_UART = sizeof(Target.Rx_data);
 8000664:	4b65      	ldr	r3, [pc, #404]	@ (80007fc <main+0x19c>)
 8000666:	2215      	movs	r2, #21
 8000668:	601a      	str	r2, [r3, #0]
	Size_Tx_UART = sizeof(Target.Tx_data);
 800066a:	4b65      	ldr	r3, [pc, #404]	@ (8000800 <main+0x1a0>)
 800066c:	220d      	movs	r2, #13
 800066e:	601a      	str	r2, [r3, #0]

	Motor_AZ.Config.PWM.Timer = &htim3; Motor_AZ.Config.Convertor.Convertor = &hadc1;
 8000670:	4b64      	ldr	r3, [pc, #400]	@ (8000804 <main+0x1a4>)
 8000672:	4a65      	ldr	r2, [pc, #404]	@ (8000808 <main+0x1a8>)
 8000674:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000676:	4b63      	ldr	r3, [pc, #396]	@ (8000804 <main+0x1a4>)
 8000678:	4a64      	ldr	r2, [pc, #400]	@ (800080c <main+0x1ac>)
 800067a:	63da      	str	r2, [r3, #60]	@ 0x3c
	Motor_EL.Config.PWM.Timer = &htim2; Motor_EL.Config.Convertor.Convertor = &hadc2;
 800067c:	4b64      	ldr	r3, [pc, #400]	@ (8000810 <main+0x1b0>)
 800067e:	4a65      	ldr	r2, [pc, #404]	@ (8000814 <main+0x1b4>)
 8000680:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000682:	4b63      	ldr	r3, [pc, #396]	@ (8000810 <main+0x1b0>)
 8000684:	4a64      	ldr	r2, [pc, #400]	@ (8000818 <main+0x1b8>)
 8000686:	63da      	str	r2, [r3, #60]	@ 0x3c

	PID_AZ.last_time = HAL_GetTick();
 8000688:	f000 fffa 	bl	8001680 <HAL_GetTick>
 800068c:	4603      	mov	r3, r0
 800068e:	4a63      	ldr	r2, [pc, #396]	@ (800081c <main+0x1bc>)
 8000690:	6153      	str	r3, [r2, #20]
	PID_EL.last_time = HAL_GetTick();
 8000692:	f000 fff5 	bl	8001680 <HAL_GetTick>
 8000696:	4603      	mov	r3, r0
 8000698:	4a61      	ldr	r2, [pc, #388]	@ (8000820 <main+0x1c0>)
 800069a:	6153      	str	r3, [r2, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 ff8a 	bl	80015b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f8d6 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 fb68 	bl	8000d78 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006a8:	f000 f93c 	bl	8000924 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006ac:	f000 f98c 	bl	80009c8 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 80006b0:	f000 fb38 	bl	8000d24 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006b4:	f000 f9da 	bl	8000a6c <MX_TIM2_Init>
  MX_TIM3_Init();
 80006b8:	f000 fa32 	bl	8000b20 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006bc:	f000 fa8a 	bl	8000bd4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80006c0:	f000 fadc 	bl	8000c7c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)Target.Rx_data, Size_Rx_UART);
 80006c4:	4b4d      	ldr	r3, [pc, #308]	@ (80007fc <main+0x19c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	4955      	ldr	r1, [pc, #340]	@ (8000824 <main+0x1c4>)
 80006ce:	4856      	ldr	r0, [pc, #344]	@ (8000828 <main+0x1c8>)
 80006d0:	f003 fb1c 	bl	8003d0c <HAL_UART_Receive_IT>

//  IMM_Init(Motor_AZ.Status.Angular);
//  IMM_Init(Motor_EL.Status.Angular);

  // Без PWM пращения происходить не будет, при этом происходит блокировка
  HAL_GPIO_WritePin(Motor_AZ.Config.GPIO.ENA_port, Motor_AZ.Config.GPIO.ENA_pin, GPIO_PIN_RESET);
 80006d4:	4b4b      	ldr	r3, [pc, #300]	@ (8000804 <main+0x1a4>)
 80006d6:	6a1b      	ldr	r3, [r3, #32]
 80006d8:	4a4a      	ldr	r2, [pc, #296]	@ (8000804 <main+0x1a4>)
 80006da:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80006dc:	b291      	uxth	r1, r2
 80006de:	2200      	movs	r2, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 f851 	bl	8002788 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Motor_EL.Config.GPIO.ENA_port, Motor_EL.Config.GPIO.ENA_pin, GPIO_PIN_RESET);
 80006e6:	4b4a      	ldr	r3, [pc, #296]	@ (8000810 <main+0x1b0>)
 80006e8:	6a1b      	ldr	r3, [r3, #32]
 80006ea:	4a49      	ldr	r2, [pc, #292]	@ (8000810 <main+0x1b0>)
 80006ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80006ee:	b291      	uxth	r1, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 f848 	bl	8002788 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  See_buffer_UART[0] = Target.Rx_data[0];
 80006f8:	4b4a      	ldr	r3, [pc, #296]	@ (8000824 <main+0x1c4>)
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	4b4b      	ldr	r3, [pc, #300]	@ (800082c <main+0x1cc>)
 80006fe:	701a      	strb	r2, [r3, #0]
	  See_buffer_UART[1] = Target.Rx_data[1];
 8000700:	4b48      	ldr	r3, [pc, #288]	@ (8000824 <main+0x1c4>)
 8000702:	785a      	ldrb	r2, [r3, #1]
 8000704:	4b49      	ldr	r3, [pc, #292]	@ (800082c <main+0x1cc>)
 8000706:	705a      	strb	r2, [r3, #1]
	  See_buffer_UART[2] = Target.Rx_data[2];
 8000708:	4b46      	ldr	r3, [pc, #280]	@ (8000824 <main+0x1c4>)
 800070a:	789a      	ldrb	r2, [r3, #2]
 800070c:	4b47      	ldr	r3, [pc, #284]	@ (800082c <main+0x1cc>)
 800070e:	709a      	strb	r2, [r3, #2]
	  See_buffer_UART[3] = Target.Rx_data[3];
 8000710:	4b44      	ldr	r3, [pc, #272]	@ (8000824 <main+0x1c4>)
 8000712:	78da      	ldrb	r2, [r3, #3]
 8000714:	4b45      	ldr	r3, [pc, #276]	@ (800082c <main+0x1cc>)
 8000716:	70da      	strb	r2, [r3, #3]
	  See_buffer_UART[4] = Target.Rx_data[4];
 8000718:	4b42      	ldr	r3, [pc, #264]	@ (8000824 <main+0x1c4>)
 800071a:	791a      	ldrb	r2, [r3, #4]
 800071c:	4b43      	ldr	r3, [pc, #268]	@ (800082c <main+0x1cc>)
 800071e:	711a      	strb	r2, [r3, #4]
	  See_buffer_UART[5] = Target.Rx_data[5];
 8000720:	4b40      	ldr	r3, [pc, #256]	@ (8000824 <main+0x1c4>)
 8000722:	795a      	ldrb	r2, [r3, #5]
 8000724:	4b41      	ldr	r3, [pc, #260]	@ (800082c <main+0x1cc>)
 8000726:	715a      	strb	r2, [r3, #5]
	  See_buffer_UART[6] = Target.Rx_data[6];
 8000728:	4b3e      	ldr	r3, [pc, #248]	@ (8000824 <main+0x1c4>)
 800072a:	799a      	ldrb	r2, [r3, #6]
 800072c:	4b3f      	ldr	r3, [pc, #252]	@ (800082c <main+0x1cc>)
 800072e:	719a      	strb	r2, [r3, #6]
	  See_buffer_UART[7] = Target.Rx_data[7];
 8000730:	4b3c      	ldr	r3, [pc, #240]	@ (8000824 <main+0x1c4>)
 8000732:	79da      	ldrb	r2, [r3, #7]
 8000734:	4b3d      	ldr	r3, [pc, #244]	@ (800082c <main+0x1cc>)
 8000736:	71da      	strb	r2, [r3, #7]
	  See_buffer_UART[8] = Target.Rx_data[8];
 8000738:	4b3a      	ldr	r3, [pc, #232]	@ (8000824 <main+0x1c4>)
 800073a:	7a1a      	ldrb	r2, [r3, #8]
 800073c:	4b3b      	ldr	r3, [pc, #236]	@ (800082c <main+0x1cc>)
 800073e:	721a      	strb	r2, [r3, #8]
	  See_buffer_UART[9] = Target.Rx_data[9];
 8000740:	4b38      	ldr	r3, [pc, #224]	@ (8000824 <main+0x1c4>)
 8000742:	7a5a      	ldrb	r2, [r3, #9]
 8000744:	4b39      	ldr	r3, [pc, #228]	@ (800082c <main+0x1cc>)
 8000746:	725a      	strb	r2, [r3, #9]
	  See_buffer_UART[0] = Target.Rx_data[0];
 8000748:	4b36      	ldr	r3, [pc, #216]	@ (8000824 <main+0x1c4>)
 800074a:	781a      	ldrb	r2, [r3, #0]
 800074c:	4b37      	ldr	r3, [pc, #220]	@ (800082c <main+0x1cc>)
 800074e:	701a      	strb	r2, [r3, #0]
	  See_buffer_UART[11] = Target.Rx_data[11];
 8000750:	4b34      	ldr	r3, [pc, #208]	@ (8000824 <main+0x1c4>)
 8000752:	7ada      	ldrb	r2, [r3, #11]
 8000754:	4b35      	ldr	r3, [pc, #212]	@ (800082c <main+0x1cc>)
 8000756:	72da      	strb	r2, [r3, #11]
	  See_buffer_UART[12] = Target.Rx_data[12];
 8000758:	4b32      	ldr	r3, [pc, #200]	@ (8000824 <main+0x1c4>)
 800075a:	7b1a      	ldrb	r2, [r3, #12]
 800075c:	4b33      	ldr	r3, [pc, #204]	@ (800082c <main+0x1cc>)
 800075e:	731a      	strb	r2, [r3, #12]
	  See_buffer_UART[13] = Target.Rx_data[13];
 8000760:	4b30      	ldr	r3, [pc, #192]	@ (8000824 <main+0x1c4>)
 8000762:	7b5a      	ldrb	r2, [r3, #13]
 8000764:	4b31      	ldr	r3, [pc, #196]	@ (800082c <main+0x1cc>)
 8000766:	735a      	strb	r2, [r3, #13]
	  See_buffer_UART[14] = Target.Rx_data[14];
 8000768:	4b2e      	ldr	r3, [pc, #184]	@ (8000824 <main+0x1c4>)
 800076a:	7b9a      	ldrb	r2, [r3, #14]
 800076c:	4b2f      	ldr	r3, [pc, #188]	@ (800082c <main+0x1cc>)
 800076e:	739a      	strb	r2, [r3, #14]
	  See_buffer_UART[15] = Target.Rx_data[15];
 8000770:	4b2c      	ldr	r3, [pc, #176]	@ (8000824 <main+0x1c4>)
 8000772:	7bda      	ldrb	r2, [r3, #15]
 8000774:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <main+0x1cc>)
 8000776:	73da      	strb	r2, [r3, #15]
	  See_buffer_UART[16] = Target.Rx_data[16];
 8000778:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <main+0x1c4>)
 800077a:	7c1a      	ldrb	r2, [r3, #16]
 800077c:	4b2b      	ldr	r3, [pc, #172]	@ (800082c <main+0x1cc>)
 800077e:	741a      	strb	r2, [r3, #16]
	  See_buffer_UART[17] = Target.Rx_data[17];
 8000780:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <main+0x1c4>)
 8000782:	7c5a      	ldrb	r2, [r3, #17]
 8000784:	4b29      	ldr	r3, [pc, #164]	@ (800082c <main+0x1cc>)
 8000786:	745a      	strb	r2, [r3, #17]
	  See_buffer_UART[18] = Target.Rx_data[18];
 8000788:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <main+0x1c4>)
 800078a:	7c9a      	ldrb	r2, [r3, #18]
 800078c:	4b27      	ldr	r3, [pc, #156]	@ (800082c <main+0x1cc>)
 800078e:	749a      	strb	r2, [r3, #18]
	  See_buffer_UART[19] = Target.Rx_data[19];
 8000790:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <main+0x1c4>)
 8000792:	7cda      	ldrb	r2, [r3, #19]
 8000794:	4b25      	ldr	r3, [pc, #148]	@ (800082c <main+0x1cc>)
 8000796:	74da      	strb	r2, [r3, #19]
	  See_buffer_UART[20] = Target.Rx_data[20];
 8000798:	4b22      	ldr	r3, [pc, #136]	@ (8000824 <main+0x1c4>)
 800079a:	7d1a      	ldrb	r2, [r3, #20]
 800079c:	4b23      	ldr	r3, [pc, #140]	@ (800082c <main+0x1cc>)
 800079e:	751a      	strb	r2, [r3, #20]

	  Level_AZ = Motor_AZ.Status.Discrete_level;
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <main+0x1a4>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a22      	ldr	r2, [pc, #136]	@ (8000830 <main+0x1d0>)
 80007a6:	6013      	str	r3, [r2, #0]
	  Level_EL = Motor_EL.Status.Discrete_level;
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <main+0x1b0>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <main+0x1d4>)
 80007ae:	6013      	str	r3, [r2, #0]

	  Angular_AZ = Motor_AZ.Status.Angular;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <main+0x1a4>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <main+0x1d8>)
 80007b6:	6013      	str	r3, [r2, #0]
	  Angular_EL = Motor_EL.Status.Angular;
 80007b8:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <main+0x1b0>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	4a1f      	ldr	r2, [pc, #124]	@ (800083c <main+0x1dc>)
 80007be:	6013      	str	r3, [r2, #0]

	  Working_zon_AZ = Working_area(&Motor_AZ);
 80007c0:	4810      	ldr	r0, [pc, #64]	@ (8000804 <main+0x1a4>)
 80007c2:	f7ff ff15 	bl	80005f0 <Working_area>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <main+0x1e0>)
 80007cc:	701a      	strb	r2, [r3, #0]
	  Working_zon_EL = Working_area(&Motor_EL);
 80007ce:	4810      	ldr	r0, [pc, #64]	@ (8000810 <main+0x1b0>)
 80007d0:	f7ff ff0e 	bl	80005f0 <Working_area>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <main+0x1e4>)
 80007da:	701a      	strb	r2, [r3, #0]

	  freq_az = Motor_AZ.Status.Frequency;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <main+0x1a4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a19      	ldr	r2, [pc, #100]	@ (8000848 <main+0x1e8>)
 80007e2:	6013      	str	r3, [r2, #0]
	  freq_el = Motor_EL.Status.Frequency;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <main+0x1b0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a18      	ldr	r2, [pc, #96]	@ (800084c <main+0x1ec>)
 80007ea:	6013      	str	r3, [r2, #0]

	  Read_AD_Conversion(&Motor_AZ);
 80007ec:	4805      	ldr	r0, [pc, #20]	@ (8000804 <main+0x1a4>)
 80007ee:	f7ff fe63 	bl	80004b8 <Read_AD_Conversion>
	  Read_AD_Conversion(&Motor_EL);
 80007f2:	4807      	ldr	r0, [pc, #28]	@ (8000810 <main+0x1b0>)
 80007f4:	f7ff fe60 	bl	80004b8 <Read_AD_Conversion>
	  See_buffer_UART[0] = Target.Rx_data[0];
 80007f8:	bf00      	nop
 80007fa:	e77d      	b.n	80006f8 <main+0x98>
 80007fc:	2000034c 	.word	0x2000034c
 8000800:	20000350 	.word	0x20000350
 8000804:	20000060 	.word	0x20000060
 8000808:	2000022c 	.word	0x2000022c
 800080c:	20000154 	.word	0x20000154
 8000810:	200000c4 	.word	0x200000c4
 8000814:	200001e4 	.word	0x200001e4
 8000818:	2000019c 	.word	0x2000019c
 800081c:	20000000 	.word	0x20000000
 8000820:	20000018 	.word	0x20000018
 8000824:	20000030 	.word	0x20000030
 8000828:	20000304 	.word	0x20000304
 800082c:	2000035c 	.word	0x2000035c
 8000830:	2000037c 	.word	0x2000037c
 8000834:	20000380 	.word	0x20000380
 8000838:	20000374 	.word	0x20000374
 800083c:	20000378 	.word	0x20000378
 8000840:	20000128 	.word	0x20000128
 8000844:	20000129 	.word	0x20000129
 8000848:	20000354 	.word	0x20000354
 800084c:	20000358 	.word	0x20000358

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	@ 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2230      	movs	r2, #48	@ 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f004 f982 	bl	8004b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	4b28      	ldr	r3, [pc, #160]	@ (800091c <SystemClock_Config+0xcc>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a27      	ldr	r2, [pc, #156]	@ (800091c <SystemClock_Config+0xcc>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	4b25      	ldr	r3, [pc, #148]	@ (800091c <SystemClock_Config+0xcc>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <SystemClock_Config+0xd0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a21      	ldr	r2, [pc, #132]	@ (8000920 <SystemClock_Config+0xd0>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800089e:	6013      	str	r3, [r2, #0]
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <SystemClock_Config+0xd0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c0:	2308      	movs	r3, #8
 80008c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 ff70 	bl	80027bc <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008e2:	f000 fbad 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	230f      	movs	r3, #15
 80008e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2302      	movs	r3, #2
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2105      	movs	r1, #5
 8000904:	4618      	mov	r0, r3
 8000906:	f002 f9d1 	bl	8002cac <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000910:	f000 fb96 	bl	8001040 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3750      	adds	r7, #80	@ 0x50
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000936:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <MX_ADC1_Init+0x98>)
 8000938:	4a21      	ldr	r2, [pc, #132]	@ (80009c0 <MX_ADC1_Init+0x9c>)
 800093a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800093c:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <MX_ADC1_Init+0x98>)
 800093e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000942:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <MX_ADC1_Init+0x98>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800094a:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <MX_ADC1_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_ADC1_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_ADC1_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095e:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <MX_ADC1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_ADC1_Init+0x98>)
 8000966:	4a17      	ldr	r2, [pc, #92]	@ (80009c4 <MX_ADC1_Init+0xa0>)
 8000968:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096a:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MX_ADC1_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_ADC1_Init+0x98>)
 8000972:	2201      	movs	r2, #1
 8000974:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_ADC1_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_ADC1_Init+0x98>)
 8000980:	2201      	movs	r2, #1
 8000982:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000984:	480d      	ldr	r0, [pc, #52]	@ (80009bc <MX_ADC1_Init+0x98>)
 8000986:	f000 fe87 	bl	8001698 <HAL_ADC_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000990:	f000 fb56 	bl	8001040 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000994:	230e      	movs	r3, #14
 8000996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_ADC1_Init+0x98>)
 80009a6:	f001 f987 	bl	8001cb8 <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009b0:	f000 fb46 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000154 	.word	0x20000154
 80009c0:	40012000 	.word	0x40012000
 80009c4:	0f000001 	.word	0x0f000001

080009c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ce:	463b      	mov	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80009da:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <MX_ADC2_Init+0x98>)
 80009dc:	4a21      	ldr	r2, [pc, #132]	@ (8000a64 <MX_ADC2_Init+0x9c>)
 80009de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <MX_ADC2_Init+0x98>)
 80009e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <MX_ADC2_Init+0x98>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <MX_ADC2_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <MX_ADC2_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <MX_ADC2_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <MX_ADC2_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a08:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <MX_ADC2_Init+0x98>)
 8000a0a:	4a17      	ldr	r2, [pc, #92]	@ (8000a68 <MX_ADC2_Init+0xa0>)
 8000a0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <MX_ADC2_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <MX_ADC2_Init+0x98>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <MX_ADC2_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <MX_ADC2_Init+0x98>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a28:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <MX_ADC2_Init+0x98>)
 8000a2a:	f000 fe35 	bl	8001698 <HAL_ADC_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000a34:	f000 fb04 	bl	8001040 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000a38:	230f      	movs	r3, #15
 8000a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	@ (8000a60 <MX_ADC2_Init+0x98>)
 8000a4a:	f001 f935 	bl	8001cb8 <HAL_ADC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000a54:	f000 faf4 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000019c 	.word	0x2000019c
 8000a64:	40012100 	.word	0x40012100
 8000a68:	0f000001 	.word	0x0f000001

08000a6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	@ 0x28
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a8e:	4b23      	ldr	r3, [pc, #140]	@ (8000b1c <MX_TIM2_Init+0xb0>)
 8000a90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000a96:	4b21      	ldr	r3, [pc, #132]	@ (8000b1c <MX_TIM2_Init+0xb0>)
 8000a98:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b1c <MX_TIM2_Init+0xb0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <MX_TIM2_Init+0xb0>)
 8000aa6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <MX_TIM2_Init+0xb0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <MX_TIM2_Init+0xb0>)
 8000ab4:	2280      	movs	r2, #128	@ 0x80
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ab8:	4818      	ldr	r0, [pc, #96]	@ (8000b1c <MX_TIM2_Init+0xb0>)
 8000aba:	f002 fb17 	bl	80030ec <HAL_TIM_PWM_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ac4:	f000 fabc 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4811      	ldr	r0, [pc, #68]	@ (8000b1c <MX_TIM2_Init+0xb0>)
 8000ad8:	f003 f838 	bl	8003b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ae2:	f000 faad 	bl	8001040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae6:	2360      	movs	r3, #96	@ 0x60
 8000ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000aea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000aee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2200      	movs	r2, #0
 8000afc:	4619      	mov	r1, r3
 8000afe:	4807      	ldr	r0, [pc, #28]	@ (8000b1c <MX_TIM2_Init+0xb0>)
 8000b00:	f002 fcda 	bl	80034b8 <HAL_TIM_PWM_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000b0a:	f000 fa99 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b0e:	4803      	ldr	r0, [pc, #12]	@ (8000b1c <MX_TIM2_Init+0xb0>)
 8000b10:	f000 fc0a 	bl	8001328 <HAL_TIM_MspPostInit>

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	@ 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001e4 	.word	0x200001e4

08000b20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
 8000b3e:	615a      	str	r2, [r3, #20]
 8000b40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b42:	4b22      	ldr	r3, [pc, #136]	@ (8000bcc <MX_TIM3_Init+0xac>)
 8000b44:	4a22      	ldr	r2, [pc, #136]	@ (8000bd0 <MX_TIM3_Init+0xb0>)
 8000b46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000b48:	4b20      	ldr	r3, [pc, #128]	@ (8000bcc <MX_TIM3_Init+0xac>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <MX_TIM3_Init+0xac>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <MX_TIM3_Init+0xac>)
 8000b56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <MX_TIM3_Init+0xac>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <MX_TIM3_Init+0xac>)
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b68:	4818      	ldr	r0, [pc, #96]	@ (8000bcc <MX_TIM3_Init+0xac>)
 8000b6a:	f002 fabf 	bl	80030ec <HAL_TIM_PWM_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b74:	f000 fa64 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b80:	f107 0320 	add.w	r3, r7, #32
 8000b84:	4619      	mov	r1, r3
 8000b86:	4811      	ldr	r0, [pc, #68]	@ (8000bcc <MX_TIM3_Init+0xac>)
 8000b88:	f002 ffe0 	bl	8003b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b92:	f000 fa55 	bl	8001040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b96:	2360      	movs	r3, #96	@ 0x60
 8000b98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000b9a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000b9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	4619      	mov	r1, r3
 8000bae:	4807      	ldr	r0, [pc, #28]	@ (8000bcc <MX_TIM3_Init+0xac>)
 8000bb0:	f002 fc82 	bl	80034b8 <HAL_TIM_PWM_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000bba:	f000 fa41 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bbe:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <MX_TIM3_Init+0xac>)
 8000bc0:	f000 fbb2 	bl	8001328 <HAL_TIM_MspPostInit>

}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	@ 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000022c 	.word	0x2000022c
 8000bd0:	40000400 	.word	0x40000400

08000bd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	@ 0x30
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	2224      	movs	r2, #36	@ 0x24
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f003 ffc0 	bl	8004b68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bf0:	4b20      	ldr	r3, [pc, #128]	@ (8000c74 <MX_TIM4_Init+0xa0>)
 8000bf2:	4a21      	ldr	r2, [pc, #132]	@ (8000c78 <MX_TIM4_Init+0xa4>)
 8000bf4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <MX_TIM4_Init+0xa0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <MX_TIM4_Init+0xa0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <MX_TIM4_Init+0xa0>)
 8000c04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <MX_TIM4_Init+0xa0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <MX_TIM4_Init+0xa0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480c      	ldr	r0, [pc, #48]	@ (8000c74 <MX_TIM4_Init+0xa0>)
 8000c42:	f002 faa2 	bl	800318a <HAL_TIM_Encoder_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000c4c:	f000 f9f8 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <MX_TIM4_Init+0xa0>)
 8000c5e:	f002 ff75 	bl	8003b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000c68:	f000 f9ea 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	3730      	adds	r7, #48	@ 0x30
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000274 	.word	0x20000274
 8000c78:	40000800 	.word	0x40000800

08000c7c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	@ 0x30
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2224      	movs	r2, #36	@ 0x24
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 ff6c 	bl	8004b68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c98:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <MX_TIM5_Init+0xa0>)
 8000c9a:	4a21      	ldr	r2, [pc, #132]	@ (8000d20 <MX_TIM5_Init+0xa4>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <MX_TIM5_Init+0xa0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <MX_TIM5_Init+0xa0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <MX_TIM5_Init+0xa0>)
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_TIM5_Init+0xa0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <MX_TIM5_Init+0xa0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	@ (8000d1c <MX_TIM5_Init+0xa0>)
 8000cea:	f002 fa4e 	bl	800318a <HAL_TIM_Encoder_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000cf4:	f000 f9a4 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_TIM5_Init+0xa0>)
 8000d06:	f002 ff21 	bl	8003b4c <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000d10:	f000 f996 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3730      	adds	r7, #48	@ 0x30
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200002bc 	.word	0x200002bc
 8000d20:	40000c00 	.word	0x40000c00

08000d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	@ (8000d74 <MX_USART2_UART_Init+0x50>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d30:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	@ (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d5c:	f002 ff86 	bl	8003c6c <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d66:	f000 f96b 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000304 	.word	0x20000304
 8000d74:	40004400 	.word	0x40004400

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	@ 0x30
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	4b52      	ldr	r3, [pc, #328]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a51      	ldr	r2, [pc, #324]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b4f      	ldr	r3, [pc, #316]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	4b4b      	ldr	r3, [pc, #300]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a4a      	ldr	r2, [pc, #296]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b48      	ldr	r3, [pc, #288]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b44      	ldr	r3, [pc, #272]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a43      	ldr	r2, [pc, #268]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b41      	ldr	r3, [pc, #260]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b3d      	ldr	r3, [pc, #244]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a3c      	ldr	r2, [pc, #240]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000dec:	f043 0310 	orr.w	r3, r3, #16
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b3a      	ldr	r3, [pc, #232]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	4b36      	ldr	r3, [pc, #216]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a35      	ldr	r2, [pc, #212]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000e08:	f043 0308 	orr.w	r3, r3, #8
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b33      	ldr	r3, [pc, #204]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a2e      	ldr	r2, [pc, #184]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000edc <MX_GPIO_Init+0x164>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Work_permit_GPIO_Port, Work_permit_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2102      	movs	r1, #2
 8000e3a:	4829      	ldr	r0, [pc, #164]	@ (8000ee0 <MX_GPIO_Init+0x168>)
 8000e3c:	f001 fca4 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_AZ_Pin|DIR_EL_Pin|Trigger_Pin, GPIO_PIN_RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	f44f 510c 	mov.w	r1, #8960	@ 0x2300
 8000e46:	4827      	ldr	r0, [pc, #156]	@ (8000ee4 <MX_GPIO_Init+0x16c>)
 8000e48:	f001 fc9e 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ENA_AZ_Pin|ENA_EL_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000e52:	4824      	ldr	r0, [pc, #144]	@ (8000ee4 <MX_GPIO_Init+0x16c>)
 8000e54:	f001 fc98 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_green_Pin|LD3_orange_Pin|LD5_red_Pin|LD6_blue_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000e5e:	4822      	ldr	r0, [pc, #136]	@ (8000ee8 <MX_GPIO_Init+0x170>)
 8000e60:	f001 fc92 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Trigger_position_Pin */
  GPIO_InitStruct.Pin = Trigger_position_Pin;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Trigger_position_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	481a      	ldr	r0, [pc, #104]	@ (8000ee0 <MX_GPIO_Init+0x168>)
 8000e78:	f001 faea 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pin : Work_permit_Pin */
  GPIO_InitStruct.Pin = Work_permit_Pin;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Work_permit_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4813      	ldr	r0, [pc, #76]	@ (8000ee0 <MX_GPIO_Init+0x168>)
 8000e94:	f001 fadc 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_AZ_Pin DIR_EL_Pin ENA_AZ_Pin ENA_EL_Pin
                           Trigger_Pin */
  GPIO_InitStruct.Pin = DIR_AZ_Pin|DIR_EL_Pin|ENA_AZ_Pin|ENA_EL_Pin
 8000e98:	f44f 536c 	mov.w	r3, #15104	@ 0x3b00
 8000e9c:	61fb      	str	r3, [r7, #28]
                          |Trigger_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <MX_GPIO_Init+0x16c>)
 8000eb2:	f001 facd 	bl	8002450 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_green_Pin LD3_orange_Pin LD5_red_Pin LD6_blue_Pin */
  GPIO_InitStruct.Pin = LD4_green_Pin|LD3_orange_Pin|LD5_red_Pin|LD6_blue_Pin;
 8000eb6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <MX_GPIO_Init+0x170>)
 8000ed0:	f001 fabe 	bl	8002450 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed4:	bf00      	nop
 8000ed6:	3730      	adds	r7, #48	@ 0x30
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40020c00 	.word	0x40020c00

08000eec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	Target.Rx_data[Size_Rx_UART - 1] = '\0';
 8000ef4:	4b45      	ldr	r3, [pc, #276]	@ (800100c <HAL_UART_RxCpltCallback+0x120>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	4a45      	ldr	r2, [pc, #276]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	54d1      	strb	r1, [r2, r3]

	Target.Azimuth =   (Target.Rx_data[3]  - '0') * 100.0f + (Target.Rx_data[4]  - '0') * 10.0f + (Target.Rx_data[5]  - '0') + (Target.Rx_data[6]  - '0') * 0.1f;
 8000f00:	4b43      	ldr	r3, [pc, #268]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000f02:	78db      	ldrb	r3, [r3, #3]
 8000f04:	3b30      	subs	r3, #48	@ 0x30
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0e:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001014 <HAL_UART_RxCpltCallback+0x128>
 8000f12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f16:	4b3e      	ldr	r3, [pc, #248]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000f18:	791b      	ldrb	r3, [r3, #4]
 8000f1a:	3b30      	subs	r3, #48	@ 0x30
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f24:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000f28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f30:	4b37      	ldr	r3, [pc, #220]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000f32:	795b      	ldrb	r3, [r3, #5]
 8000f34:	3b30      	subs	r3, #48	@ 0x30
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f42:	4b33      	ldr	r3, [pc, #204]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000f44:	799b      	ldrb	r3, [r3, #6]
 8000f46:	3b30      	subs	r3, #48	@ 0x30
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f50:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001018 <HAL_UART_RxCpltCallback+0x12c>
 8000f54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000f5e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	if (Target.Rx_data[2] == '-') Target.Azimuth = -Target.Azimuth;
 8000f62:	4b2b      	ldr	r3, [pc, #172]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000f64:	789b      	ldrb	r3, [r3, #2]
 8000f66:	2b2d      	cmp	r3, #45	@ 0x2d
 8000f68:	d107      	bne.n	8000f7a <HAL_UART_RxCpltCallback+0x8e>
 8000f6a:	4b29      	ldr	r3, [pc, #164]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000f6c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000f70:	eef1 7a67 	vneg.f32	s15, s15
 8000f74:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000f76:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	Target.Elevation = (Target.Rx_data[10] - '0') * 100.0f + (Target.Rx_data[11] - '0') * 10.0f + (Target.Rx_data[12] - '0') + (Target.Rx_data[13] - '0') * 0.1f;
 8000f7a:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000f7c:	7a9b      	ldrb	r3, [r3, #10]
 8000f7e:	3b30      	subs	r3, #48	@ 0x30
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f88:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001014 <HAL_UART_RxCpltCallback+0x128>
 8000f8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f90:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000f92:	7adb      	ldrb	r3, [r3, #11]
 8000f94:	3b30      	subs	r3, #48	@ 0x30
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000fa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000faa:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000fac:	7b1b      	ldrb	r3, [r3, #12]
 8000fae:	3b30      	subs	r3, #48	@ 0x30
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000fbe:	7b5b      	ldrb	r3, [r3, #13]
 8000fc0:	3b30      	subs	r3, #48	@ 0x30
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fca:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001018 <HAL_UART_RxCpltCallback+0x12c>
 8000fce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000fd8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	if (Target.Rx_data[9] == '-') Target.Elevation = -Target.Elevation;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000fde:	7a5b      	ldrb	r3, [r3, #9]
 8000fe0:	2b2d      	cmp	r3, #45	@ 0x2d
 8000fe2:	d107      	bne.n	8000ff4 <HAL_UART_RxCpltCallback+0x108>
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000fe6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000fea:	eef1 7a67 	vneg.f32	s15, s15
 8000fee:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000ff0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	HAL_UART_Receive_IT(&huart2, (uint8_t*)Target.Rx_data, Size_Rx_UART);
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <HAL_UART_RxCpltCallback+0x120>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4904      	ldr	r1, [pc, #16]	@ (8001010 <HAL_UART_RxCpltCallback+0x124>)
 8000ffe:	4807      	ldr	r0, [pc, #28]	@ (800101c <HAL_UART_RxCpltCallback+0x130>)
 8001000:	f002 fe84 	bl	8003d0c <HAL_UART_Receive_IT>
};
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000034c 	.word	0x2000034c
 8001010:	20000030 	.word	0x20000030
 8001014:	42c80000 	.word	0x42c80000
 8001018:	3dcccccd 	.word	0x3dcccccd
 800101c:	20000304 	.word	0x20000304

08001020 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    Target.transmitting = 0;  // Сброс флага после передачи
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <HAL_UART_TxCpltCallback+0x1c>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	20000030 	.word	0x20000030

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
	__disable_irq();
	while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <Error_Handler+0x8>

0800104c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	4a0f      	ldr	r2, [pc, #60]	@ (8001098 <HAL_MspInit+0x4c>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001060:	6453      	str	r3, [r2, #68]	@ 0x44
 8001062:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_MspInit+0x4c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_MspInit+0x4c>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107c:	6413      	str	r3, [r2, #64]	@ 0x40
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_MspInit+0x4c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	@ 0x30
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a36      	ldr	r2, [pc, #216]	@ (8001194 <HAL_ADC_MspInit+0xf8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d130      	bne.n	8001120 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <HAL_ADC_MspInit+0xfc>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a34      	ldr	r2, [pc, #208]	@ (8001198 <HAL_ADC_MspInit+0xfc>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b32      	ldr	r3, [pc, #200]	@ (8001198 <HAL_ADC_MspInit+0xfc>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	4b2e      	ldr	r3, [pc, #184]	@ (8001198 <HAL_ADC_MspInit+0xfc>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001198 <HAL_ADC_MspInit+0xfc>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001198 <HAL_ADC_MspInit+0xfc>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ADC_AZ_Pin;
 80010f6:	2310      	movs	r3, #16
 80010f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_AZ_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4824      	ldr	r0, [pc, #144]	@ (800119c <HAL_ADC_MspInit+0x100>)
 800110a:	f001 f9a1 	bl	8002450 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2012      	movs	r0, #18
 8001114:	f001 f8d3 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001118:	2012      	movs	r0, #18
 800111a:	f001 f8ec 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800111e:	e034      	b.n	800118a <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a1e      	ldr	r2, [pc, #120]	@ (80011a0 <HAL_ADC_MspInit+0x104>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d12f      	bne.n	800118a <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <HAL_ADC_MspInit+0xfc>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <HAL_ADC_MspInit+0xfc>)
 8001134:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001138:	6453      	str	r3, [r2, #68]	@ 0x44
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_ADC_MspInit+0xfc>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <HAL_ADC_MspInit+0xfc>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <HAL_ADC_MspInit+0xfc>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6313      	str	r3, [r2, #48]	@ 0x30
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <HAL_ADC_MspInit+0xfc>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_EL_Pin;
 8001162:	2320      	movs	r3, #32
 8001164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_EL_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	4809      	ldr	r0, [pc, #36]	@ (800119c <HAL_ADC_MspInit+0x100>)
 8001176:	f001 f96b 	bl	8002450 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2100      	movs	r1, #0
 800117e:	2012      	movs	r0, #18
 8001180:	f001 f89d 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001184:	2012      	movs	r0, #18
 8001186:	f001 f8b6 	bl	80022f6 <HAL_NVIC_EnableIRQ>
}
 800118a:	bf00      	nop
 800118c:	3730      	adds	r7, #48	@ 0x30
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40012000 	.word	0x40012000
 8001198:	40023800 	.word	0x40023800
 800119c:	40020800 	.word	0x40020800
 80011a0:	40012100 	.word	0x40012100

080011a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011b4:	d116      	bne.n	80011e4 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <HAL_TIM_PWM_MspInit+0x80>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	4a19      	ldr	r2, [pc, #100]	@ (8001224 <HAL_TIM_PWM_MspInit+0x80>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c6:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <HAL_TIM_PWM_MspInit+0x80>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	201c      	movs	r0, #28
 80011d8:	f001 f871 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011dc:	201c      	movs	r0, #28
 80011de:	f001 f88a 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011e2:	e01a      	b.n	800121a <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM3)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <HAL_TIM_PWM_MspInit+0x84>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d115      	bne.n	800121a <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <HAL_TIM_PWM_MspInit+0x80>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <HAL_TIM_PWM_MspInit+0x80>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fe:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <HAL_TIM_PWM_MspInit+0x80>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	201d      	movs	r0, #29
 8001210:	f001 f855 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001214:	201d      	movs	r0, #29
 8001216:	f001 f86e 	bl	80022f6 <HAL_NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40000400 	.word	0x40000400

0800122c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	@ 0x30
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a32      	ldr	r2, [pc, #200]	@ (8001314 <HAL_TIM_Encoder_MspInit+0xe8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d12c      	bne.n	80012a8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	4b31      	ldr	r3, [pc, #196]	@ (8001318 <HAL_TIM_Encoder_MspInit+0xec>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	4a30      	ldr	r2, [pc, #192]	@ (8001318 <HAL_TIM_Encoder_MspInit+0xec>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
 800125e:	4b2e      	ldr	r3, [pc, #184]	@ (8001318 <HAL_TIM_Encoder_MspInit+0xec>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	4b2a      	ldr	r3, [pc, #168]	@ (8001318 <HAL_TIM_Encoder_MspInit+0xec>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a29      	ldr	r2, [pc, #164]	@ (8001318 <HAL_TIM_Encoder_MspInit+0xec>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <HAL_TIM_Encoder_MspInit+0xec>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_EL_A_Pin|Encoder_EL_B_Pin;
 8001286:	23c0      	movs	r3, #192	@ 0xc0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001296:	2302      	movs	r3, #2
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	481e      	ldr	r0, [pc, #120]	@ (800131c <HAL_TIM_Encoder_MspInit+0xf0>)
 80012a2:	f001 f8d5 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80012a6:	e030      	b.n	800130a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001320 <HAL_TIM_Encoder_MspInit+0xf4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d12b      	bne.n	800130a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <HAL_TIM_Encoder_MspInit+0xec>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	4a17      	ldr	r2, [pc, #92]	@ (8001318 <HAL_TIM_Encoder_MspInit+0xec>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_TIM_Encoder_MspInit+0xec>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <HAL_TIM_Encoder_MspInit+0xec>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a10      	ldr	r2, [pc, #64]	@ (8001318 <HAL_TIM_Encoder_MspInit+0xec>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <HAL_TIM_Encoder_MspInit+0xec>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_AZ_A_Pin|Encoder_AZ_B_Pin;
 80012ea:	2303      	movs	r3, #3
 80012ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80012fa:	2302      	movs	r3, #2
 80012fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	@ (8001324 <HAL_TIM_Encoder_MspInit+0xf8>)
 8001306:	f001 f8a3 	bl	8002450 <HAL_GPIO_Init>
}
 800130a:	bf00      	nop
 800130c:	3730      	adds	r7, #48	@ 0x30
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40000800 	.word	0x40000800
 8001318:	40023800 	.word	0x40023800
 800131c:	40020400 	.word	0x40020400
 8001320:	40000c00 	.word	0x40000c00
 8001324:	40020000 	.word	0x40020000

08001328 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001348:	d11e      	bne.n	8001388 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <HAL_TIM_MspPostInit+0xb0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a21      	ldr	r2, [pc, #132]	@ (80013d8 <HAL_TIM_MspPostInit+0xb0>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <HAL_TIM_MspPostInit+0xb0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM_EL_Pin;
 8001366:	2320      	movs	r3, #32
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001376:	2301      	movs	r3, #1
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM_EL_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4816      	ldr	r0, [pc, #88]	@ (80013dc <HAL_TIM_MspPostInit+0xb4>)
 8001382:	f001 f865 	bl	8002450 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001386:	e022      	b.n	80013ce <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <HAL_TIM_MspPostInit+0xb8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d11d      	bne.n	80013ce <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_TIM_MspPostInit+0xb0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <HAL_TIM_MspPostInit+0xb0>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_TIM_MspPostInit+0xb0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_AZ_Pin;
 80013ae:	2340      	movs	r3, #64	@ 0x40
 80013b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013be:	2302      	movs	r3, #2
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM_AZ_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4804      	ldr	r0, [pc, #16]	@ (80013dc <HAL_TIM_MspPostInit+0xb4>)
 80013ca:	f001 f841 	bl	8002450 <HAL_GPIO_Init>
}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	@ 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40000400 	.word	0x40000400

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1d      	ldr	r2, [pc, #116]	@ (8001478 <HAL_UART_MspInit+0x94>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d133      	bne.n	800146e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <HAL_UART_MspInit+0x98>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	4a1b      	ldr	r2, [pc, #108]	@ (800147c <HAL_UART_MspInit+0x98>)
 8001410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001414:	6413      	str	r3, [r2, #64]	@ 0x40
 8001416:	4b19      	ldr	r3, [pc, #100]	@ (800147c <HAL_UART_MspInit+0x98>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_UART_MspInit+0x98>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a14      	ldr	r2, [pc, #80]	@ (800147c <HAL_UART_MspInit+0x98>)
 800142c:	f043 0308 	orr.w	r3, r3, #8
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <HAL_UART_MspInit+0x98>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800143e:	2360      	movs	r3, #96	@ 0x60
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144e:	2307      	movs	r3, #7
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4809      	ldr	r0, [pc, #36]	@ (8001480 <HAL_UART_MspInit+0x9c>)
 800145a:	f000 fff9 	bl	8002450 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	2026      	movs	r0, #38	@ 0x26
 8001464:	f000 ff2b 	bl	80022be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001468:	2026      	movs	r0, #38	@ 0x26
 800146a:	f000 ff44 	bl	80022f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	@ 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40004400 	.word	0x40004400
 800147c:	40023800 	.word	0x40023800
 8001480:	40020c00 	.word	0x40020c00

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <NMI_Handler+0x4>

0800148c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <MemManage_Handler+0x4>

0800149c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <UsageFault_Handler+0x4>

080014ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014da:	f000 f8bd 	bl	8001658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014e8:	4803      	ldr	r0, [pc, #12]	@ (80014f8 <ADC_IRQHandler+0x14>)
 80014ea:	f000 faa9 	bl	8001a40 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80014ee:	4803      	ldr	r0, [pc, #12]	@ (80014fc <ADC_IRQHandler+0x18>)
 80014f0:	f000 faa6 	bl	8001a40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000154 	.word	0x20000154
 80014fc:	2000019c 	.word	0x2000019c

08001500 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <TIM2_IRQHandler+0x10>)
 8001506:	f001 fee6 	bl	80032d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200001e4 	.word	0x200001e4

08001514 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <TIM3_IRQHandler+0x10>)
 800151a:	f001 fedc 	bl	80032d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000022c 	.word	0x2000022c

08001528 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <USART2_IRQHandler+0x10>)
 800152e:	f002 fc13 	bl	8003d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000304 	.word	0x20000304

0800153c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack     /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001598 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001564:	f7ff ffea 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156a:	490d      	ldr	r1, [pc, #52]	@ (80015a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001570:	e002      	b.n	8001578 <LoopCopyDataInit>

08001572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001576:	3304      	adds	r3, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800157c:	d3f9      	bcc.n	8001572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001580:	4c0a      	ldr	r4, [pc, #40]	@ (80015ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001584:	e001      	b.n	800158a <LoopFillZerobss>

08001586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001588:	3204      	adds	r2, #4

0800158a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800158c:	d3fb      	bcc.n	8001586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158e:	f003 faf3 	bl	8004b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff f865 	bl	8000660 <main>
  bx  lr    
 8001596:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800159c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a0:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 80015a4:	08004c00 	.word	0x08004c00
  ldr r2, =_sbss
 80015a8:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 80015ac:	20000388 	.word	0x20000388

080015b0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <CAN1_RX0_IRQHandler>
	...

080015b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b8:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <HAL_Init+0x40>)
 80015be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <HAL_Init+0x40>)
 80015ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <HAL_Init+0x40>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015dc:	2003      	movs	r0, #3
 80015de:	f000 fe63 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015e2:	200f      	movs	r0, #15
 80015e4:	f000 f808 	bl	80015f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e8:	f7ff fd30 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <HAL_InitTick+0x54>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_InitTick+0x58>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fe7b 	bl	8002312 <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e00e      	b.n	8001644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b0f      	cmp	r3, #15
 800162a:	d80a      	bhi.n	8001642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800162c:	2200      	movs	r2, #0
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f04f 30ff 	mov.w	r0, #4294967295
 8001634:	f000 fe43 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001638:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <HAL_InitTick+0x5c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000012c 	.word	0x2000012c
 8001650:	20000134 	.word	0x20000134
 8001654:	20000130 	.word	0x20000130

08001658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800165c:	4b06      	ldr	r3, [pc, #24]	@ (8001678 <HAL_IncTick+0x20>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_IncTick+0x24>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4413      	add	r3, r2
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <HAL_IncTick+0x24>)
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000134 	.word	0x20000134
 800167c:	20000384 	.word	0x20000384

08001680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return uwTick;
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_GetTick+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000384 	.word	0x20000384

08001698 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e033      	b.n	8001716 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fcf0 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f003 0310 	and.w	r3, r3, #16
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d118      	bne.n	8001708 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016de:	f023 0302 	bic.w	r3, r3, #2
 80016e2:	f043 0202 	orr.w	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fc06 	bl	8001efc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f023 0303 	bic.w	r3, r3, #3
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	641a      	str	r2, [r3, #64]	@ 0x40
 8001706:	e001      	b.n	800170c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_ADC_Start+0x1a>
 8001736:	2302      	movs	r3, #2
 8001738:	e0b2      	b.n	80018a0 <HAL_ADC_Start+0x180>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b01      	cmp	r3, #1
 800174e:	d018      	beq.n	8001782 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001760:	4b52      	ldr	r3, [pc, #328]	@ (80018ac <HAL_ADC_Start+0x18c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a52      	ldr	r2, [pc, #328]	@ (80018b0 <HAL_ADC_Start+0x190>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	0c9a      	lsrs	r2, r3, #18
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001774:	e002      	b.n	800177c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	3b01      	subs	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d17a      	bne.n	8001886 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001794:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017ce:	d106      	bne.n	80017de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d4:	f023 0206 	bic.w	r2, r3, #6
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	645a      	str	r2, [r3, #68]	@ 0x44
 80017dc:	e002      	b.n	80017e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ec:	4b31      	ldr	r3, [pc, #196]	@ (80018b4 <HAL_ADC_Start+0x194>)
 80017ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80017f8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 031f 	and.w	r3, r3, #31
 8001802:	2b00      	cmp	r3, #0
 8001804:	d12a      	bne.n	800185c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a2b      	ldr	r2, [pc, #172]	@ (80018b8 <HAL_ADC_Start+0x198>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d015      	beq.n	800183c <HAL_ADC_Start+0x11c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a29      	ldr	r2, [pc, #164]	@ (80018bc <HAL_ADC_Start+0x19c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d105      	bne.n	8001826 <HAL_ADC_Start+0x106>
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <HAL_ADC_Start+0x194>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00a      	beq.n	800183c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a25      	ldr	r2, [pc, #148]	@ (80018c0 <HAL_ADC_Start+0x1a0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d136      	bne.n	800189e <HAL_ADC_Start+0x17e>
 8001830:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_ADC_Start+0x194>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0310 	and.w	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d130      	bne.n	800189e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d129      	bne.n	800189e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	e020      	b.n	800189e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a15      	ldr	r2, [pc, #84]	@ (80018b8 <HAL_ADC_Start+0x198>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d11b      	bne.n	800189e <HAL_ADC_Start+0x17e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d114      	bne.n	800189e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	e00b      	b.n	800189e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	f043 0210 	orr.w	r2, r3, #16
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	2000012c 	.word	0x2000012c
 80018b0:	431bde83 	.word	0x431bde83
 80018b4:	40012300 	.word	0x40012300
 80018b8:	40012000 	.word	0x40012000
 80018bc:	40012100 	.word	0x40012100
 80018c0:	40012200 	.word	0x40012200

080018c4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Stop+0x16>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e021      	b.n	800191e <HAL_ADC_Stop+0x5a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0201 	bic.w	r2, r2, #1
 80018f0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001946:	d113      	bne.n	8001970 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001956:	d10b      	bne.n	8001970 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	f043 0220 	orr.w	r2, r3, #32
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e063      	b.n	8001a38 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001970:	f7ff fe86 	bl	8001680 <HAL_GetTick>
 8001974:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001976:	e021      	b.n	80019bc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197e:	d01d      	beq.n	80019bc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <HAL_ADC_PollForConversion+0x6c>
 8001986:	f7ff fe7b 	bl	8001680 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d212      	bcs.n	80019bc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d00b      	beq.n	80019bc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	f043 0204 	orr.w	r2, r3, #4
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e03d      	b.n	8001a38 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d1d6      	bne.n	8001978 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f06f 0212 	mvn.w	r2, #18
 80019d2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d123      	bne.n	8001a36 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d11f      	bne.n	8001a36 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019fc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d111      	bne.n	8001a36 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d049      	beq.n	8001b0a <HAL_ADC_IRQHandler+0xca>
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d046      	beq.n	8001b0a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d12b      	bne.n	8001afa <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d127      	bne.n	8001afa <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d006      	beq.n	8001ac6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d119      	bne.n	8001afa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0220 	bic.w	r2, r2, #32
 8001ad4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d105      	bne.n	8001afa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8bd 	bl	8001c7a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f06f 0212 	mvn.w	r2, #18
 8001b08:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b18:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d057      	beq.n	8001bd0 <HAL_ADC_IRQHandler+0x190>
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d054      	beq.n	8001bd0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d105      	bne.n	8001b3e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d139      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b52:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d12b      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d124      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d11d      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d119      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b9a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	f043 0201 	orr.w	r2, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fa97 	bl	80020f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f06f 020c 	mvn.w	r2, #12
 8001bce:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bde:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d017      	beq.n	8001c16 <HAL_ADC_IRQHandler+0x1d6>
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d014      	beq.n	8001c16 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d10d      	bne.n	8001c16 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f841 	bl	8001c8e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0201 	mvn.w	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c24:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d015      	beq.n	8001c58 <HAL_ADC_IRQHandler+0x218>
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d012      	beq.n	8001c58 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	f043 0202 	orr.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f06f 0220 	mvn.w	r2, #32
 8001c46:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f82a 	bl	8001ca2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f06f 0220 	mvn.w	r2, #32
 8001c56:	601a      	str	r2, [r3, #0]
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x1c>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e105      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x228>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b09      	cmp	r3, #9
 8001ce2:	d925      	bls.n	8001d30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68d9      	ldr	r1, [r3, #12]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b1e      	subs	r3, #30
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43da      	mvns	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	400a      	ands	r2, r1
 8001d08:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68d9      	ldr	r1, [r3, #12]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4403      	add	r3, r0
 8001d22:	3b1e      	subs	r3, #30
 8001d24:	409a      	lsls	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	e022      	b.n	8001d76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6919      	ldr	r1, [r3, #16]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	2207      	movs	r2, #7
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	400a      	ands	r2, r1
 8001d52:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6919      	ldr	r1, [r3, #16]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	4603      	mov	r3, r0
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4403      	add	r3, r0
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d824      	bhi.n	8001dc8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3b05      	subs	r3, #5
 8001d90:	221f      	movs	r2, #31
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	3b05      	subs	r3, #5
 8001dba:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dc6:	e04c      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b0c      	cmp	r3, #12
 8001dce:	d824      	bhi.n	8001e1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	3b23      	subs	r3, #35	@ 0x23
 8001de2:	221f      	movs	r2, #31
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43da      	mvns	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	400a      	ands	r2, r1
 8001df0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b23      	subs	r3, #35	@ 0x23
 8001e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e18:	e023      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b41      	subs	r3, #65	@ 0x41
 8001e2c:	221f      	movs	r2, #31
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	400a      	ands	r2, r1
 8001e3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	3b41      	subs	r3, #65	@ 0x41
 8001e56:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e62:	4b22      	ldr	r3, [pc, #136]	@ (8001eec <HAL_ADC_ConfigChannel+0x234>)
 8001e64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a21      	ldr	r2, [pc, #132]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x238>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d109      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x1cc>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b12      	cmp	r3, #18
 8001e76:	d105      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a19      	ldr	r2, [pc, #100]	@ (8001ef0 <HAL_ADC_ConfigChannel+0x238>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d123      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x21e>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d003      	beq.n	8001e9e <HAL_ADC_ConfigChannel+0x1e6>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b11      	cmp	r3, #17
 8001e9c:	d11b      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d111      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x23c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a10      	ldr	r2, [pc, #64]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x240>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	0c9a      	lsrs	r2, r3, #18
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ec8:	e002      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f9      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	40012300 	.word	0x40012300
 8001ef0:	40012000 	.word	0x40012000
 8001ef4:	2000012c 	.word	0x2000012c
 8001ef8:	431bde83 	.word	0x431bde83

08001efc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f04:	4b79      	ldr	r3, [pc, #484]	@ (80020ec <ADC_Init+0x1f0>)
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	021a      	lsls	r2, r3, #8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f8e:	4a58      	ldr	r2, [pc, #352]	@ (80020f0 <ADC_Init+0x1f4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d022      	beq.n	8001fda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fa2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6899      	ldr	r1, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	e00f      	b.n	8001ffa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ff8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0202 	bic.w	r2, r2, #2
 8002008:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6899      	ldr	r1, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7e1b      	ldrb	r3, [r3, #24]
 8002014:	005a      	lsls	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01b      	beq.n	8002060 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002036:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002046:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	3b01      	subs	r3, #1
 8002054:	035a      	lsls	r2, r3, #13
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	e007      	b.n	8002070 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800206e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800207e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	3b01      	subs	r3, #1
 800208c:	051a      	lsls	r2, r3, #20
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6899      	ldr	r1, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020b2:	025a      	lsls	r2, r3, #9
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6899      	ldr	r1, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	029a      	lsls	r2, r3, #10
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	609a      	str	r2, [r3, #8]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40012300 	.word	0x40012300
 80020f0:	0f000001 	.word	0x0f000001

080020f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002118:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <__NVIC_SetPriorityGrouping+0x44>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213a:	4a04      	ldr	r2, [pc, #16]	@ (800214c <__NVIC_SetPriorityGrouping+0x44>)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	60d3      	str	r3, [r2, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <__NVIC_GetPriorityGrouping+0x18>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	f003 0307 	and.w	r3, r3, #7
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db0b      	blt.n	8002196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	4907      	ldr	r1, [pc, #28]	@ (80021a4 <__NVIC_EnableIRQ+0x38>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2001      	movs	r0, #1
 800218e:	fa00 f202 	lsl.w	r2, r0, r2
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e100 	.word	0xe000e100

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	@ (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	@ (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	@ 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	@ 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff29 	bl	8002108 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d0:	f7ff ff3e 	bl	8002150 <__NVIC_GetPriorityGrouping>
 80022d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f7ff ff8e 	bl	80021fc <NVIC_EncodePriority>
 80022e0:	4602      	mov	r2, r0
 80022e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff5d 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff31 	bl	800216c <__NVIC_EnableIRQ>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff ffa2 	bl	8002264 <SysTick_Config>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002338:	f7ff f9a2 	bl	8001680 <HAL_GetTick>
 800233c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d008      	beq.n	800235c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2280      	movs	r2, #128	@ 0x80
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e052      	b.n	8002402 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0216 	bic.w	r2, r2, #22
 800236a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800237a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d103      	bne.n	800238c <HAL_DMA_Abort+0x62>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0208 	bic.w	r2, r2, #8
 800239a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ac:	e013      	b.n	80023d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ae:	f7ff f967 	bl	8001680 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d90c      	bls.n	80023d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2203      	movs	r2, #3
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e015      	b.n	8002402 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1e4      	bne.n	80023ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e8:	223f      	movs	r2, #63	@ 0x3f
 80023ea:	409a      	lsls	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d004      	beq.n	8002428 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2280      	movs	r2, #128	@ 0x80
 8002422:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e00c      	b.n	8002442 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2205      	movs	r2, #5
 800242c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0201 	bic.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	@ 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	e16b      	b.n	8002744 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	429a      	cmp	r2, r3
 8002486:	f040 815a 	bne.w	800273e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	2b01      	cmp	r3, #1
 8002494:	d005      	beq.n	80024a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d130      	bne.n	8002504 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	2203      	movs	r2, #3
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d8:	2201      	movs	r2, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 0201 	and.w	r2, r3, #1
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b03      	cmp	r3, #3
 800250e:	d017      	beq.n	8002540 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d123      	bne.n	8002594 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	220f      	movs	r2, #15
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	08da      	lsrs	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3208      	adds	r2, #8
 800258e:	69b9      	ldr	r1, [r7, #24]
 8002590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0203 	and.w	r2, r3, #3
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80b4 	beq.w	800273e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	4b60      	ldr	r3, [pc, #384]	@ (800275c <HAL_GPIO_Init+0x30c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	4a5f      	ldr	r2, [pc, #380]	@ (800275c <HAL_GPIO_Init+0x30c>)
 80025e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025e6:	4b5d      	ldr	r3, [pc, #372]	@ (800275c <HAL_GPIO_Init+0x30c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002760 <HAL_GPIO_Init+0x310>)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3302      	adds	r3, #2
 80025fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	220f      	movs	r2, #15
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a52      	ldr	r2, [pc, #328]	@ (8002764 <HAL_GPIO_Init+0x314>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d02b      	beq.n	8002676 <HAL_GPIO_Init+0x226>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a51      	ldr	r2, [pc, #324]	@ (8002768 <HAL_GPIO_Init+0x318>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d025      	beq.n	8002672 <HAL_GPIO_Init+0x222>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a50      	ldr	r2, [pc, #320]	@ (800276c <HAL_GPIO_Init+0x31c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01f      	beq.n	800266e <HAL_GPIO_Init+0x21e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4f      	ldr	r2, [pc, #316]	@ (8002770 <HAL_GPIO_Init+0x320>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d019      	beq.n	800266a <HAL_GPIO_Init+0x21a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4e      	ldr	r2, [pc, #312]	@ (8002774 <HAL_GPIO_Init+0x324>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_GPIO_Init+0x216>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4d      	ldr	r2, [pc, #308]	@ (8002778 <HAL_GPIO_Init+0x328>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00d      	beq.n	8002662 <HAL_GPIO_Init+0x212>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4c      	ldr	r2, [pc, #304]	@ (800277c <HAL_GPIO_Init+0x32c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d007      	beq.n	800265e <HAL_GPIO_Init+0x20e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4b      	ldr	r2, [pc, #300]	@ (8002780 <HAL_GPIO_Init+0x330>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d101      	bne.n	800265a <HAL_GPIO_Init+0x20a>
 8002656:	2307      	movs	r3, #7
 8002658:	e00e      	b.n	8002678 <HAL_GPIO_Init+0x228>
 800265a:	2308      	movs	r3, #8
 800265c:	e00c      	b.n	8002678 <HAL_GPIO_Init+0x228>
 800265e:	2306      	movs	r3, #6
 8002660:	e00a      	b.n	8002678 <HAL_GPIO_Init+0x228>
 8002662:	2305      	movs	r3, #5
 8002664:	e008      	b.n	8002678 <HAL_GPIO_Init+0x228>
 8002666:	2304      	movs	r3, #4
 8002668:	e006      	b.n	8002678 <HAL_GPIO_Init+0x228>
 800266a:	2303      	movs	r3, #3
 800266c:	e004      	b.n	8002678 <HAL_GPIO_Init+0x228>
 800266e:	2302      	movs	r3, #2
 8002670:	e002      	b.n	8002678 <HAL_GPIO_Init+0x228>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_GPIO_Init+0x228>
 8002676:	2300      	movs	r3, #0
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	f002 0203 	and.w	r2, r2, #3
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	4093      	lsls	r3, r2
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002688:	4935      	ldr	r1, [pc, #212]	@ (8002760 <HAL_GPIO_Init+0x310>)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	089b      	lsrs	r3, r3, #2
 800268e:	3302      	adds	r3, #2
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002696:	4b3b      	ldr	r3, [pc, #236]	@ (8002784 <HAL_GPIO_Init+0x334>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ba:	4a32      	ldr	r2, [pc, #200]	@ (8002784 <HAL_GPIO_Init+0x334>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c0:	4b30      	ldr	r3, [pc, #192]	@ (8002784 <HAL_GPIO_Init+0x334>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e4:	4a27      	ldr	r2, [pc, #156]	@ (8002784 <HAL_GPIO_Init+0x334>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ea:	4b26      	ldr	r3, [pc, #152]	@ (8002784 <HAL_GPIO_Init+0x334>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800270e:	4a1d      	ldr	r2, [pc, #116]	@ (8002784 <HAL_GPIO_Init+0x334>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002714:	4b1b      	ldr	r3, [pc, #108]	@ (8002784 <HAL_GPIO_Init+0x334>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002738:	4a12      	ldr	r2, [pc, #72]	@ (8002784 <HAL_GPIO_Init+0x334>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3301      	adds	r3, #1
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b0f      	cmp	r3, #15
 8002748:	f67f ae90 	bls.w	800246c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	3724      	adds	r7, #36	@ 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40013800 	.word	0x40013800
 8002764:	40020000 	.word	0x40020000
 8002768:	40020400 	.word	0x40020400
 800276c:	40020800 	.word	0x40020800
 8002770:	40020c00 	.word	0x40020c00
 8002774:	40021000 	.word	0x40021000
 8002778:	40021400 	.word	0x40021400
 800277c:	40021800 	.word	0x40021800
 8002780:	40021c00 	.word	0x40021c00
 8002784:	40013c00 	.word	0x40013c00

08002788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
 8002794:	4613      	mov	r3, r2
 8002796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002798:	787b      	ldrb	r3, [r7, #1]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a4:	e003      	b.n	80027ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	041a      	lsls	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	619a      	str	r2, [r3, #24]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e267      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d075      	beq.n	80028c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027da:	4b88      	ldr	r3, [pc, #544]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d00c      	beq.n	8002800 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e6:	4b85      	ldr	r3, [pc, #532]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d112      	bne.n	8002818 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f2:	4b82      	ldr	r3, [pc, #520]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027fe:	d10b      	bne.n	8002818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	4b7e      	ldr	r3, [pc, #504]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05b      	beq.n	80028c4 <HAL_RCC_OscConfig+0x108>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d157      	bne.n	80028c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e242      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002820:	d106      	bne.n	8002830 <HAL_RCC_OscConfig+0x74>
 8002822:	4b76      	ldr	r3, [pc, #472]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a75      	ldr	r2, [pc, #468]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e01d      	b.n	800286c <HAL_RCC_OscConfig+0xb0>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0x98>
 800283a:	4b70      	ldr	r3, [pc, #448]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a6f      	ldr	r2, [pc, #444]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4b6d      	ldr	r3, [pc, #436]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a6c      	ldr	r2, [pc, #432]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e00b      	b.n	800286c <HAL_RCC_OscConfig+0xb0>
 8002854:	4b69      	ldr	r3, [pc, #420]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a68      	ldr	r2, [pc, #416]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b66      	ldr	r3, [pc, #408]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a65      	ldr	r2, [pc, #404]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800286a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe ff04 	bl	8001680 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800287c:	f7fe ff00 	bl	8001680 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	@ 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e207      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b5b      	ldr	r3, [pc, #364]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0xc0>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe fef0 	bl	8001680 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a4:	f7fe feec 	bl	8001680 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	@ 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1f3      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b6:	4b51      	ldr	r3, [pc, #324]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0xe8>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d063      	beq.n	800299a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028d2:	4b4a      	ldr	r3, [pc, #296]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00b      	beq.n	80028f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028de:	4b47      	ldr	r3, [pc, #284]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d11c      	bne.n	8002924 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ea:	4b44      	ldr	r3, [pc, #272]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f6:	4b41      	ldr	r3, [pc, #260]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_RCC_OscConfig+0x152>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e1c7      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	4b3b      	ldr	r3, [pc, #236]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4937      	ldr	r1, [pc, #220]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800291e:	4313      	orrs	r3, r2
 8002920:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	e03a      	b.n	800299a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800292c:	4b34      	ldr	r3, [pc, #208]	@ (8002a00 <HAL_RCC_OscConfig+0x244>)
 800292e:	2201      	movs	r2, #1
 8002930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7fe fea5 	bl	8001680 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800293a:	f7fe fea1 	bl	8001680 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e1a8      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	4b2b      	ldr	r3, [pc, #172]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002958:	4b28      	ldr	r3, [pc, #160]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4925      	ldr	r1, [pc, #148]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002968:	4313      	orrs	r3, r2
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	e015      	b.n	800299a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296e:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <HAL_RCC_OscConfig+0x244>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe fe84 	bl	8001680 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297c:	f7fe fe80 	bl	8001680 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e187      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	4b1b      	ldr	r3, [pc, #108]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d036      	beq.n	8002a14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d016      	beq.n	80029dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ae:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <HAL_RCC_OscConfig+0x248>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7fe fe64 	bl	8001680 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029bc:	f7fe fe60 	bl	8001680 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e167      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <HAL_RCC_OscConfig+0x240>)
 80029d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x200>
 80029da:	e01b      	b.n	8002a14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029dc:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_RCC_OscConfig+0x248>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e2:	f7fe fe4d 	bl	8001680 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	e00e      	b.n	8002a08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ea:	f7fe fe49 	bl	8001680 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d907      	bls.n	8002a08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e150      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
 80029fc:	40023800 	.word	0x40023800
 8002a00:	42470000 	.word	0x42470000
 8002a04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	4b88      	ldr	r3, [pc, #544]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ea      	bne.n	80029ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8097 	beq.w	8002b50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b81      	ldr	r3, [pc, #516]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	4b7d      	ldr	r3, [pc, #500]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a42:	4b7a      	ldr	r3, [pc, #488]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b77      	ldr	r3, [pc, #476]	@ (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5e:	4b74      	ldr	r3, [pc, #464]	@ (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a73      	ldr	r2, [pc, #460]	@ (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fe09 	bl	8001680 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a72:	f7fe fe05 	bl	8001680 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e10c      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	4b6a      	ldr	r3, [pc, #424]	@ (8002c30 <HAL_RCC_OscConfig+0x474>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x2ea>
 8002a98:	4b64      	ldr	r3, [pc, #400]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9c:	4a63      	ldr	r2, [pc, #396]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa4:	e01c      	b.n	8002ae0 <HAL_RCC_OscConfig+0x324>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x30c>
 8002aae:	4b5f      	ldr	r3, [pc, #380]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aba:	4b5c      	ldr	r3, [pc, #368]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	4a5b      	ldr	r2, [pc, #364]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0x324>
 8002ac8:	4b58      	ldr	r3, [pc, #352]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002acc:	4a57      	ldr	r2, [pc, #348]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad4:	4b55      	ldr	r3, [pc, #340]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad8:	4a54      	ldr	r2, [pc, #336]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002ada:	f023 0304 	bic.w	r3, r3, #4
 8002ade:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d015      	beq.n	8002b14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fdca 	bl	8001680 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fe fdc6 	bl	8001680 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0cb      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b06:	4b49      	ldr	r3, [pc, #292]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ee      	beq.n	8002af0 <HAL_RCC_OscConfig+0x334>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b14:	f7fe fdb4 	bl	8001680 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fdb0 	bl	8001680 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0b5      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b32:	4b3e      	ldr	r3, [pc, #248]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d105      	bne.n	8002b50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b44:	4b39      	ldr	r3, [pc, #228]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	4a38      	ldr	r2, [pc, #224]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80a1 	beq.w	8002c9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b5a:	4b34      	ldr	r3, [pc, #208]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d05c      	beq.n	8002c20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d141      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b31      	ldr	r3, [pc, #196]	@ (8002c34 <HAL_RCC_OscConfig+0x478>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fd84 	bl	8001680 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fd80 	bl	8001680 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e087      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	4b27      	ldr	r3, [pc, #156]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb0:	085b      	lsrs	r3, r3, #1
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	491b      	ldr	r1, [pc, #108]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <HAL_RCC_OscConfig+0x478>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7fe fd59 	bl	8001680 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fe fd55 	bl	8001680 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e05c      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x416>
 8002bf0:	e054      	b.n	8002c9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <HAL_RCC_OscConfig+0x478>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fd42 	bl	8001680 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fd3e 	bl	8001680 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e045      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_OscConfig+0x470>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x444>
 8002c1e:	e03d      	b.n	8002c9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e038      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40007000 	.word	0x40007000
 8002c34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_RCC_OscConfig+0x4ec>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d028      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d121      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d11a      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c68:	4013      	ands	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d111      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	3b01      	subs	r3, #1
 8002c82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800

08002cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0cc      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc0:	4b68      	ldr	r3, [pc, #416]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d90c      	bls.n	8002ce8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cce:	4b65      	ldr	r3, [pc, #404]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b63      	ldr	r3, [pc, #396]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0b8      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d00:	4b59      	ldr	r3, [pc, #356]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a58      	ldr	r2, [pc, #352]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d18:	4b53      	ldr	r3, [pc, #332]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b50      	ldr	r3, [pc, #320]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	494d      	ldr	r1, [pc, #308]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d044      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b47      	ldr	r3, [pc, #284]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d119      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e07f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e06f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e067      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d8a:	4b37      	ldr	r3, [pc, #220]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4934      	ldr	r1, [pc, #208]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe fc70 	bl	8001680 <HAL_GetTick>
 8002da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da4:	f7fe fc6c 	bl	8001680 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e04f      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	4b2b      	ldr	r3, [pc, #172]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 020c 	and.w	r2, r3, #12
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d1eb      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b25      	ldr	r3, [pc, #148]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d20c      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b22      	ldr	r3, [pc, #136]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e032      	b.n	8002e5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e00:	4b19      	ldr	r3, [pc, #100]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4916      	ldr	r1, [pc, #88]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1e:	4b12      	ldr	r3, [pc, #72]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	490e      	ldr	r1, [pc, #56]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e32:	f000 f821 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	490a      	ldr	r1, [pc, #40]	@ (8002e6c <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	5ccb      	ldrb	r3, [r1, r3]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	4a09      	ldr	r2, [pc, #36]	@ (8002e70 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e4e:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fbd0 	bl	80015f8 <HAL_InitTick>

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023c00 	.word	0x40023c00
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	08004bd8 	.word	0x08004bd8
 8002e70:	2000012c 	.word	0x2000012c
 8002e74:	20000130 	.word	0x20000130

08002e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e7c:	b094      	sub	sp, #80	@ 0x50
 8002e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e90:	4b79      	ldr	r3, [pc, #484]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d00d      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	f200 80e1 	bhi.w	8003064 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x34>
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d003      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eaa:	e0db      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eac:	4b73      	ldr	r3, [pc, #460]	@ (800307c <HAL_RCC_GetSysClockFreq+0x204>)
 8002eae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb0:	e0db      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb2:	4b73      	ldr	r3, [pc, #460]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x208>)
 8002eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb6:	e0d8      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ec0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec2:	4b6d      	ldr	r3, [pc, #436]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d063      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ece:	4b6a      	ldr	r3, [pc, #424]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	099b      	lsrs	r3, r3, #6
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ed8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002eea:	4622      	mov	r2, r4
 8002eec:	462b      	mov	r3, r5
 8002eee:	f04f 0000 	mov.w	r0, #0
 8002ef2:	f04f 0100 	mov.w	r1, #0
 8002ef6:	0159      	lsls	r1, r3, #5
 8002ef8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002efc:	0150      	lsls	r0, r2, #5
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4621      	mov	r1, r4
 8002f04:	1a51      	subs	r1, r2, r1
 8002f06:	6139      	str	r1, [r7, #16]
 8002f08:	4629      	mov	r1, r5
 8002f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f1c:	4659      	mov	r1, fp
 8002f1e:	018b      	lsls	r3, r1, #6
 8002f20:	4651      	mov	r1, sl
 8002f22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f26:	4651      	mov	r1, sl
 8002f28:	018a      	lsls	r2, r1, #6
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f30:	4659      	mov	r1, fp
 8002f32:	eb63 0901 	sbc.w	r9, r3, r1
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4a:	4690      	mov	r8, r2
 8002f4c:	4699      	mov	r9, r3
 8002f4e:	4623      	mov	r3, r4
 8002f50:	eb18 0303 	adds.w	r3, r8, r3
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	462b      	mov	r3, r5
 8002f58:	eb49 0303 	adc.w	r3, r9, r3
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	024b      	lsls	r3, r1, #9
 8002f6e:	4621      	mov	r1, r4
 8002f70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f74:	4621      	mov	r1, r4
 8002f76:	024a      	lsls	r2, r1, #9
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f7e:	2200      	movs	r2, #0
 8002f80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f88:	f7fd f91e 	bl	80001c8 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4613      	mov	r3, r2
 8002f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f94:	e058      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f96:	4b38      	ldr	r3, [pc, #224]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	099b      	lsrs	r3, r3, #6
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	f04f 0000 	mov.w	r0, #0
 8002fb8:	f04f 0100 	mov.w	r1, #0
 8002fbc:	0159      	lsls	r1, r3, #5
 8002fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fc2:	0150      	lsls	r0, r2, #5
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4641      	mov	r1, r8
 8002fca:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fce:	4649      	mov	r1, r9
 8002fd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fe0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fe4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fe8:	ebb2 040a 	subs.w	r4, r2, sl
 8002fec:	eb63 050b 	sbc.w	r5, r3, fp
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	00eb      	lsls	r3, r5, #3
 8002ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ffe:	00e2      	lsls	r2, r4, #3
 8003000:	4614      	mov	r4, r2
 8003002:	461d      	mov	r5, r3
 8003004:	4643      	mov	r3, r8
 8003006:	18e3      	adds	r3, r4, r3
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	464b      	mov	r3, r9
 800300c:	eb45 0303 	adc.w	r3, r5, r3
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800301e:	4629      	mov	r1, r5
 8003020:	028b      	lsls	r3, r1, #10
 8003022:	4621      	mov	r1, r4
 8003024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003028:	4621      	mov	r1, r4
 800302a:	028a      	lsls	r2, r1, #10
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003032:	2200      	movs	r2, #0
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	61fa      	str	r2, [r7, #28]
 8003038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800303c:	f7fd f8c4 	bl	80001c8 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4613      	mov	r3, r2
 8003046:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003048:	4b0b      	ldr	r3, [pc, #44]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x200>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	3301      	adds	r3, #1
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800305a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800305c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003060:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003062:	e002      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b05      	ldr	r3, [pc, #20]	@ (800307c <HAL_RCC_GetSysClockFreq+0x204>)
 8003066:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800306a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800306c:	4618      	mov	r0, r3
 800306e:	3750      	adds	r7, #80	@ 0x50
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	00f42400 	.word	0x00f42400
 8003080:	007a1200 	.word	0x007a1200

08003084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <HAL_RCC_GetHCLKFreq+0x14>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	2000012c 	.word	0x2000012c

0800309c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030a0:	f7ff fff0 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	0a9b      	lsrs	r3, r3, #10
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4903      	ldr	r1, [pc, #12]	@ (80030c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	08004be8 	.word	0x08004be8

080030c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030c8:	f7ff ffdc 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0b5b      	lsrs	r3, r3, #13
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4903      	ldr	r1, [pc, #12]	@ (80030e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	08004be8 	.word	0x08004be8

080030ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e041      	b.n	8003182 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fe f846 	bl	80011a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f000 fab8 	bl	80036a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e097      	b.n	80032ce <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fe f83a 	bl	800122c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031ce:	f023 0307 	bic.w	r3, r3, #7
 80031d2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3304      	adds	r3, #4
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f000 fa5e 	bl	80036a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800320c:	f023 0303 	bic.w	r3, r3, #3
 8003210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	4313      	orrs	r3, r2
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800322a:	f023 030c 	bic.w	r3, r3, #12
 800322e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800323a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	4313      	orrs	r3, r2
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	011a      	lsls	r2, r3, #4
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	031b      	lsls	r3, r3, #12
 800325a:	4313      	orrs	r3, r2
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003268:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003270:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	4313      	orrs	r3, r2
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01b      	beq.n	800333a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f06f 0202 	mvn.w	r2, #2
 800330a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f99f 	bl	8003664 <HAL_TIM_IC_CaptureCallback>
 8003326:	e005      	b.n	8003334 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f991 	bl	8003650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9a2 	bl	8003678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01b      	beq.n	8003386 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f06f 0204 	mvn.w	r2, #4
 8003356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f979 	bl	8003664 <HAL_TIM_IC_CaptureCallback>
 8003372:	e005      	b.n	8003380 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f96b 	bl	8003650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f97c 	bl	8003678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d020      	beq.n	80033d2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01b      	beq.n	80033d2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f06f 0208 	mvn.w	r2, #8
 80033a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2204      	movs	r2, #4
 80033a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f953 	bl	8003664 <HAL_TIM_IC_CaptureCallback>
 80033be:	e005      	b.n	80033cc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f945 	bl	8003650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f956 	bl	8003678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d020      	beq.n	800341e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d01b      	beq.n	800341e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f06f 0210 	mvn.w	r2, #16
 80033ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2208      	movs	r2, #8
 80033f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f92d 	bl	8003664 <HAL_TIM_IC_CaptureCallback>
 800340a:	e005      	b.n	8003418 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f91f 	bl	8003650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f930 	bl	8003678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00c      	beq.n	8003442 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f06f 0201 	mvn.w	r2, #1
 800343a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f8fd 	bl	800363c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00c      	beq.n	8003466 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800345e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fbf9 	bl	8003c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00c      	beq.n	800348a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f901 	bl	800368c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f003 0320 	and.w	r3, r3, #32
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00c      	beq.n	80034ae <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f06f 0220 	mvn.w	r2, #32
 80034a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fbcb 	bl	8003c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e0ae      	b.n	8003634 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	f200 809f 	bhi.w	8003624 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034e6:	a201      	add	r2, pc, #4	@ (adr r2, 80034ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ec:	08003521 	.word	0x08003521
 80034f0:	08003625 	.word	0x08003625
 80034f4:	08003625 	.word	0x08003625
 80034f8:	08003625 	.word	0x08003625
 80034fc:	08003561 	.word	0x08003561
 8003500:	08003625 	.word	0x08003625
 8003504:	08003625 	.word	0x08003625
 8003508:	08003625 	.word	0x08003625
 800350c:	080035a3 	.word	0x080035a3
 8003510:	08003625 	.word	0x08003625
 8003514:	08003625 	.word	0x08003625
 8003518:	08003625 	.word	0x08003625
 800351c:	080035e3 	.word	0x080035e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f960 	bl	80037ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0208 	orr.w	r2, r2, #8
 800353a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0204 	bic.w	r2, r2, #4
 800354a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6999      	ldr	r1, [r3, #24]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	619a      	str	r2, [r3, #24]
      break;
 800355e:	e064      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f9b0 	bl	80038cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800357a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800358a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6999      	ldr	r1, [r3, #24]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	021a      	lsls	r2, r3, #8
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	619a      	str	r2, [r3, #24]
      break;
 80035a0:	e043      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fa05 	bl	80039b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 0208 	orr.w	r2, r2, #8
 80035bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69da      	ldr	r2, [r3, #28]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0204 	bic.w	r2, r2, #4
 80035cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69d9      	ldr	r1, [r3, #28]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	61da      	str	r2, [r3, #28]
      break;
 80035e0:	e023      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fa59 	bl	8003aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800360c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	69d9      	ldr	r1, [r3, #28]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	021a      	lsls	r2, r3, #8
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	61da      	str	r2, [r3, #28]
      break;
 8003622:	e002      	b.n	800362a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	75fb      	strb	r3, [r7, #23]
      break;
 8003628:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a43      	ldr	r2, [pc, #268]	@ (80037c0 <TIM_Base_SetConfig+0x120>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036be:	d00f      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a40      	ldr	r2, [pc, #256]	@ (80037c4 <TIM_Base_SetConfig+0x124>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a3f      	ldr	r2, [pc, #252]	@ (80037c8 <TIM_Base_SetConfig+0x128>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d007      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a3e      	ldr	r2, [pc, #248]	@ (80037cc <TIM_Base_SetConfig+0x12c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d003      	beq.n	80036e0 <TIM_Base_SetConfig+0x40>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a3d      	ldr	r2, [pc, #244]	@ (80037d0 <TIM_Base_SetConfig+0x130>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d108      	bne.n	80036f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a32      	ldr	r2, [pc, #200]	@ (80037c0 <TIM_Base_SetConfig+0x120>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d02b      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003700:	d027      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a2f      	ldr	r2, [pc, #188]	@ (80037c4 <TIM_Base_SetConfig+0x124>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d023      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a2e      	ldr	r2, [pc, #184]	@ (80037c8 <TIM_Base_SetConfig+0x128>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01f      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a2d      	ldr	r2, [pc, #180]	@ (80037cc <TIM_Base_SetConfig+0x12c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01b      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a2c      	ldr	r2, [pc, #176]	@ (80037d0 <TIM_Base_SetConfig+0x130>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d017      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a2b      	ldr	r2, [pc, #172]	@ (80037d4 <TIM_Base_SetConfig+0x134>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a2a      	ldr	r2, [pc, #168]	@ (80037d8 <TIM_Base_SetConfig+0x138>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00f      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a29      	ldr	r2, [pc, #164]	@ (80037dc <TIM_Base_SetConfig+0x13c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00b      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a28      	ldr	r2, [pc, #160]	@ (80037e0 <TIM_Base_SetConfig+0x140>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d007      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a27      	ldr	r2, [pc, #156]	@ (80037e4 <TIM_Base_SetConfig+0x144>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d003      	beq.n	8003752 <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a26      	ldr	r2, [pc, #152]	@ (80037e8 <TIM_Base_SetConfig+0x148>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d108      	bne.n	8003764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a0e      	ldr	r2, [pc, #56]	@ (80037c0 <TIM_Base_SetConfig+0x120>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_Base_SetConfig+0xf2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a10      	ldr	r2, [pc, #64]	@ (80037d0 <TIM_Base_SetConfig+0x130>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d103      	bne.n	800379a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f043 0204 	orr.w	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	601a      	str	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	40010400 	.word	0x40010400
 80037d4:	40014000 	.word	0x40014000
 80037d8:	40014400 	.word	0x40014400
 80037dc:	40014800 	.word	0x40014800
 80037e0:	40001800 	.word	0x40001800
 80037e4:	40001c00 	.word	0x40001c00
 80037e8:	40002000 	.word	0x40002000

080037ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f023 0201 	bic.w	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0303 	bic.w	r3, r3, #3
 8003822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f023 0302 	bic.w	r3, r3, #2
 8003834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a20      	ldr	r2, [pc, #128]	@ (80038c4 <TIM_OC1_SetConfig+0xd8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d003      	beq.n	8003850 <TIM_OC1_SetConfig+0x64>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a1f      	ldr	r2, [pc, #124]	@ (80038c8 <TIM_OC1_SetConfig+0xdc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d10c      	bne.n	800386a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f023 0308 	bic.w	r3, r3, #8
 8003856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f023 0304 	bic.w	r3, r3, #4
 8003868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a15      	ldr	r2, [pc, #84]	@ (80038c4 <TIM_OC1_SetConfig+0xd8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d003      	beq.n	800387a <TIM_OC1_SetConfig+0x8e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a14      	ldr	r2, [pc, #80]	@ (80038c8 <TIM_OC1_SetConfig+0xdc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d111      	bne.n	800389e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	621a      	str	r2, [r3, #32]
}
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40010000 	.word	0x40010000
 80038c8:	40010400 	.word	0x40010400

080038cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f023 0210 	bic.w	r2, r3, #16
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 0320 	bic.w	r3, r3, #32
 8003916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a22      	ldr	r2, [pc, #136]	@ (80039b0 <TIM_OC2_SetConfig+0xe4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_OC2_SetConfig+0x68>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a21      	ldr	r2, [pc, #132]	@ (80039b4 <TIM_OC2_SetConfig+0xe8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d10d      	bne.n	8003950 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800393a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800394e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a17      	ldr	r2, [pc, #92]	@ (80039b0 <TIM_OC2_SetConfig+0xe4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d003      	beq.n	8003960 <TIM_OC2_SetConfig+0x94>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a16      	ldr	r2, [pc, #88]	@ (80039b4 <TIM_OC2_SetConfig+0xe8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d113      	bne.n	8003988 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40010400 	.word	0x40010400

080039b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a21      	ldr	r2, [pc, #132]	@ (8003a98 <TIM_OC3_SetConfig+0xe0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d003      	beq.n	8003a1e <TIM_OC3_SetConfig+0x66>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a20      	ldr	r2, [pc, #128]	@ (8003a9c <TIM_OC3_SetConfig+0xe4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d10d      	bne.n	8003a3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a16      	ldr	r2, [pc, #88]	@ (8003a98 <TIM_OC3_SetConfig+0xe0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d003      	beq.n	8003a4a <TIM_OC3_SetConfig+0x92>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a15      	ldr	r2, [pc, #84]	@ (8003a9c <TIM_OC3_SetConfig+0xe4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d113      	bne.n	8003a72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	621a      	str	r2, [r3, #32]
}
 8003a8c:	bf00      	nop
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	40010400 	.word	0x40010400

08003aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	031b      	lsls	r3, r3, #12
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a12      	ldr	r2, [pc, #72]	@ (8003b44 <TIM_OC4_SetConfig+0xa4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d003      	beq.n	8003b08 <TIM_OC4_SetConfig+0x68>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a11      	ldr	r2, [pc, #68]	@ (8003b48 <TIM_OC4_SetConfig+0xa8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d109      	bne.n	8003b1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	019b      	lsls	r3, r3, #6
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40010400 	.word	0x40010400

08003b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e05a      	b.n	8003c1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a21      	ldr	r2, [pc, #132]	@ (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb0:	d01d      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d018      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1a      	ldr	r2, [pc, #104]	@ (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a18      	ldr	r2, [pc, #96]	@ (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a17      	ldr	r2, [pc, #92]	@ (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a15      	ldr	r2, [pc, #84]	@ (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d10c      	bne.n	8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800
 8003c34:	40000c00 	.word	0x40000c00
 8003c38:	40010400 	.word	0x40010400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40001800 	.word	0x40001800

08003c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e042      	b.n	8003d04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd fba6 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2224      	movs	r2, #36	@ 0x24
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fce5 	bl	8004680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d112      	bne.n	8003d4c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_UART_Receive_IT+0x26>
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00b      	b.n	8003d4e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d3c:	88fb      	ldrh	r3, [r7, #6]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fac8 	bl	80042d8 <UART_Start_Receive_IT>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	e000      	b.n	8003d4e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003d4c:	2302      	movs	r3, #2
  }
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b0ba      	sub	sp, #232	@ 0xe8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_UART_IRQHandler+0x66>
 8003daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fba4 	bl	8004504 <UART_Receive_IT>
      return;
 8003dbc:	e273      	b.n	80042a6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80de 	beq.w	8003f84 <HAL_UART_IRQHandler+0x22c>
 8003dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80d1 	beq.w	8003f84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <HAL_UART_IRQHandler+0xae>
 8003dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfe:	f043 0201 	orr.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_UART_IRQHandler+0xd2>
 8003e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	f043 0202 	orr.w	r2, r3, #2
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_UART_IRQHandler+0xf6>
 8003e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	f043 0204 	orr.w	r2, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d011      	beq.n	8003e7e <HAL_UART_IRQHandler+0x126>
 8003e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e76:	f043 0208 	orr.w	r2, r3, #8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 820a 	beq.w	800429c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d008      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x14e>
 8003e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fb2f 	bl	8004504 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb0:	2b40      	cmp	r3, #64	@ 0x40
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x17a>
 8003eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d04f      	beq.n	8003f72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 fa3a 	bl	800434c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee2:	2b40      	cmp	r3, #64	@ 0x40
 8003ee4:	d141      	bne.n	8003f6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3314      	adds	r3, #20
 8003eec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003efc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1d9      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d013      	beq.n	8003f62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3e:	4a8a      	ldr	r2, [pc, #552]	@ (8004168 <HAL_UART_IRQHandler+0x410>)
 8003f40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe fa5f 	bl	800240a <HAL_DMA_Abort_IT>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e00e      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f9a2 	bl	80042ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	e00a      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f99e 	bl	80042ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f70:	e006      	b.n	8003f80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f99a 	bl	80042ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f7e:	e18d      	b.n	800429c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f80:	bf00      	nop
    return;
 8003f82:	e18b      	b.n	800429c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f040 8167 	bne.w	800425c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8160 	beq.w	800425c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 8159 	beq.w	800425c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fca:	2b40      	cmp	r3, #64	@ 0x40
 8003fcc:	f040 80ce 	bne.w	800416c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80a9 	beq.w	8004138 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	f080 80a2 	bcs.w	8004138 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ffa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004006:	f000 8088 	beq.w	800411a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004020:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004028:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004036:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800403a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004042:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800404e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1d9      	bne.n	800400a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004066:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3314      	adds	r3, #20
 8004076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800407a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800407e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004082:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800408c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e1      	bne.n	8004056 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3314      	adds	r3, #20
 8004098:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e3      	bne.n	8004092 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ea:	f023 0310 	bic.w	r3, r3, #16
 80040ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80040fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004102:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800410a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e3      	bne.n	80040d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe f908 	bl	800232a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004128:	b29b      	uxth	r3, r3
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	b29b      	uxth	r3, r3
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f8c5 	bl	80042c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004136:	e0b3      	b.n	80042a0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800413c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004140:	429a      	cmp	r2, r3
 8004142:	f040 80ad 	bne.w	80042a0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004150:	f040 80a6 	bne.w	80042a0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f8ad 	bl	80042c0 <HAL_UARTEx_RxEventCallback>
      return;
 8004166:	e09b      	b.n	80042a0 <HAL_UART_IRQHandler+0x548>
 8004168:	08004413 	.word	0x08004413
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004174:	b29b      	uxth	r3, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 808e 	beq.w	80042a4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004188:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8089 	beq.w	80042a4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	330c      	adds	r3, #12
 80041b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80041b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e3      	bne.n	8004192 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3314      	adds	r3, #20
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	623b      	str	r3, [r7, #32]
   return(result);
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3314      	adds	r3, #20
 80041ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e3      	bne.n	80041ca <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0310 	bic.w	r3, r3, #16
 8004226:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004234:	61fa      	str	r2, [r7, #28]
 8004236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004238:	69b9      	ldr	r1, [r7, #24]
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	e841 2300 	strex	r3, r2, [r1]
 8004240:	617b      	str	r3, [r7, #20]
   return(result);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1e3      	bne.n	8004210 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800424e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004252:	4619      	mov	r1, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f833 	bl	80042c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800425a:	e023      	b.n	80042a4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800425c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004264:	2b00      	cmp	r3, #0
 8004266:	d009      	beq.n	800427c <HAL_UART_IRQHandler+0x524>
 8004268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800426c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f8dd 	bl	8004434 <UART_Transmit_IT>
    return;
 800427a:	e014      	b.n	80042a6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800427c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00e      	beq.n	80042a6 <HAL_UART_IRQHandler+0x54e>
 8004288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f91d 	bl	80044d4 <UART_EndTransmit_IT>
    return;
 800429a:	e004      	b.n	80042a6 <HAL_UART_IRQHandler+0x54e>
    return;
 800429c:	bf00      	nop
 800429e:	e002      	b.n	80042a6 <HAL_UART_IRQHandler+0x54e>
      return;
 80042a0:	bf00      	nop
 80042a2:	e000      	b.n	80042a6 <HAL_UART_IRQHandler+0x54e>
      return;
 80042a4:	bf00      	nop
  }
}
 80042a6:	37e8      	adds	r7, #232	@ 0xe8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	88fa      	ldrh	r2, [r7, #6]
 80042f0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	88fa      	ldrh	r2, [r7, #6]
 80042f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2222      	movs	r2, #34	@ 0x22
 8004302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800431c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0220 	orr.w	r2, r2, #32
 800433c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800434c:	b480      	push	{r7}
 800434e:	b095      	sub	sp, #84	@ 0x54
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800436a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004374:	643a      	str	r2, [r7, #64]	@ 0x40
 8004376:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800437a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e5      	bne.n	8004354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3314      	adds	r3, #20
 800438e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	61fb      	str	r3, [r7, #28]
   return(result);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e5      	bne.n	8004388 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d119      	bne.n	80043f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f023 0310 	bic.w	r3, r3, #16
 80043da:	647b      	str	r3, [r7, #68]	@ 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043e4:	61ba      	str	r2, [r7, #24]
 80043e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6979      	ldr	r1, [r7, #20]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	613b      	str	r3, [r7, #16]
   return(result);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e5      	bne.n	80043c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004406:	bf00      	nop
 8004408:	3754      	adds	r7, #84	@ 0x54
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f7ff ff40 	bl	80042ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800442c:	bf00      	nop
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b21      	cmp	r3, #33	@ 0x21
 8004446:	d13e      	bne.n	80044c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004450:	d114      	bne.n	800447c <UART_Transmit_IT+0x48>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d110      	bne.n	800447c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800446e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	1c9a      	adds	r2, r3, #2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	621a      	str	r2, [r3, #32]
 800447a:	e008      	b.n	800448e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	1c59      	adds	r1, r3, #1
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	6211      	str	r1, [r2, #32]
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29b      	uxth	r3, r3
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	4619      	mov	r1, r3
 800449c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10f      	bne.n	80044c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	e000      	b.n	80044c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044c6:	2302      	movs	r3, #2
  }
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fc fd93 	bl	8001020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08c      	sub	sp, #48	@ 0x30
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800450c:	2300      	movs	r3, #0
 800450e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b22      	cmp	r3, #34	@ 0x22
 800451e:	f040 80aa 	bne.w	8004676 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452a:	d115      	bne.n	8004558 <UART_Receive_IT+0x54>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d111      	bne.n	8004558 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004538:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	b29b      	uxth	r3, r3
 8004542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004546:	b29a      	uxth	r2, r3
 8004548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	629a      	str	r2, [r3, #40]	@ 0x28
 8004556:	e024      	b.n	80045a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004566:	d007      	beq.n	8004578 <UART_Receive_IT+0x74>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <UART_Receive_IT+0x82>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	b2da      	uxtb	r2, r3
 8004580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	e008      	b.n	8004598 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004592:	b2da      	uxtb	r2, r3
 8004594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004596:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	4619      	mov	r1, r3
 80045b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d15d      	bne.n	8004672 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0220 	bic.w	r2, r2, #32
 80045c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695a      	ldr	r2, [r3, #20]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d135      	bne.n	8004668 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	613b      	str	r3, [r7, #16]
   return(result);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f023 0310 	bic.w	r3, r3, #16
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004622:	623a      	str	r2, [r7, #32]
 8004624:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	69f9      	ldr	r1, [r7, #28]
 8004628:	6a3a      	ldr	r2, [r7, #32]
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e5      	bne.n	8004602 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b10      	cmp	r3, #16
 8004642:	d10a      	bne.n	800465a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800465e:	4619      	mov	r1, r3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff fe2d 	bl	80042c0 <HAL_UARTEx_RxEventCallback>
 8004666:	e002      	b.n	800466e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fc fc3f 	bl	8000eec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e002      	b.n	8004678 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	e000      	b.n	8004678 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004676:	2302      	movs	r3, #2
  }
}
 8004678:	4618      	mov	r0, r3
 800467a:	3730      	adds	r7, #48	@ 0x30
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004684:	b0c0      	sub	sp, #256	@ 0x100
 8004686:	af00      	add	r7, sp, #0
 8004688:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469c:	68d9      	ldr	r1, [r3, #12]
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	ea40 0301 	orr.w	r3, r0, r1
 80046a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	431a      	orrs	r2, r3
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046d8:	f021 010c 	bic.w	r1, r1, #12
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046e6:	430b      	orrs	r3, r1
 80046e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fa:	6999      	ldr	r1, [r3, #24]
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	ea40 0301 	orr.w	r3, r0, r1
 8004706:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b8f      	ldr	r3, [pc, #572]	@ (800494c <UART_SetConfig+0x2cc>)
 8004710:	429a      	cmp	r2, r3
 8004712:	d005      	beq.n	8004720 <UART_SetConfig+0xa0>
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b8d      	ldr	r3, [pc, #564]	@ (8004950 <UART_SetConfig+0x2d0>)
 800471c:	429a      	cmp	r2, r3
 800471e:	d104      	bne.n	800472a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004720:	f7fe fcd0 	bl	80030c4 <HAL_RCC_GetPCLK2Freq>
 8004724:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004728:	e003      	b.n	8004732 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800472a:	f7fe fcb7 	bl	800309c <HAL_RCC_GetPCLK1Freq>
 800472e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800473c:	f040 810c 	bne.w	8004958 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800474a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800474e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004752:	4622      	mov	r2, r4
 8004754:	462b      	mov	r3, r5
 8004756:	1891      	adds	r1, r2, r2
 8004758:	65b9      	str	r1, [r7, #88]	@ 0x58
 800475a:	415b      	adcs	r3, r3
 800475c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800475e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004762:	4621      	mov	r1, r4
 8004764:	eb12 0801 	adds.w	r8, r2, r1
 8004768:	4629      	mov	r1, r5
 800476a:	eb43 0901 	adc.w	r9, r3, r1
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800477a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800477e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004782:	4690      	mov	r8, r2
 8004784:	4699      	mov	r9, r3
 8004786:	4623      	mov	r3, r4
 8004788:	eb18 0303 	adds.w	r3, r8, r3
 800478c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004790:	462b      	mov	r3, r5
 8004792:	eb49 0303 	adc.w	r3, r9, r3
 8004796:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047ae:	460b      	mov	r3, r1
 80047b0:	18db      	adds	r3, r3, r3
 80047b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80047b4:	4613      	mov	r3, r2
 80047b6:	eb42 0303 	adc.w	r3, r2, r3
 80047ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80047bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047c4:	f7fb fd00 	bl	80001c8 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4b61      	ldr	r3, [pc, #388]	@ (8004954 <UART_SetConfig+0x2d4>)
 80047ce:	fba3 2302 	umull	r2, r3, r3, r2
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	011c      	lsls	r4, r3, #4
 80047d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	1891      	adds	r1, r2, r2
 80047ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047f0:	415b      	adcs	r3, r3
 80047f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047f8:	4641      	mov	r1, r8
 80047fa:	eb12 0a01 	adds.w	sl, r2, r1
 80047fe:	4649      	mov	r1, r9
 8004800:	eb43 0b01 	adc.w	fp, r3, r1
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004810:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004818:	4692      	mov	sl, r2
 800481a:	469b      	mov	fp, r3
 800481c:	4643      	mov	r3, r8
 800481e:	eb1a 0303 	adds.w	r3, sl, r3
 8004822:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004826:	464b      	mov	r3, r9
 8004828:	eb4b 0303 	adc.w	r3, fp, r3
 800482c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800483c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004840:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004844:	460b      	mov	r3, r1
 8004846:	18db      	adds	r3, r3, r3
 8004848:	643b      	str	r3, [r7, #64]	@ 0x40
 800484a:	4613      	mov	r3, r2
 800484c:	eb42 0303 	adc.w	r3, r2, r3
 8004850:	647b      	str	r3, [r7, #68]	@ 0x44
 8004852:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004856:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800485a:	f7fb fcb5 	bl	80001c8 <__aeabi_uldivmod>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4611      	mov	r1, r2
 8004864:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <UART_SetConfig+0x2d4>)
 8004866:	fba3 2301 	umull	r2, r3, r3, r1
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2264      	movs	r2, #100	@ 0x64
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	1acb      	subs	r3, r1, r3
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800487a:	4b36      	ldr	r3, [pc, #216]	@ (8004954 <UART_SetConfig+0x2d4>)
 800487c:	fba3 2302 	umull	r2, r3, r3, r2
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004888:	441c      	add	r4, r3
 800488a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800488e:	2200      	movs	r2, #0
 8004890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004894:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004898:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800489c:	4642      	mov	r2, r8
 800489e:	464b      	mov	r3, r9
 80048a0:	1891      	adds	r1, r2, r2
 80048a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048a4:	415b      	adcs	r3, r3
 80048a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80048ac:	4641      	mov	r1, r8
 80048ae:	1851      	adds	r1, r2, r1
 80048b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80048b2:	4649      	mov	r1, r9
 80048b4:	414b      	adcs	r3, r1
 80048b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048c4:	4659      	mov	r1, fp
 80048c6:	00cb      	lsls	r3, r1, #3
 80048c8:	4651      	mov	r1, sl
 80048ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ce:	4651      	mov	r1, sl
 80048d0:	00ca      	lsls	r2, r1, #3
 80048d2:	4610      	mov	r0, r2
 80048d4:	4619      	mov	r1, r3
 80048d6:	4603      	mov	r3, r0
 80048d8:	4642      	mov	r2, r8
 80048da:	189b      	adds	r3, r3, r2
 80048dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048e0:	464b      	mov	r3, r9
 80048e2:	460a      	mov	r2, r1
 80048e4:	eb42 0303 	adc.w	r3, r2, r3
 80048e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004900:	460b      	mov	r3, r1
 8004902:	18db      	adds	r3, r3, r3
 8004904:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004906:	4613      	mov	r3, r2
 8004908:	eb42 0303 	adc.w	r3, r2, r3
 800490c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800490e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004912:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004916:	f7fb fc57 	bl	80001c8 <__aeabi_uldivmod>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <UART_SetConfig+0x2d4>)
 8004920:	fba3 1302 	umull	r1, r3, r3, r2
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	2164      	movs	r1, #100	@ 0x64
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	3332      	adds	r3, #50	@ 0x32
 8004932:	4a08      	ldr	r2, [pc, #32]	@ (8004954 <UART_SetConfig+0x2d4>)
 8004934:	fba2 2303 	umull	r2, r3, r2, r3
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	f003 0207 	and.w	r2, r3, #7
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4422      	add	r2, r4
 8004946:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004948:	e106      	b.n	8004b58 <UART_SetConfig+0x4d8>
 800494a:	bf00      	nop
 800494c:	40011000 	.word	0x40011000
 8004950:	40011400 	.word	0x40011400
 8004954:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800495c:	2200      	movs	r2, #0
 800495e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004962:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004966:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800496a:	4642      	mov	r2, r8
 800496c:	464b      	mov	r3, r9
 800496e:	1891      	adds	r1, r2, r2
 8004970:	6239      	str	r1, [r7, #32]
 8004972:	415b      	adcs	r3, r3
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
 8004976:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800497a:	4641      	mov	r1, r8
 800497c:	1854      	adds	r4, r2, r1
 800497e:	4649      	mov	r1, r9
 8004980:	eb43 0501 	adc.w	r5, r3, r1
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	00eb      	lsls	r3, r5, #3
 800498e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004992:	00e2      	lsls	r2, r4, #3
 8004994:	4614      	mov	r4, r2
 8004996:	461d      	mov	r5, r3
 8004998:	4643      	mov	r3, r8
 800499a:	18e3      	adds	r3, r4, r3
 800499c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049a0:	464b      	mov	r3, r9
 80049a2:	eb45 0303 	adc.w	r3, r5, r3
 80049a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049c6:	4629      	mov	r1, r5
 80049c8:	008b      	lsls	r3, r1, #2
 80049ca:	4621      	mov	r1, r4
 80049cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d0:	4621      	mov	r1, r4
 80049d2:	008a      	lsls	r2, r1, #2
 80049d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049d8:	f7fb fbf6 	bl	80001c8 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4b60      	ldr	r3, [pc, #384]	@ (8004b64 <UART_SetConfig+0x4e4>)
 80049e2:	fba3 2302 	umull	r2, r3, r3, r2
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	011c      	lsls	r4, r3, #4
 80049ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	1891      	adds	r1, r2, r2
 8004a02:	61b9      	str	r1, [r7, #24]
 8004a04:	415b      	adcs	r3, r3
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	1851      	adds	r1, r2, r1
 8004a10:	6139      	str	r1, [r7, #16]
 8004a12:	4649      	mov	r1, r9
 8004a14:	414b      	adcs	r3, r1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a24:	4659      	mov	r1, fp
 8004a26:	00cb      	lsls	r3, r1, #3
 8004a28:	4651      	mov	r1, sl
 8004a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a2e:	4651      	mov	r1, sl
 8004a30:	00ca      	lsls	r2, r1, #3
 8004a32:	4610      	mov	r0, r2
 8004a34:	4619      	mov	r1, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	4642      	mov	r2, r8
 8004a3a:	189b      	adds	r3, r3, r2
 8004a3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a40:	464b      	mov	r3, r9
 8004a42:	460a      	mov	r2, r1
 8004a44:	eb42 0303 	adc.w	r3, r2, r3
 8004a48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a64:	4649      	mov	r1, r9
 8004a66:	008b      	lsls	r3, r1, #2
 8004a68:	4641      	mov	r1, r8
 8004a6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a6e:	4641      	mov	r1, r8
 8004a70:	008a      	lsls	r2, r1, #2
 8004a72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a76:	f7fb fba7 	bl	80001c8 <__aeabi_uldivmod>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4b38      	ldr	r3, [pc, #224]	@ (8004b64 <UART_SetConfig+0x4e4>)
 8004a82:	fba3 2301 	umull	r2, r3, r3, r1
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	2264      	movs	r2, #100	@ 0x64
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	1acb      	subs	r3, r1, r3
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	3332      	adds	r3, #50	@ 0x32
 8004a94:	4a33      	ldr	r2, [pc, #204]	@ (8004b64 <UART_SetConfig+0x4e4>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aa0:	441c      	add	r4, r3
 8004aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004aaa:	677a      	str	r2, [r7, #116]	@ 0x74
 8004aac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	1891      	adds	r1, r2, r2
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	415b      	adcs	r3, r3
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	1851      	adds	r1, r2, r1
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	414b      	adcs	r3, r1
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ad8:	4659      	mov	r1, fp
 8004ada:	00cb      	lsls	r3, r1, #3
 8004adc:	4651      	mov	r1, sl
 8004ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	00ca      	lsls	r2, r1, #3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	4642      	mov	r2, r8
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004af2:	464b      	mov	r3, r9
 8004af4:	460a      	mov	r2, r1
 8004af6:	eb42 0303 	adc.w	r3, r2, r3
 8004afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b06:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b14:	4649      	mov	r1, r9
 8004b16:	008b      	lsls	r3, r1, #2
 8004b18:	4641      	mov	r1, r8
 8004b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b1e:	4641      	mov	r1, r8
 8004b20:	008a      	lsls	r2, r1, #2
 8004b22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b26:	f7fb fb4f 	bl	80001c8 <__aeabi_uldivmod>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b64 <UART_SetConfig+0x4e4>)
 8004b30:	fba3 1302 	umull	r1, r3, r3, r2
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	2164      	movs	r1, #100	@ 0x64
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	3332      	adds	r3, #50	@ 0x32
 8004b42:	4a08      	ldr	r2, [pc, #32]	@ (8004b64 <UART_SetConfig+0x4e4>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4422      	add	r2, r4
 8004b56:	609a      	str	r2, [r3, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b64:	51eb851f 	.word	0x51eb851f

08004b68 <memset>:
 8004b68:	4402      	add	r2, r0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d100      	bne.n	8004b72 <memset+0xa>
 8004b70:	4770      	bx	lr
 8004b72:	f803 1b01 	strb.w	r1, [r3], #1
 8004b76:	e7f9      	b.n	8004b6c <memset+0x4>

08004b78 <__libc_init_array>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8004bb0 <__libc_init_array+0x38>)
 8004b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8004bb4 <__libc_init_array+0x3c>)
 8004b7e:	1b64      	subs	r4, r4, r5
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	2600      	movs	r6, #0
 8004b84:	42a6      	cmp	r6, r4
 8004b86:	d109      	bne.n	8004b9c <__libc_init_array+0x24>
 8004b88:	4d0b      	ldr	r5, [pc, #44]	@ (8004bb8 <__libc_init_array+0x40>)
 8004b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8004bbc <__libc_init_array+0x44>)
 8004b8c:	f000 f818 	bl	8004bc0 <_init>
 8004b90:	1b64      	subs	r4, r4, r5
 8004b92:	10a4      	asrs	r4, r4, #2
 8004b94:	2600      	movs	r6, #0
 8004b96:	42a6      	cmp	r6, r4
 8004b98:	d105      	bne.n	8004ba6 <__libc_init_array+0x2e>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba0:	4798      	blx	r3
 8004ba2:	3601      	adds	r6, #1
 8004ba4:	e7ee      	b.n	8004b84 <__libc_init_array+0xc>
 8004ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004baa:	4798      	blx	r3
 8004bac:	3601      	adds	r6, #1
 8004bae:	e7f2      	b.n	8004b96 <__libc_init_array+0x1e>
 8004bb0:	08004bf8 	.word	0x08004bf8
 8004bb4:	08004bf8 	.word	0x08004bf8
 8004bb8:	08004bf8 	.word	0x08004bf8
 8004bbc:	08004bfc 	.word	0x08004bfc

08004bc0 <_init>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	bf00      	nop
 8004bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc6:	bc08      	pop	{r3}
 8004bc8:	469e      	mov	lr, r3
 8004bca:	4770      	bx	lr

08004bcc <_fini>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	bf00      	nop
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr
