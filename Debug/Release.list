
Release.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005128  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080052b0  080052b0  000062b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c8  080052c8  000070d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052c8  080052c8  000062c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052d0  080052d0  000070d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d0  080052d0  000062d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052d4  080052d4  000062d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  080052d8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000070d0  2**0
                  CONTENTS
 10 .bss          00000220  200000d0  200000d0  000070d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f0  200002f0  000070d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000070d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c1f  00000000  00000000  00007100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ec  00000000  00000000  00018d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  0001b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b96  00000000  00000000  0001c4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235ce  00000000  00000000  0001d07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013700  00000000  00000000  0004064c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d88e4  00000000  00000000  00053d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c630  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d5c  00000000  00000000  0012c674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001303d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000d0 	.word	0x200000d0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005298 	.word	0x08005298

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000d4 	.word	0x200000d4
 80001c4:	08005298 	.word	0x08005298

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Initialization_of_positioning_encoders>:

Encoder Positional_encoder_EL = {
  .pulses_per_revolution = 2000
};

void Initialization_of_positioning_encoders(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef Confirmation_of_initialization;
  do { // AZ
    Confirmation_of_initialization = HAL_TIM_Encoder_Start(Positional_encoder_AZ.Timer, TIM_CHANNEL_ALL);
 80004fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000530 <Initialization_of_positioning_encoders+0x3c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	213c      	movs	r1, #60	@ 0x3c
 8000500:	4618      	mov	r0, r3
 8000502:	f003 f96b 	bl	80037dc <HAL_TIM_Encoder_Start>
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  } while (!Confirmation_of_initialization);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d0f4      	beq.n	80004fa <Initialization_of_positioning_encoders+0x6>
  do { // EL
    Confirmation_of_initialization = HAL_TIM_Encoder_Start(Positional_encoder_EL.Timer, TIM_CHANNEL_ALL);
 8000510:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <Initialization_of_positioning_encoders+0x40>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	213c      	movs	r1, #60	@ 0x3c
 8000516:	4618      	mov	r0, r3
 8000518:	f003 f960 	bl	80037dc <HAL_TIM_Encoder_Start>
 800051c:	4603      	mov	r3, r0
 800051e:	71fb      	strb	r3, [r7, #7]
  } while (!Confirmation_of_initialization);
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0f4      	beq.n	8000510 <Initialization_of_positioning_encoders+0x1c>
};
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000000 	.word	0x20000000
 8000534:	20000008 	.word	0x20000008

08000538 <Reading_the_system_position>:

void Reading_the_system_position(Encoder *Positional_encoder_xx, Systema *Systema_xx) {
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
  int Counter_value = Positional_encoder_xx->Timer->Instance->CNT;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800054a:	60fb      	str	r3, [r7, #12]
  float Angular = (float)Counter_value * 360.0f / (float)Positional_encoder_xx->pulses_per_revolution;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	ee07 3a90 	vmov	s15, r3
 8000552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000556:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80005e8 <Reading_the_system_position+0xb0>
 800055a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000564:	ee07 3a90 	vmov	s15, r3
 8000568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800056c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000570:	edc7 7a02 	vstr	s15, [r7, #8]
  Angular = CLAMP(Angular, -270.0f, 270.0);
 8000574:	edd7 7a02 	vldr	s15, [r7, #8]
 8000578:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80005ec <Reading_the_system_position+0xb4>
 800057c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000584:	bf4c      	ite	mi
 8000586:	2301      	movmi	r3, #1
 8000588:	2300      	movpl	r3, #0
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f083 0301 	eor.w	r3, r3, #1
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d110      	bne.n	80005b8 <Reading_the_system_position+0x80>
 8000596:	edd7 7a02 	vldr	s15, [r7, #8]
 800059a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80005f0 <Reading_the_system_position+0xb8>
 800059e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a6:	bf4c      	ite	mi
 80005a8:	2301      	movmi	r3, #1
 80005aa:	2300      	movpl	r3, #0
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	f083 0301 	eor.w	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00c      	beq.n	80005d2 <Reading_the_system_position+0x9a>
 80005b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80005bc:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80005ec <Reading_the_system_position+0xb4>
 80005c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c8:	d501      	bpl.n	80005ce <Reading_the_system_position+0x96>
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	e002      	b.n	80005d4 <Reading_the_system_position+0x9c>
 80005ce:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <Reading_the_system_position+0xbc>)
 80005d0:	e000      	b.n	80005d4 <Reading_the_system_position+0x9c>
 80005d2:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <Reading_the_system_position+0xc0>)
 80005d4:	60bb      	str	r3, [r7, #8]
  Systema_xx->Status.Angular = Angular;
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	68ba      	ldr	r2, [r7, #8]
 80005da:	619a      	str	r2, [r3, #24]
};
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	43b40000 	.word	0x43b40000
 80005ec:	43870000 	.word	0x43870000
 80005f0:	c3870000 	.word	0xc3870000
 80005f4:	43870000 	.word	0x43870000
 80005f8:	c3870000 	.word	0xc3870000

080005fc <Setting_the_pulse_frequency>:
  * @sideeffect
  * - Модифицирует регистры таймера
  * - Обновляет статус системы
  * - Временно прерывает генерацию ШИМ
  */
void Setting_the_pulse_frequency(Motor *Motor_xx, unsigned int frequency) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  unsigned int prescaler = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  unsigned int period = (HAL_RCC_GetPCLK1Freq() * 2 / frequency) - 1;
 800060a:	f002 fe91 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 800060e:	4603      	mov	r3, r0
 8000610:	005a      	lsls	r2, r3, #1
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	fbb2 f3f3 	udiv	r3, r2, r3
 8000618:	3b01      	subs	r3, #1
 800061a:	60bb      	str	r3, [r7, #8]

  while (period > 0xFFFF) {
 800061c:	e00f      	b.n	800063e <Setting_the_pulse_frequency+0x42>
    prescaler++;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	3301      	adds	r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
    period = (HAL_RCC_GetPCLK1Freq() * 2 / (frequency * (prescaler + 1))) - 1;
 8000624:	f002 fe84 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8000628:	4603      	mov	r3, r0
 800062a:	005a      	lsls	r2, r3, #1
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3301      	adds	r3, #1
 8000630:	6839      	ldr	r1, [r7, #0]
 8000632:	fb01 f303 	mul.w	r3, r1, r3
 8000636:	fbb2 f3f3 	udiv	r3, r2, r3
 800063a:	3b01      	subs	r3, #1
 800063c:	60bb      	str	r3, [r7, #8]
  while (period > 0xFFFF) {
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000644:	d2eb      	bcs.n	800061e <Setting_the_pulse_frequency+0x22>
  }

  HAL_TIM_PWM_Stop(Motor_xx->PWM.Timer, Motor_xx->PWM.Channel);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	691a      	ldr	r2, [r3, #16]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4619      	mov	r1, r3
 8000650:	4610      	mov	r0, r2
 8000652:	f002 ffad 	bl	80035b0 <HAL_TIM_PWM_Stop>
  Motor_xx->PWM.Timer->Instance->PSC = prescaler;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	691b      	ldr	r3, [r3, #16]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	629a      	str	r2, [r3, #40]	@ 0x28
  Motor_xx->PWM.Timer->Instance->ARR = period;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	691b      	ldr	r3, [r3, #16]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	62da      	str	r2, [r3, #44]	@ 0x2c
  Motor_xx->PWM.Timer->Instance->CCR1 = period / 2;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	68ba      	ldr	r2, [r7, #8]
 8000672:	0852      	lsrs	r2, r2, #1
 8000674:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(Motor_xx->PWM.Timer, Motor_xx->PWM.Channel);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	691a      	ldr	r2, [r3, #16]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4619      	mov	r1, r3
 8000680:	4610      	mov	r0, r2
 8000682:	f002 fecd 	bl	8003420 <HAL_TIM_PWM_Start>

  if (Motor_xx == &Motor_AZ) {
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a06      	ldr	r2, [pc, #24]	@ (80006a4 <Setting_the_pulse_frequency+0xa8>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d103      	bne.n	8000696 <Setting_the_pulse_frequency+0x9a>
    Systema_AZ.Status.Frequency = frequency;
 800068e:	4a06      	ldr	r2, [pc, #24]	@ (80006a8 <Setting_the_pulse_frequency+0xac>)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	6113      	str	r3, [r2, #16]
  }
  else {
    Systema_EL.Status.Frequency = frequency;
  };
};
 8000694:	e002      	b.n	800069c <Setting_the_pulse_frequency+0xa0>
    Systema_EL.Status.Frequency = frequency;
 8000696:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <Setting_the_pulse_frequency+0xb0>)
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	6113      	str	r3, [r2, #16]
};
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000010 	.word	0x20000010
 80006a8:	20000058 	.word	0x20000058
 80006ac:	20000074 	.word	0x20000074

080006b0 <Turning_on_the_engine>:
  * - Активирует ШИМ-генерацию
  * - Устанавливает направление вращения
  * - Включает питание двигателя
  * - Может изменить текущее положение системы
  */
void Turning_on_the_engine(Motor *Motor_xx, GPIO_PinState direction_of_rotation) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
  Setting_the_pulse_frequency(Motor_xx, Motor_xx->PWM.Minimum_frequency);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	4619      	mov	r1, r3
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff ff9a 	bl	80005fc <Setting_the_pulse_frequency>
  HAL_GPIO_WritePin(Motor_xx->Pins.DIR_port, Motor_xx->Pins.DIR_pin, direction_of_rotation);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	78fa      	ldrb	r2, [r7, #3]
 80006d4:	4619      	mov	r1, r3
 80006d6:	f002 f9a1 	bl	8002a1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Motor_xx->Pins.ENA_port, Motor_xx->Pins.ENA_pin, Work);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6858      	ldr	r0, [r3, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	2200      	movs	r2, #0
 80006e6:	4619      	mov	r1, r3
 80006e8:	f002 f998 	bl	8002a1c <HAL_GPIO_WritePin>
};
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <Engine_shutdown>:
  * - Полностью останавливает двигатель
  * - Сбрасывает статус движения
  * - Освобождает ресурсы таймера
  * - Переводит драйвер в энергосберегающий режим
  */
void Engine_shutdown(Motor *Motor_xx) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  Setting_the_pulse_frequency(Motor_xx, Motor_xx->PWM.Minimum_frequency);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	4619      	mov	r1, r3
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ff7a 	bl	80005fc <Setting_the_pulse_frequency>
  HAL_TIM_PWM_Stop(Motor_xx->PWM.Timer, Motor_xx->PWM.Channel);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	691a      	ldr	r2, [r3, #16]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	4619      	mov	r1, r3
 8000712:	4610      	mov	r0, r2
 8000714:	f002 ff4c 	bl	80035b0 <HAL_TIM_PWM_Stop>
  HAL_GPIO_WritePin(Motor_xx->Pins.ENA_port, Motor_xx->Pins.ENA_pin, Sleep);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6858      	ldr	r0, [r3, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	b29b      	uxth	r3, r3
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	f002 f979 	bl	8002a1c <HAL_GPIO_WritePin>
  if (Motor_xx == &Motor_AZ) {Systema_AZ.Status.Moving = 0;}
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a06      	ldr	r2, [pc, #24]	@ (8000748 <Engine_shutdown+0x54>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d103      	bne.n	800073a <Engine_shutdown+0x46>
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <Engine_shutdown+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	751a      	strb	r2, [r3, #20]
  else {Systema_EL.Status.Moving = 0;};
};
 8000738:	e002      	b.n	8000740 <Engine_shutdown+0x4c>
  else {Systema_EL.Status.Moving = 0;};
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <Engine_shutdown+0x5c>)
 800073c:	2200      	movs	r2, #0
 800073e:	751a      	strb	r2, [r3, #20]
};
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000010 	.word	0x20000010
 800074c:	20000058 	.word	0x20000058
 8000750:	20000074 	.word	0x20000074

08000754 <Return_to_the_workspace>:
  * @sideeffect
  * - Может временно активировать один из двигателей
  * - Модифицирует состояние обеих систем управления
  * - Изменяет текущее положение двигателей
  */
void Return_to_the_workspace(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Motor_AZ.Pins.ENA_port, Motor_AZ.Pins.ENA_pin, Sleep);
 8000758:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <Return_to_the_workspace+0xb0>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	4a29      	ldr	r2, [pc, #164]	@ (8000804 <Return_to_the_workspace+0xb0>)
 800075e:	68d2      	ldr	r2, [r2, #12]
 8000760:	b291      	uxth	r1, r2
 8000762:	2201      	movs	r2, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f002 f959 	bl	8002a1c <HAL_GPIO_WritePin>
  Systema_AZ.Status.Moving = 0;
 800076a:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <Return_to_the_workspace+0xb4>)
 800076c:	2200      	movs	r2, #0
 800076e:	751a      	strb	r2, [r3, #20]
  HAL_GPIO_WritePin(Motor_EL.Pins.ENA_port, Motor_EL.Pins.ENA_pin, Sleep);
 8000770:	4b26      	ldr	r3, [pc, #152]	@ (800080c <Return_to_the_workspace+0xb8>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4a25      	ldr	r2, [pc, #148]	@ (800080c <Return_to_the_workspace+0xb8>)
 8000776:	68d2      	ldr	r2, [r2, #12]
 8000778:	b291      	uxth	r1, r2
 800077a:	2201      	movs	r2, #1
 800077c:	4618      	mov	r0, r3
 800077e:	f002 f94d 	bl	8002a1c <HAL_GPIO_WritePin>
  Systema_EL.Status.Moving = 0;
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <Return_to_the_workspace+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	751a      	strb	r2, [r3, #20]

  if (Checking_the_workspace(&Systema_AZ) == HAL_OK) {
 8000788:	481f      	ldr	r0, [pc, #124]	@ (8000808 <Return_to_the_workspace+0xb4>)
 800078a:	f000 f879 	bl	8000880 <Checking_the_workspace>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d11a      	bne.n	80007ca <Return_to_the_workspace+0x76>
    Turning_on_the_engine(&Motor_AZ, Systema_AZ.Status.Angular > 0 ? Right : Left);
 8000794:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <Return_to_the_workspace+0xb4>)
 8000796:	edd3 7a06 	vldr	s15, [r3, #24]
 800079a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800079e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a2:	bfcc      	ite	gt
 80007a4:	2301      	movgt	r3, #1
 80007a6:	2300      	movle	r3, #0
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f083 0301 	eor.w	r3, r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	4619      	mov	r1, r3
 80007b4:	4813      	ldr	r0, [pc, #76]	@ (8000804 <Return_to_the_workspace+0xb0>)
 80007b6:	f7ff ff7b 	bl	80006b0 <Turning_on_the_engine>
    HAL_Delay(500);
 80007ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007be:	f001 fa2f 	bl	8001c20 <HAL_Delay>
    Engine_shutdown(&Motor_AZ);
 80007c2:	4810      	ldr	r0, [pc, #64]	@ (8000804 <Return_to_the_workspace+0xb0>)
 80007c4:	f7ff ff96 	bl	80006f4 <Engine_shutdown>
  else {
    Turning_on_the_engine(&Motor_EL, Systema_EL.Status.Angular > 0 ? Down : Up);
    HAL_Delay(500);
    Engine_shutdown(&Motor_EL);
  };
};
 80007c8:	e019      	b.n	80007fe <Return_to_the_workspace+0xaa>
    Turning_on_the_engine(&Motor_EL, Systema_EL.Status.Angular > 0 ? Down : Up);
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <Return_to_the_workspace+0xbc>)
 80007cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80007d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d8:	bfcc      	ite	gt
 80007da:	2301      	movgt	r3, #1
 80007dc:	2300      	movle	r3, #0
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	f083 0301 	eor.w	r3, r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4619      	mov	r1, r3
 80007ea:	4808      	ldr	r0, [pc, #32]	@ (800080c <Return_to_the_workspace+0xb8>)
 80007ec:	f7ff ff60 	bl	80006b0 <Turning_on_the_engine>
    HAL_Delay(500);
 80007f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007f4:	f001 fa14 	bl	8001c20 <HAL_Delay>
    Engine_shutdown(&Motor_EL);
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <Return_to_the_workspace+0xb8>)
 80007fa:	f7ff ff7b 	bl	80006f4 <Engine_shutdown>
};
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000010 	.word	0x20000010
 8000808:	20000058 	.word	0x20000058
 800080c:	20000034 	.word	0x20000034
 8000810:	20000074 	.word	0x20000074

08000814 <Increasing_the_pulse_frequency>:
  * @sideeffect
  * - Изменяет частоту ШИМ-генерации
  * - Вносит задержку в работу системы
  * - Обновляет статус частоты в соответствующей системе
  */
void Increasing_the_pulse_frequency(Motor *Motor_xx) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ((Motor_xx == &Motor_AZ ? Systema_AZ.Status.Frequency : Systema_EL.Status.Frequency) < Motor_xx->PWM.Maximum_frequency) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a15      	ldr	r2, [pc, #84]	@ (8000874 <Increasing_the_pulse_frequency+0x60>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d102      	bne.n	800082a <Increasing_the_pulse_frequency+0x16>
 8000824:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <Increasing_the_pulse_frequency+0x64>)
 8000826:	691b      	ldr	r3, [r3, #16]
 8000828:	e001      	b.n	800082e <Increasing_the_pulse_frequency+0x1a>
 800082a:	4b14      	ldr	r3, [pc, #80]	@ (800087c <Increasing_the_pulse_frequency+0x68>)
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	6992      	ldr	r2, [r2, #24]
 8000832:	4293      	cmp	r3, r2
 8000834:	d21a      	bcs.n	800086c <Increasing_the_pulse_frequency+0x58>
    unsigned int frequency = (Motor_xx == &Motor_AZ ? Systema_AZ.Status.Frequency : Systema_EL.Status.Frequency) + Motor_xx->PWM.Increment_frequency;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a0e      	ldr	r2, [pc, #56]	@ (8000874 <Increasing_the_pulse_frequency+0x60>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d102      	bne.n	8000844 <Increasing_the_pulse_frequency+0x30>
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <Increasing_the_pulse_frequency+0x64>)
 8000840:	691b      	ldr	r3, [r3, #16]
 8000842:	e001      	b.n	8000848 <Increasing_the_pulse_frequency+0x34>
 8000844:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <Increasing_the_pulse_frequency+0x68>)
 8000846:	691b      	ldr	r3, [r3, #16]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	6a12      	ldr	r2, [r2, #32]
 800084c:	4413      	add	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
    frequency = MIN(frequency, Motor_xx->PWM.Maximum_frequency);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	4293      	cmp	r3, r2
 8000858:	bf28      	it	cs
 800085a:	4613      	movcs	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
    Setting_the_pulse_frequency(Motor_xx ,frequency);
 800085e:	68f9      	ldr	r1, [r7, #12]
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff fecb 	bl	80005fc <Setting_the_pulse_frequency>
    HAL_Delay(100);
 8000866:	2064      	movs	r0, #100	@ 0x64
 8000868:	f001 f9da 	bl	8001c20 <HAL_Delay>
  }
};
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000010 	.word	0x20000010
 8000878:	20000058 	.word	0x20000058
 800087c:	20000074 	.word	0x20000074

08000880 <Checking_the_workspace>:
    .Moving = 0,
    .Angular = 0.0f
  }
};

HAL_StatusTypeDef Checking_the_workspace(Systema *Systema_xx) {
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  float lower_limit = Systema_xx->Settings.Minimum_angular + Systema_xx->Settings.Off_limits;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	ed93 7a01 	vldr	s14, [r3, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	edd3 7a03 	vldr	s15, [r3, #12]
 8000894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000898:	edc7 7a05 	vstr	s15, [r7, #20]
  float upper_limit = Systema_xx->Settings.Maximum_angular - Systema_xx->Settings.Off_limits;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	ed93 7a00 	vldr	s14, [r3]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80008a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008ac:	edc7 7a04 	vstr	s15, [r7, #16]
  float current_angle = CLAMP(Systema_xx->Status.Angular, lower_limit, upper_limit);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80008b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80008ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c2:	dd03      	ble.n	80008cc <Checking_the_workspace+0x4c>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80008ca:	e001      	b.n	80008d0 <Checking_the_workspace+0x50>
 80008cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80008d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80008d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008dc:	d501      	bpl.n	80008e2 <Checking_the_workspace+0x62>
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	e00d      	b.n	80008fe <Checking_the_workspace+0x7e>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80008e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80008ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f4:	dd02      	ble.n	80008fc <Checking_the_workspace+0x7c>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	e000      	b.n	80008fe <Checking_the_workspace+0x7e>
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	60fb      	str	r3, [r7, #12]
  return ((current_angle != lower_limit) && (current_angle != upper_limit)) ? HAL_OK : HAL_ERROR;
 8000900:	ed97 7a03 	vldr	s14, [r7, #12]
 8000904:	edd7 7a05 	vldr	s15, [r7, #20]
 8000908:	eeb4 7a67 	vcmp.f32	s14, s15
 800090c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000910:	d008      	beq.n	8000924 <Checking_the_workspace+0xa4>
 8000912:	ed97 7a03 	vldr	s14, [r7, #12]
 8000916:	edd7 7a04 	vldr	s15, [r7, #16]
 800091a:	eeb4 7a67 	vcmp.f32	s14, s15
 800091e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000922:	d101      	bne.n	8000928 <Checking_the_workspace+0xa8>
 8000924:	2301      	movs	r3, #1
 8000926:	e000      	b.n	800092a <Checking_the_workspace+0xaa>
 8000928:	2300      	movs	r3, #0
 800092a:	b2db      	uxtb	r3, r3
};
 800092c:	4618      	mov	r0, r3
 800092e:	371c      	adds	r7, #28
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <Data_parsing>:
  *
  * @sideeffect
  * - Модифицирует структуру Target (поля Azimuth и Elevation)
  * - Добавляет нуль-терминатор в массив Rx_data
  */
void Data_parsing(void) {
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  Target.Rx_data[20] = '\0';
 800093c:	4b40      	ldr	r3, [pc, #256]	@ (8000a40 <Data_parsing+0x108>)
 800093e:	2200      	movs	r2, #0
 8000940:	765a      	strb	r2, [r3, #25]

  Target.Azimuth =
    (Target.Rx_data[3]  - '0') * 100.0f +
 8000942:	4b3f      	ldr	r3, [pc, #252]	@ (8000a40 <Data_parsing+0x108>)
 8000944:	7a1b      	ldrb	r3, [r3, #8]
 8000946:	3b30      	subs	r3, #48	@ 0x30
 8000948:	ee07 3a90 	vmov	s15, r3
 800094c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000950:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8000a44 <Data_parsing+0x10c>
 8000954:	ee27 7a87 	vmul.f32	s14, s15, s14
    (Target.Rx_data[4]  - '0') * 10.0f +
 8000958:	4b39      	ldr	r3, [pc, #228]	@ (8000a40 <Data_parsing+0x108>)
 800095a:	7a5b      	ldrb	r3, [r3, #9]
 800095c:	3b30      	subs	r3, #48	@ 0x30
 800095e:	ee07 3a90 	vmov	s15, r3
 8000962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000966:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800096a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    (Target.Rx_data[3]  - '0') * 100.0f +
 800096e:	ee37 7a27 	vadd.f32	s14, s14, s15
    (Target.Rx_data[5]  - '0') +
 8000972:	4b33      	ldr	r3, [pc, #204]	@ (8000a40 <Data_parsing+0x108>)
 8000974:	7a9b      	ldrb	r3, [r3, #10]
 8000976:	3b30      	subs	r3, #48	@ 0x30
    (Target.Rx_data[4]  - '0') * 10.0f +
 8000978:	ee07 3a90 	vmov	s15, r3
 800097c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000980:	ee37 7a27 	vadd.f32	s14, s14, s15
    (Target.Rx_data[6]  - '0') * 0.1f;
 8000984:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <Data_parsing+0x108>)
 8000986:	7adb      	ldrb	r3, [r3, #11]
 8000988:	3b30      	subs	r3, #48	@ 0x30
 800098a:	ee07 3a90 	vmov	s15, r3
 800098e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000992:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8000a48 <Data_parsing+0x110>
 8000996:	ee67 7aa6 	vmul.f32	s15, s15, s13
    (Target.Rx_data[5]  - '0') +
 800099a:	ee77 7a27 	vadd.f32	s15, s14, s15
  Target.Azimuth =
 800099e:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <Data_parsing+0x108>)
 80009a0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
  if (Target.Rx_data[2] == '-') Target.Azimuth = -Target.Azimuth;
 80009a4:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <Data_parsing+0x108>)
 80009a6:	79db      	ldrb	r3, [r3, #7]
 80009a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80009aa:	d107      	bne.n	80009bc <Data_parsing+0x84>
 80009ac:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <Data_parsing+0x108>)
 80009ae:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80009b2:	eef1 7a67 	vneg.f32	s15, s15
 80009b6:	4b22      	ldr	r3, [pc, #136]	@ (8000a40 <Data_parsing+0x108>)
 80009b8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

  Target.Elevation =
    (Target.Rx_data[10] - '0') * 100.0f +
 80009bc:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <Data_parsing+0x108>)
 80009be:	7bdb      	ldrb	r3, [r3, #15]
 80009c0:	3b30      	subs	r3, #48	@ 0x30
 80009c2:	ee07 3a90 	vmov	s15, r3
 80009c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ca:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000a44 <Data_parsing+0x10c>
 80009ce:	ee27 7a87 	vmul.f32	s14, s15, s14
    (Target.Rx_data[11] - '0') * 10.0f +
 80009d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <Data_parsing+0x108>)
 80009d4:	7c1b      	ldrb	r3, [r3, #16]
 80009d6:	3b30      	subs	r3, #48	@ 0x30
 80009d8:	ee07 3a90 	vmov	s15, r3
 80009dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80009e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    (Target.Rx_data[10] - '0') * 100.0f +
 80009e8:	ee37 7a27 	vadd.f32	s14, s14, s15
    (Target.Rx_data[12] - '0') +
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <Data_parsing+0x108>)
 80009ee:	7c5b      	ldrb	r3, [r3, #17]
 80009f0:	3b30      	subs	r3, #48	@ 0x30
    (Target.Rx_data[11] - '0') * 10.0f +
 80009f2:	ee07 3a90 	vmov	s15, r3
 80009f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009fa:	ee37 7a27 	vadd.f32	s14, s14, s15
    (Target.Rx_data[13] - '0') * 0.1f;
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <Data_parsing+0x108>)
 8000a00:	7c9b      	ldrb	r3, [r3, #18]
 8000a02:	3b30      	subs	r3, #48	@ 0x30
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a0c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000a48 <Data_parsing+0x110>
 8000a10:	ee67 7aa6 	vmul.f32	s15, s15, s13
    (Target.Rx_data[12] - '0') +
 8000a14:	ee77 7a27 	vadd.f32	s15, s14, s15
  Target.Elevation =
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <Data_parsing+0x108>)
 8000a1a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
  if (Target.Rx_data[9] == '-') Target.Elevation = -Target.Elevation;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <Data_parsing+0x108>)
 8000a20:	7b9b      	ldrb	r3, [r3, #14]
 8000a22:	2b2d      	cmp	r3, #45	@ 0x2d
 8000a24:	d107      	bne.n	8000a36 <Data_parsing+0xfe>
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <Data_parsing+0x108>)
 8000a28:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000a2c:	eef1 7a67 	vneg.f32	s15, s15
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <Data_parsing+0x108>)
 8000a32:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
};
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	20000090 	.word	0x20000090
 8000a44:	42c80000 	.word	0x42c80000
 8000a48:	3dcccccd 	.word	0x3dcccccd

08000a4c <Message_formation>:
  *
  * @sideeffect
  * - Модифицирует буфер Tx_data в структуре Target
  * - Не изменяет исходные угловые значения
  */
void Message_formation() {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
  if (!Target.transmitting) {
 8000a52:	4b72      	ldr	r3, [pc, #456]	@ (8000c1c <Message_formation+0x1d0>)
 8000a54:	791b      	ldrb	r3, [r3, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f040 80d9 	bne.w	8000c0e <Message_formation+0x1c2>
    uint16_t angular_az = (uint16_t)fabs(Systema_AZ.Status.Angular * 10);
 8000a5c:	4b70      	ldr	r3, [pc, #448]	@ (8000c20 <Message_formation+0x1d4>)
 8000a5e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000a62:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a6a:	eef0 7ae7 	vabs.f32	s15, s15
 8000a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a72:	ee17 3a90 	vmov	r3, s15
 8000a76:	80fb      	strh	r3, [r7, #6]
    uint16_t angular_el = (uint16_t)fabs(Systema_EL.Status.Angular * 10);
 8000a78:	4b6a      	ldr	r3, [pc, #424]	@ (8000c24 <Message_formation+0x1d8>)
 8000a7a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000a7e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a86:	eef0 7ae7 	vabs.f32	s15, s15
 8000a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a8e:	ee17 3a90 	vmov	r3, s15
 8000a92:	80bb      	strh	r3, [r7, #4]

    Target.Tx_data[1] = (Systema_AZ.Status.Angular >= 0) ? '1' : '0';
 8000a94:	4b62      	ldr	r3, [pc, #392]	@ (8000c20 <Message_formation+0x1d4>)
 8000a96:	edd3 7a06 	vldr	s15, [r3, #24]
 8000a9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa2:	db01      	blt.n	8000aa8 <Message_formation+0x5c>
 8000aa4:	2231      	movs	r2, #49	@ 0x31
 8000aa6:	e000      	b.n	8000aaa <Message_formation+0x5e>
 8000aa8:	2230      	movs	r2, #48	@ 0x30
 8000aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8000c1c <Message_formation+0x1d0>)
 8000aac:	76da      	strb	r2, [r3, #27]
    Target.Tx_data[2] = '0' + (angular_az / 1000) % 10;
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8000c28 <Message_formation+0x1dc>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	099b      	lsrs	r3, r3, #6
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	4b5c      	ldr	r3, [pc, #368]	@ (8000c2c <Message_formation+0x1e0>)
 8000abc:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac0:	08d9      	lsrs	r1, r3, #3
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	3330      	adds	r3, #48	@ 0x30
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b51      	ldr	r3, [pc, #324]	@ (8000c1c <Message_formation+0x1d0>)
 8000ad6:	771a      	strb	r2, [r3, #28]
    Target.Tx_data[3] = '0' + (angular_az / 100) % 10;
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	4a55      	ldr	r2, [pc, #340]	@ (8000c30 <Message_formation+0x1e4>)
 8000adc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae0:	095b      	lsrs	r3, r3, #5
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b51      	ldr	r3, [pc, #324]	@ (8000c2c <Message_formation+0x1e0>)
 8000ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aea:	08d9      	lsrs	r1, r3, #3
 8000aec:	460b      	mov	r3, r1
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	440b      	add	r3, r1
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	3330      	adds	r3, #48	@ 0x30
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b47      	ldr	r3, [pc, #284]	@ (8000c1c <Message_formation+0x1d0>)
 8000b00:	775a      	strb	r2, [r3, #29]
    Target.Tx_data[4] = '0' + (angular_az / 10) % 10;
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	4a49      	ldr	r2, [pc, #292]	@ (8000c2c <Message_formation+0x1e0>)
 8000b06:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0a:	08db      	lsrs	r3, r3, #3
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	4b47      	ldr	r3, [pc, #284]	@ (8000c2c <Message_formation+0x1e0>)
 8000b10:	fba3 1302 	umull	r1, r3, r3, r2
 8000b14:	08d9      	lsrs	r1, r3, #3
 8000b16:	460b      	mov	r3, r1
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	3330      	adds	r3, #48	@ 0x30
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b3c      	ldr	r3, [pc, #240]	@ (8000c1c <Message_formation+0x1d0>)
 8000b2a:	779a      	strb	r2, [r3, #30]
    Target.Tx_data[5] = '0' + (angular_az) % 10;
 8000b2c:	88fa      	ldrh	r2, [r7, #6]
 8000b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c2c <Message_formation+0x1e0>)
 8000b30:	fba3 1302 	umull	r1, r3, r3, r2
 8000b34:	08d9      	lsrs	r1, r3, #3
 8000b36:	460b      	mov	r3, r1
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	3330      	adds	r3, #48	@ 0x30
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b34      	ldr	r3, [pc, #208]	@ (8000c1c <Message_formation+0x1d0>)
 8000b4a:	77da      	strb	r2, [r3, #31]

    Target.Tx_data[6] = (Systema_EL.Status.Angular >= 0) ? '1' : '0';
 8000b4c:	4b35      	ldr	r3, [pc, #212]	@ (8000c24 <Message_formation+0x1d8>)
 8000b4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b5a:	db01      	blt.n	8000b60 <Message_formation+0x114>
 8000b5c:	2231      	movs	r2, #49	@ 0x31
 8000b5e:	e000      	b.n	8000b62 <Message_formation+0x116>
 8000b60:	2230      	movs	r2, #48	@ 0x30
 8000b62:	4b2e      	ldr	r3, [pc, #184]	@ (8000c1c <Message_formation+0x1d0>)
 8000b64:	f883 2020 	strb.w	r2, [r3, #32]
    Target.Tx_data[7] = '0' +  (angular_el / 1000) % 10;
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c28 <Message_formation+0x1dc>)
 8000b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b70:	099b      	lsrs	r3, r3, #6
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	4b2d      	ldr	r3, [pc, #180]	@ (8000c2c <Message_formation+0x1e0>)
 8000b76:	fba3 1302 	umull	r1, r3, r3, r2
 8000b7a:	08d9      	lsrs	r1, r3, #3
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	3330      	adds	r3, #48	@ 0x30
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b23      	ldr	r3, [pc, #140]	@ (8000c1c <Message_formation+0x1d0>)
 8000b90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    Target.Tx_data[8] = '0' +  (angular_el / 100) % 10;
 8000b94:	88bb      	ldrh	r3, [r7, #4]
 8000b96:	4a26      	ldr	r2, [pc, #152]	@ (8000c30 <Message_formation+0x1e4>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	095b      	lsrs	r3, r3, #5
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b22      	ldr	r3, [pc, #136]	@ (8000c2c <Message_formation+0x1e0>)
 8000ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ba6:	08d9      	lsrs	r1, r3, #3
 8000ba8:	460b      	mov	r3, r1
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	440b      	add	r3, r1
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	3330      	adds	r3, #48	@ 0x30
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <Message_formation+0x1d0>)
 8000bbc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    Target.Tx_data[9] = '0' +  (angular_el / 10) % 10;
 8000bc0:	88bb      	ldrh	r3, [r7, #4]
 8000bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c2c <Message_formation+0x1e0>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	08db      	lsrs	r3, r3, #3
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <Message_formation+0x1e0>)
 8000bce:	fba3 1302 	umull	r1, r3, r3, r2
 8000bd2:	08d9      	lsrs	r1, r3, #3
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	440b      	add	r3, r1
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	3330      	adds	r3, #48	@ 0x30
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <Message_formation+0x1d0>)
 8000be8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    Target.Tx_data[10] = '0' + (angular_el) % 10;
 8000bec:	88ba      	ldrh	r2, [r7, #4]
 8000bee:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <Message_formation+0x1e0>)
 8000bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8000bf4:	08d9      	lsrs	r1, r3, #3
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	3330      	adds	r3, #48	@ 0x30
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <Message_formation+0x1d0>)
 8000c0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  };
};
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000090 	.word	0x20000090
 8000c20:	20000058 	.word	0x20000058
 8000c24:	20000074 	.word	0x20000074
 8000c28:	10624dd3 	.word	0x10624dd3
 8000c2c:	cccccccd 	.word	0xcccccccd
 8000c30:	51eb851f 	.word	0x51eb851f

08000c34 <Manual_operation>:
  * @sideeffect
  * - Может запускать/останавливать двигатели
  * - Меняет частоту ШИМ
  * - Обновляет статусы движения в Systema_AZ/EL
  */
void Manual_operation(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  if (Target.Rx_data[5] != '0') {
 8000c38:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb8 <Manual_operation+0x84>)
 8000c3a:	7a9b      	ldrb	r3, [r3, #10]
 8000c3c:	2b30      	cmp	r3, #48	@ 0x30
 8000c3e:	d017      	beq.n	8000c70 <Manual_operation+0x3c>
    if (!Systema_AZ.Status.Moving) {Turning_on_the_engine(&Motor_AZ, Target.Azimuth > 0 ? Left : Right);}
 8000c40:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <Manual_operation+0x88>)
 8000c42:	7d1b      	ldrb	r3, [r3, #20]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10f      	bne.n	8000c68 <Manual_operation+0x34>
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <Manual_operation+0x84>)
 8000c4a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000c4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c56:	bfcc      	ite	gt
 8000c58:	2301      	movgt	r3, #1
 8000c5a:	2300      	movle	r3, #0
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <Manual_operation+0x8c>)
 8000c62:	f7ff fd25 	bl	80006b0 <Turning_on_the_engine>
 8000c66:	e006      	b.n	8000c76 <Manual_operation+0x42>
    else {Increasing_the_pulse_frequency(&Motor_AZ);};
 8000c68:	4815      	ldr	r0, [pc, #84]	@ (8000cc0 <Manual_operation+0x8c>)
 8000c6a:	f7ff fdd3 	bl	8000814 <Increasing_the_pulse_frequency>
 8000c6e:	e002      	b.n	8000c76 <Manual_operation+0x42>
  }
  else {Engine_shutdown(&Motor_AZ);};
 8000c70:	4813      	ldr	r0, [pc, #76]	@ (8000cc0 <Manual_operation+0x8c>)
 8000c72:	f7ff fd3f 	bl	80006f4 <Engine_shutdown>

  if (Target.Rx_data[12] != '0') {
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <Manual_operation+0x84>)
 8000c78:	7c5b      	ldrb	r3, [r3, #17]
 8000c7a:	2b30      	cmp	r3, #48	@ 0x30
 8000c7c:	d017      	beq.n	8000cae <Manual_operation+0x7a>
    if (!Systema_EL.Status.Moving) {Turning_on_the_engine(&Motor_EL, Target.Elevation > 0 ? Up : Down);}
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <Manual_operation+0x90>)
 8000c80:	7d1b      	ldrb	r3, [r3, #20]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10f      	bne.n	8000ca6 <Manual_operation+0x72>
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <Manual_operation+0x84>)
 8000c88:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000c8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c94:	bfcc      	ite	gt
 8000c96:	2301      	movgt	r3, #1
 8000c98:	2300      	movle	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480a      	ldr	r0, [pc, #40]	@ (8000cc8 <Manual_operation+0x94>)
 8000ca0:	f7ff fd06 	bl	80006b0 <Turning_on_the_engine>
    else {Increasing_the_pulse_frequency(&Motor_EL);};
  }
  else {Engine_shutdown(&Motor_EL);};
};
 8000ca4:	e006      	b.n	8000cb4 <Manual_operation+0x80>
    else {Increasing_the_pulse_frequency(&Motor_EL);};
 8000ca6:	4808      	ldr	r0, [pc, #32]	@ (8000cc8 <Manual_operation+0x94>)
 8000ca8:	f7ff fdb4 	bl	8000814 <Increasing_the_pulse_frequency>
};
 8000cac:	e002      	b.n	8000cb4 <Manual_operation+0x80>
  else {Engine_shutdown(&Motor_EL);};
 8000cae:	4806      	ldr	r0, [pc, #24]	@ (8000cc8 <Manual_operation+0x94>)
 8000cb0:	f7ff fd20 	bl	80006f4 <Engine_shutdown>
};
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000090 	.word	0x20000090
 8000cbc:	20000058 	.word	0x20000058
 8000cc0:	20000010 	.word	0x20000010
 8000cc4:	20000074 	.word	0x20000074
 8000cc8:	20000034 	.word	0x20000034

08000ccc <Pointing_at_an_angle>:
  * - Может запускать/останавливать двигатели
  * - Меняет частоту ШИМ
  * - Обновляет статусы движения
  * - Изменяет текущее положение системы
  */
void Pointing_at_an_angle(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  float angle_difference_az = Systema_AZ.Status.Angular - Target.Azimuth;
 8000cd2:	4b30      	ldr	r3, [pc, #192]	@ (8000d94 <Pointing_at_an_angle+0xc8>)
 8000cd4:	ed93 7a06 	vldr	s14, [r3, #24]
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d98 <Pointing_at_an_angle+0xcc>)
 8000cda:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ce2:	edc7 7a01 	vstr	s15, [r7, #4]
  if (angle_difference_az > Systema_AZ.Settings.Minimum_angular) {
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d94 <Pointing_at_an_angle+0xc8>)
 8000ce8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cec:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf8:	dd16      	ble.n	8000d28 <Pointing_at_an_angle+0x5c>
    if (!Systema_AZ.Status.Moving) {Turning_on_the_engine(&Motor_AZ, angle_difference_az > 0 ? Left : Right);}
 8000cfa:	4b26      	ldr	r3, [pc, #152]	@ (8000d94 <Pointing_at_an_angle+0xc8>)
 8000cfc:	7d1b      	ldrb	r3, [r3, #20]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10e      	bne.n	8000d20 <Pointing_at_an_angle+0x54>
 8000d02:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0e:	bfcc      	ite	gt
 8000d10:	2301      	movgt	r3, #1
 8000d12:	2300      	movle	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	4619      	mov	r1, r3
 8000d18:	4820      	ldr	r0, [pc, #128]	@ (8000d9c <Pointing_at_an_angle+0xd0>)
 8000d1a:	f7ff fcc9 	bl	80006b0 <Turning_on_the_engine>
 8000d1e:	e006      	b.n	8000d2e <Pointing_at_an_angle+0x62>
	else {Increasing_the_pulse_frequency(&Motor_AZ);};
 8000d20:	481e      	ldr	r0, [pc, #120]	@ (8000d9c <Pointing_at_an_angle+0xd0>)
 8000d22:	f7ff fd77 	bl	8000814 <Increasing_the_pulse_frequency>
 8000d26:	e002      	b.n	8000d2e <Pointing_at_an_angle+0x62>
  }
  else {Engine_shutdown(&Motor_AZ);};
 8000d28:	481c      	ldr	r0, [pc, #112]	@ (8000d9c <Pointing_at_an_angle+0xd0>)
 8000d2a:	f7ff fce3 	bl	80006f4 <Engine_shutdown>

  float angle_difference_el = Systema_EL.Status.Angular - Target.Elevation;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <Pointing_at_an_angle+0xd4>)
 8000d30:	ed93 7a06 	vldr	s14, [r3, #24]
 8000d34:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <Pointing_at_an_angle+0xcc>)
 8000d36:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d3e:	edc7 7a00 	vstr	s15, [r7]
  if (angle_difference_el > Systema_EL.Settings.Minimum_angular) {
 8000d42:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <Pointing_at_an_angle+0xd4>)
 8000d44:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d48:	ed97 7a00 	vldr	s14, [r7]
 8000d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d54:	dd16      	ble.n	8000d84 <Pointing_at_an_angle+0xb8>
    if (!Systema_EL.Status.Moving) {Turning_on_the_engine(&Motor_EL, angle_difference_el > 0 ? Up : Down);}
 8000d56:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <Pointing_at_an_angle+0xd4>)
 8000d58:	7d1b      	ldrb	r3, [r3, #20]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10e      	bne.n	8000d7c <Pointing_at_an_angle+0xb0>
 8000d5e:	edd7 7a00 	vldr	s15, [r7]
 8000d62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6a:	bfcc      	ite	gt
 8000d6c:	2301      	movgt	r3, #1
 8000d6e:	2300      	movle	r3, #0
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	480b      	ldr	r0, [pc, #44]	@ (8000da4 <Pointing_at_an_angle+0xd8>)
 8000d76:	f7ff fc9b 	bl	80006b0 <Turning_on_the_engine>
  	else {Increasing_the_pulse_frequency(&Motor_EL);};
  }
  else {Engine_shutdown(&Motor_EL);};
};
 8000d7a:	e006      	b.n	8000d8a <Pointing_at_an_angle+0xbe>
  	else {Increasing_the_pulse_frequency(&Motor_EL);};
 8000d7c:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <Pointing_at_an_angle+0xd8>)
 8000d7e:	f7ff fd49 	bl	8000814 <Increasing_the_pulse_frequency>
};
 8000d82:	e002      	b.n	8000d8a <Pointing_at_an_angle+0xbe>
  else {Engine_shutdown(&Motor_EL);};
 8000d84:	4807      	ldr	r0, [pc, #28]	@ (8000da4 <Pointing_at_an_angle+0xd8>)
 8000d86:	f7ff fcb5 	bl	80006f4 <Engine_shutdown>
};
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000058 	.word	0x20000058
 8000d98:	20000090 	.word	0x20000090
 8000d9c:	20000010 	.word	0x20000010
 8000da0:	20000074 	.word	0x20000074
 8000da4:	20000034 	.word	0x20000034

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  Positional_encoder_AZ.Timer = &htim5;
 8000dac:	4b3b      	ldr	r3, [pc, #236]	@ (8000e9c <main+0xf4>)
 8000dae:	4a3c      	ldr	r2, [pc, #240]	@ (8000ea0 <main+0xf8>)
 8000db0:	601a      	str	r2, [r3, #0]
  Positional_encoder_EL.Timer = &htim4;
 8000db2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ea4 <main+0xfc>)
 8000db4:	4a3c      	ldr	r2, [pc, #240]	@ (8000ea8 <main+0x100>)
 8000db6:	601a      	str	r2, [r3, #0]

  Motor_AZ.PWM.Timer = &htim3;
 8000db8:	4b3c      	ldr	r3, [pc, #240]	@ (8000eac <main+0x104>)
 8000dba:	4a3d      	ldr	r2, [pc, #244]	@ (8000eb0 <main+0x108>)
 8000dbc:	611a      	str	r2, [r3, #16]
  Motor_AZ.PWM.Channel = TIM_CHANNEL_1;
 8000dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8000eac <main+0x104>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  Motor_EL.PWM.Timer = &htim2;
 8000dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb4 <main+0x10c>)
 8000dc6:	4a3c      	ldr	r2, [pc, #240]	@ (8000eb8 <main+0x110>)
 8000dc8:	611a      	str	r2, [r3, #16]
  Motor_EL.PWM.Channel = TIM_CHANNEL_1;
 8000dca:	4b3a      	ldr	r3, [pc, #232]	@ (8000eb4 <main+0x10c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]

  Target.Chanal = &huart2;
 8000dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8000ebc <main+0x114>)
 8000dd2:	4a3b      	ldr	r2, [pc, #236]	@ (8000ec0 <main+0x118>)
 8000dd4:	601a      	str	r2, [r3, #0]
  Size_Rx_UART = sizeof(Target.Rx_data);
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec4 <main+0x11c>)
 8000dd8:	2215      	movs	r2, #21
 8000dda:	601a      	str	r2, [r3, #0]
  Size_Tx_UART = sizeof(Target.Tx_data);
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ec8 <main+0x120>)
 8000dde:	220d      	movs	r2, #13
 8000de0:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de2:	f000 feab 	bl	8001b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de6:	f000 f879 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dea:	f000 fb0b 	bl	8001404 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dee:	f000 f8df 	bl	8000fb0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000df2:	f000 f92f 	bl	8001054 <MX_ADC2_Init>
  MX_USART2_UART_Init();
 8000df6:	f000 fadb 	bl	80013b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000dfa:	f000 f97d 	bl	80010f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dfe:	f000 f9d5 	bl	80011ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e02:	f000 fa2d 	bl	8001260 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e06:	f000 fa7f 	bl	8001308 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Initialization_of_positioning_encoders();
 8000e0a:	f7ff fb73 	bl	80004f4 <Initialization_of_positioning_encoders>
  HAL_UART_Receive_IT(Target.Chanal, (uint8_t*)Target.Rx_data, Size_Rx_UART);
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <main+0x114>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a2c      	ldr	r2, [pc, #176]	@ (8000ec4 <main+0x11c>)
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	b292      	uxth	r2, r2
 8000e18:	492c      	ldr	r1, [pc, #176]	@ (8000ecc <main+0x124>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fae2 	bl	80043e4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Reading_the_system_position(&Positional_encoder_AZ, &Systema_AZ);
 8000e20:	492b      	ldr	r1, [pc, #172]	@ (8000ed0 <main+0x128>)
 8000e22:	481e      	ldr	r0, [pc, #120]	@ (8000e9c <main+0xf4>)
 8000e24:	f7ff fb88 	bl	8000538 <Reading_the_system_position>
    Reading_the_system_position(&Positional_encoder_EL, &Systema_EL);
 8000e28:	492a      	ldr	r1, [pc, #168]	@ (8000ed4 <main+0x12c>)
 8000e2a:	481e      	ldr	r0, [pc, #120]	@ (8000ea4 <main+0xfc>)
 8000e2c:	f7ff fb84 	bl	8000538 <Reading_the_system_position>

    if (Checking_the_workspace(&Systema_AZ) == HAL_OK && Checking_the_workspace(&Systema_EL) == HAL_OK) {
 8000e30:	4827      	ldr	r0, [pc, #156]	@ (8000ed0 <main+0x128>)
 8000e32:	f7ff fd25 	bl	8000880 <Checking_the_workspace>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d12c      	bne.n	8000e96 <main+0xee>
 8000e3c:	4825      	ldr	r0, [pc, #148]	@ (8000ed4 <main+0x12c>)
 8000e3e:	f7ff fd1f 	bl	8000880 <Checking_the_workspace>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d126      	bne.n	8000e96 <main+0xee>
      switch (Target.Rx_data[15]) {
 8000e48:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <main+0x114>)
 8000e4a:	7d1b      	ldrb	r3, [r3, #20]
 8000e4c:	2b32      	cmp	r3, #50	@ 0x32
 8000e4e:	d01e      	beq.n	8000e8e <main+0xe6>
 8000e50:	2b32      	cmp	r3, #50	@ 0x32
 8000e52:	dc0a      	bgt.n	8000e6a <main+0xc2>
 8000e54:	2b30      	cmp	r3, #48	@ 0x30
 8000e56:	d002      	beq.n	8000e5e <main+0xb6>
 8000e58:	2b31      	cmp	r3, #49	@ 0x31
 8000e5a:	d003      	beq.n	8000e64 <main+0xbc>
 8000e5c:	e005      	b.n	8000e6a <main+0xc2>
      case '0':
        Manual_operation();
 8000e5e:	f7ff fee9 	bl	8000c34 <Manual_operation>
    	break;
 8000e62:	e017      	b.n	8000e94 <main+0xec>
      case '1':
    	Pointing_at_an_angle();
 8000e64:	f7ff ff32 	bl	8000ccc <Pointing_at_an_angle>
        break;
 8000e68:	e014      	b.n	8000e94 <main+0xec>
      case '2': break;
      default:
    	Message_formation();
 8000e6a:	f7ff fdef 	bl	8000a4c <Message_formation>
        if (HAL_UART_Transmit_IT(Target.Chanal, (uint8_t*)Target.Tx_data, Size_Tx_UART) == HAL_OK) {
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <main+0x114>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a15      	ldr	r2, [pc, #84]	@ (8000ec8 <main+0x120>)
 8000e74:	6812      	ldr	r2, [r2, #0]
 8000e76:	b292      	uxth	r2, r2
 8000e78:	4917      	ldr	r1, [pc, #92]	@ (8000ed8 <main+0x130>)
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fa7c 	bl	8004378 <HAL_UART_Transmit_IT>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d105      	bne.n	8000e92 <main+0xea>
          Target.transmitting = 1;
 8000e86:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <main+0x114>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	711a      	strb	r2, [r3, #4]
        };
        break;
 8000e8c:	e001      	b.n	8000e92 <main+0xea>
      case '2': break;
 8000e8e:	bf00      	nop
 8000e90:	e003      	b.n	8000e9a <main+0xf2>
        break;
 8000e92:	bf00      	nop
      switch (Target.Rx_data[15]) {
 8000e94:	e001      	b.n	8000e9a <main+0xf2>
      }
    }
    else {Return_to_the_workspace();};
 8000e96:	f7ff fc5d 	bl	8000754 <Return_to_the_workspace>
    Reading_the_system_position(&Positional_encoder_AZ, &Systema_AZ);
 8000e9a:	e7c1      	b.n	8000e20 <main+0x78>
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000254 	.word	0x20000254
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	2000020c 	.word	0x2000020c
 8000eac:	20000010 	.word	0x20000010
 8000eb0:	200001c4 	.word	0x200001c4
 8000eb4:	20000034 	.word	0x20000034
 8000eb8:	2000017c 	.word	0x2000017c
 8000ebc:	20000090 	.word	0x20000090
 8000ec0:	2000029c 	.word	0x2000029c
 8000ec4:	200002e4 	.word	0x200002e4
 8000ec8:	200002e8 	.word	0x200002e8
 8000ecc:	20000095 	.word	0x20000095
 8000ed0:	20000058 	.word	0x20000058
 8000ed4:	20000074 	.word	0x20000074
 8000ed8:	200000aa 	.word	0x200000aa

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b094      	sub	sp, #80	@ 0x50
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2230      	movs	r2, #48	@ 0x30
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 f9a8 	bl	8005240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	4b28      	ldr	r3, [pc, #160]	@ (8000fa8 <SystemClock_Config+0xcc>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f08:	4a27      	ldr	r2, [pc, #156]	@ (8000fa8 <SystemClock_Config+0xcc>)
 8000f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f10:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <SystemClock_Config+0xcc>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <SystemClock_Config+0xd0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a21      	ldr	r2, [pc, #132]	@ (8000fac <SystemClock_Config+0xd0>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <SystemClock_Config+0xd0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f42:	2302      	movs	r3, #2
 8000f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f4c:	2308      	movs	r3, #8
 8000f4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f50:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fd74 	bl	8002a50 <HAL_RCC_OscConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f6e:	f000 fb2b 	bl	80015c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f72:	230f      	movs	r3, #15
 8000f74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f76:	2302      	movs	r3, #2
 8000f78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f7e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2105      	movs	r1, #5
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 ffd5 	bl	8002f40 <HAL_RCC_ClockConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f9c:	f000 fb14 	bl	80015c8 <Error_Handler>
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	3750      	adds	r7, #80	@ 0x50
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000

08000fb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <MX_ADC1_Init+0x98>)
 8000fc4:	4a21      	ldr	r2, [pc, #132]	@ (800104c <MX_ADC1_Init+0x9c>)
 8000fc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <MX_ADC1_Init+0x98>)
 8000fca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001048 <MX_ADC1_Init+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <MX_ADC1_Init+0x98>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <MX_ADC1_Init+0x98>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <MX_ADC1_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fea:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_ADC1_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <MX_ADC1_Init+0x98>)
 8000ff2:	4a17      	ldr	r2, [pc, #92]	@ (8001050 <MX_ADC1_Init+0xa0>)
 8000ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_ADC1_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_ADC1_Init+0x98>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_ADC1_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100a:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_ADC1_Init+0x98>)
 800100c:	2201      	movs	r2, #1
 800100e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001010:	480d      	ldr	r0, [pc, #52]	@ (8001048 <MX_ADC1_Init+0x98>)
 8001012:	f000 fe29 	bl	8001c68 <HAL_ADC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800101c:	f000 fad4 	bl	80015c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001020:	230e      	movs	r3, #14
 8001022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001024:	2301      	movs	r3, #1
 8001026:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_ADC1_Init+0x98>)
 8001032:	f000 ff8b 	bl	8001f4c <HAL_ADC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800103c:	f000 fac4 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000ec 	.word	0x200000ec
 800104c:	40012000 	.word	0x40012000
 8001050:	0f000001 	.word	0x0f000001

08001054 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001066:	4b21      	ldr	r3, [pc, #132]	@ (80010ec <MX_ADC2_Init+0x98>)
 8001068:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <MX_ADC2_Init+0x9c>)
 800106a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <MX_ADC2_Init+0x98>)
 800106e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001072:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001074:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <MX_ADC2_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800107a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <MX_ADC2_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <MX_ADC2_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <MX_ADC2_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <MX_ADC2_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <MX_ADC2_Init+0x98>)
 8001096:	4a17      	ldr	r2, [pc, #92]	@ (80010f4 <MX_ADC2_Init+0xa0>)
 8001098:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <MX_ADC2_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <MX_ADC2_Init+0x98>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_ADC2_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_ADC2_Init+0x98>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010b4:	480d      	ldr	r0, [pc, #52]	@ (80010ec <MX_ADC2_Init+0x98>)
 80010b6:	f000 fdd7 	bl	8001c68 <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80010c0:	f000 fa82 	bl	80015c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010c4:	230f      	movs	r3, #15
 80010c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_ADC2_Init+0x98>)
 80010d6:	f000 ff39 	bl	8001f4c <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80010e0:	f000 fa72 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000134 	.word	0x20000134
 80010f0:	40012100 	.word	0x40012100
 80010f4:	0f000001 	.word	0x0f000001

080010f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	@ 0x28
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]
 8001116:	615a      	str	r2, [r3, #20]
 8001118:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800111a:	4b23      	ldr	r3, [pc, #140]	@ (80011a8 <MX_TIM2_Init+0xb0>)
 800111c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001120:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <MX_TIM2_Init+0xb0>)
 8001124:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001128:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112a:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <MX_TIM2_Init+0xb0>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <MX_TIM2_Init+0xb0>)
 8001132:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001136:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_TIM2_Init+0xb0>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_TIM2_Init+0xb0>)
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001144:	4818      	ldr	r0, [pc, #96]	@ (80011a8 <MX_TIM2_Init+0xb0>)
 8001146:	f002 f91b 	bl	8003380 <HAL_TIM_PWM_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001150:	f000 fa3a 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	4619      	mov	r1, r3
 8001162:	4811      	ldr	r0, [pc, #68]	@ (80011a8 <MX_TIM2_Init+0xb0>)
 8001164:	f003 f828 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800116e:	f000 fa2b 	bl	80015c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001172:	2360      	movs	r3, #96	@ 0x60
 8001174:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001176:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800117a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	4619      	mov	r1, r3
 800118a:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <MX_TIM2_Init+0xb0>)
 800118c:	f002 fca4 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001196:	f000 fa17 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800119a:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <MX_TIM2_Init+0xb0>)
 800119c:	f000 fb88 	bl	80018b0 <HAL_TIM_MspPostInit>

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000017c 	.word	0x2000017c

080011ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ce:	4b22      	ldr	r3, [pc, #136]	@ (8001258 <MX_TIM3_Init+0xac>)
 80011d0:	4a22      	ldr	r2, [pc, #136]	@ (800125c <MX_TIM3_Init+0xb0>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80011d4:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <MX_TIM3_Init+0xac>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <MX_TIM3_Init+0xac>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80011e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <MX_TIM3_Init+0xac>)
 80011e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <MX_TIM3_Init+0xac>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <MX_TIM3_Init+0xac>)
 80011f0:	2280      	movs	r2, #128	@ 0x80
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011f4:	4818      	ldr	r0, [pc, #96]	@ (8001258 <MX_TIM3_Init+0xac>)
 80011f6:	f002 f8c3 	bl	8003380 <HAL_TIM_PWM_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001200:	f000 f9e2 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4619      	mov	r1, r3
 8001212:	4811      	ldr	r0, [pc, #68]	@ (8001258 <MX_TIM3_Init+0xac>)
 8001214:	f002 ffd0 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800121e:	f000 f9d3 	bl	80015c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001222:	2360      	movs	r3, #96	@ 0x60
 8001224:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001226:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800122a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	4807      	ldr	r0, [pc, #28]	@ (8001258 <MX_TIM3_Init+0xac>)
 800123c:	f002 fc4c 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001246:	f000 f9bf 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800124a:	4803      	ldr	r0, [pc, #12]	@ (8001258 <MX_TIM3_Init+0xac>)
 800124c:	f000 fb30 	bl	80018b0 <HAL_TIM_MspPostInit>

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	@ 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200001c4 	.word	0x200001c4
 800125c:	40000400 	.word	0x40000400

08001260 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	@ 0x30
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2224      	movs	r2, #36	@ 0x24
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f003 ffe6 	bl	8005240 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800127c:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <MX_TIM4_Init+0xa0>)
 800127e:	4a21      	ldr	r2, [pc, #132]	@ (8001304 <MX_TIM4_Init+0xa4>)
 8001280:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001282:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_TIM4_Init+0xa0>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <MX_TIM4_Init+0xa0>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800128e:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_TIM4_Init+0xa0>)
 8001290:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001294:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_TIM4_Init+0xa0>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <MX_TIM4_Init+0xa0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012aa:	2301      	movs	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012ba:	2301      	movs	r3, #1
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	@ (8001300 <MX_TIM4_Init+0xa0>)
 80012ce:	f002 f9df 	bl	8003690 <HAL_TIM_Encoder_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80012d8:	f000 f976 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	@ (8001300 <MX_TIM4_Init+0xa0>)
 80012ea:	f002 ff65 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80012f4:	f000 f968 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3730      	adds	r7, #48	@ 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000020c 	.word	0x2000020c
 8001304:	40000800 	.word	0x40000800

08001308 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	@ 0x30
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2224      	movs	r2, #36	@ 0x24
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f003 ff92 	bl	8005240 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001324:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <MX_TIM5_Init+0xa0>)
 8001326:	4a21      	ldr	r2, [pc, #132]	@ (80013ac <MX_TIM5_Init+0xa4>)
 8001328:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800132a:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <MX_TIM5_Init+0xa0>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <MX_TIM5_Init+0xa0>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_TIM5_Init+0xa0>)
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_TIM5_Init+0xa0>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <MX_TIM5_Init+0xa0>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800134a:	2301      	movs	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001352:	2301      	movs	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001362:	2301      	movs	r3, #1
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4619      	mov	r1, r3
 8001374:	480c      	ldr	r0, [pc, #48]	@ (80013a8 <MX_TIM5_Init+0xa0>)
 8001376:	f002 f98b 	bl	8003690 <HAL_TIM_Encoder_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001380:	f000 f922 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_TIM5_Init+0xa0>)
 8001392:	f002 ff11 	bl	80041b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800139c:	f000 f914 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	3730      	adds	r7, #48	@ 0x30
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000254 	.word	0x20000254
 80013ac:	40000c00 	.word	0x40000c00

080013b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b4:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <MX_USART2_UART_Init+0x50>)
 80013b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80013ba:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013bc:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80013c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013e8:	f002 ff76 	bl	80042d8 <HAL_UART_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013f2:	f000 f8e9 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000029c 	.word	0x2000029c
 8001400:	40004400 	.word	0x40004400

08001404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	4b52      	ldr	r3, [pc, #328]	@ (8001568 <MX_GPIO_Init+0x164>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a51      	ldr	r2, [pc, #324]	@ (8001568 <MX_GPIO_Init+0x164>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b4f      	ldr	r3, [pc, #316]	@ (8001568 <MX_GPIO_Init+0x164>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	4b4b      	ldr	r3, [pc, #300]	@ (8001568 <MX_GPIO_Init+0x164>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a4a      	ldr	r2, [pc, #296]	@ (8001568 <MX_GPIO_Init+0x164>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b48      	ldr	r3, [pc, #288]	@ (8001568 <MX_GPIO_Init+0x164>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b44      	ldr	r3, [pc, #272]	@ (8001568 <MX_GPIO_Init+0x164>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a43      	ldr	r2, [pc, #268]	@ (8001568 <MX_GPIO_Init+0x164>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b41      	ldr	r3, [pc, #260]	@ (8001568 <MX_GPIO_Init+0x164>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b3d      	ldr	r3, [pc, #244]	@ (8001568 <MX_GPIO_Init+0x164>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a3c      	ldr	r2, [pc, #240]	@ (8001568 <MX_GPIO_Init+0x164>)
 8001478:	f043 0310 	orr.w	r3, r3, #16
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b3a      	ldr	r3, [pc, #232]	@ (8001568 <MX_GPIO_Init+0x164>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	4b36      	ldr	r3, [pc, #216]	@ (8001568 <MX_GPIO_Init+0x164>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a35      	ldr	r2, [pc, #212]	@ (8001568 <MX_GPIO_Init+0x164>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b33      	ldr	r3, [pc, #204]	@ (8001568 <MX_GPIO_Init+0x164>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001568 <MX_GPIO_Init+0x164>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a2e      	ldr	r2, [pc, #184]	@ (8001568 <MX_GPIO_Init+0x164>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001568 <MX_GPIO_Init+0x164>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Work_permit_GPIO_Port, Work_permit_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2102      	movs	r1, #2
 80014c6:	4829      	ldr	r0, [pc, #164]	@ (800156c <MX_GPIO_Init+0x168>)
 80014c8:	f001 faa8 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_AZ_Pin|DIR_EL_Pin|Trigger_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 510c 	mov.w	r1, #8960	@ 0x2300
 80014d2:	4827      	ldr	r0, [pc, #156]	@ (8001570 <MX_GPIO_Init+0x16c>)
 80014d4:	f001 faa2 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ENA_AZ_Pin|ENA_EL_Pin, GPIO_PIN_SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80014de:	4824      	ldr	r0, [pc, #144]	@ (8001570 <MX_GPIO_Init+0x16c>)
 80014e0:	f001 fa9c 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_green_Pin|LD3_orange_Pin|LD5_red_Pin|LD6_blue_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80014ea:	4822      	ldr	r0, [pc, #136]	@ (8001574 <MX_GPIO_Init+0x170>)
 80014ec:	f001 fa96 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Trigger_position_Pin */
  GPIO_InitStruct.Pin = Trigger_position_Pin;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Trigger_position_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	481a      	ldr	r0, [pc, #104]	@ (800156c <MX_GPIO_Init+0x168>)
 8001504:	f001 f8ee 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Work_permit_Pin */
  GPIO_InitStruct.Pin = Work_permit_Pin;
 8001508:	2302      	movs	r3, #2
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Work_permit_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4813      	ldr	r0, [pc, #76]	@ (800156c <MX_GPIO_Init+0x168>)
 8001520:	f001 f8e0 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_AZ_Pin DIR_EL_Pin ENA_AZ_Pin ENA_EL_Pin
                           Trigger_Pin */
  GPIO_InitStruct.Pin = DIR_AZ_Pin|DIR_EL_Pin|ENA_AZ_Pin|ENA_EL_Pin
 8001524:	f44f 536c 	mov.w	r3, #15104	@ 0x3b00
 8001528:	61fb      	str	r3, [r7, #28]
                          |Trigger_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152a:	2301      	movs	r3, #1
 800152c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <MX_GPIO_Init+0x16c>)
 800153e:	f001 f8d1 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_green_Pin LD3_orange_Pin LD5_red_Pin LD6_blue_Pin */
  GPIO_InitStruct.Pin = LD4_green_Pin|LD3_orange_Pin|LD5_red_Pin|LD6_blue_Pin;
 8001542:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	@ (8001574 <MX_GPIO_Init+0x170>)
 800155c:	f001 f8c2 	bl	80026e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001560:	bf00      	nop
 8001562:	3730      	adds	r7, #48	@ 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40020800 	.word	0x40020800
 8001570:	40021000 	.word	0x40021000
 8001574:	40020c00 	.word	0x40020c00

08001578 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	Data_parsing();
 8001580:	f7ff f9da 	bl	8000938 <Data_parsing>

	HAL_UART_Receive_IT(&huart2, (uint8_t*)Target.Rx_data, Size_Rx_UART);
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_UART_RxCpltCallback+0x24>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	4904      	ldr	r1, [pc, #16]	@ (80015a0 <HAL_UART_RxCpltCallback+0x28>)
 800158e:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <HAL_UART_RxCpltCallback+0x2c>)
 8001590:	f002 ff28 	bl	80043e4 <HAL_UART_Receive_IT>
};
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200002e4 	.word	0x200002e4
 80015a0:	20000095 	.word	0x20000095
 80015a4:	2000029c 	.word	0x2000029c

080015a8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
    Target.transmitting = 0;
 80015b0:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <HAL_UART_TxCpltCallback+0x1c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	711a      	strb	r2, [r3, #4]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000090 	.word	0x20000090

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <Error_Handler+0x8>

080015d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <HAL_MspInit+0x4c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001620 <HAL_MspInit+0x4c>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	4a08      	ldr	r2, [pc, #32]	@ (8001620 <HAL_MspInit+0x4c>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	@ 0x40
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	@ 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a36      	ldr	r2, [pc, #216]	@ (800171c <HAL_ADC_MspInit+0xf8>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d130      	bne.n	80016a8 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	4b35      	ldr	r3, [pc, #212]	@ (8001720 <HAL_ADC_MspInit+0xfc>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	4a34      	ldr	r2, [pc, #208]	@ (8001720 <HAL_ADC_MspInit+0xfc>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001654:	6453      	str	r3, [r2, #68]	@ 0x44
 8001656:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <HAL_ADC_MspInit+0xfc>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	4b2e      	ldr	r3, [pc, #184]	@ (8001720 <HAL_ADC_MspInit+0xfc>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a2d      	ldr	r2, [pc, #180]	@ (8001720 <HAL_ADC_MspInit+0xfc>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <HAL_ADC_MspInit+0xfc>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ADC_AZ_Pin;
 800167e:	2310      	movs	r3, #16
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001682:	2303      	movs	r3, #3
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_AZ_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	4824      	ldr	r0, [pc, #144]	@ (8001724 <HAL_ADC_MspInit+0x100>)
 8001692:	f001 f827 	bl	80026e4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	2012      	movs	r0, #18
 800169c:	f000 ff59 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016a0:	2012      	movs	r0, #18
 80016a2:	f000 ff72 	bl	800258a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80016a6:	e034      	b.n	8001712 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001728 <HAL_ADC_MspInit+0x104>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d12f      	bne.n	8001712 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <HAL_ADC_MspInit+0xfc>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <HAL_ADC_MspInit+0xfc>)
 80016bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <HAL_ADC_MspInit+0xfc>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <HAL_ADC_MspInit+0xfc>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <HAL_ADC_MspInit+0xfc>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <HAL_ADC_MspInit+0xfc>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_EL_Pin;
 80016ea:	2320      	movs	r3, #32
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ee:	2303      	movs	r3, #3
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_EL_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	4809      	ldr	r0, [pc, #36]	@ (8001724 <HAL_ADC_MspInit+0x100>)
 80016fe:	f000 fff1 	bl	80026e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2012      	movs	r0, #18
 8001708:	f000 ff23 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800170c:	2012      	movs	r0, #18
 800170e:	f000 ff3c 	bl	800258a <HAL_NVIC_EnableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3730      	adds	r7, #48	@ 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40012000 	.word	0x40012000
 8001720:	40023800 	.word	0x40023800
 8001724:	40020800 	.word	0x40020800
 8001728:	40012100 	.word	0x40012100

0800172c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800173c:	d116      	bne.n	800176c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <HAL_TIM_PWM_MspInit+0x80>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <HAL_TIM_PWM_MspInit+0x80>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6413      	str	r3, [r2, #64]	@ 0x40
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_TIM_PWM_MspInit+0x80>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	201c      	movs	r0, #28
 8001760:	f000 fef7 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001764:	201c      	movs	r0, #28
 8001766:	f000 ff10 	bl	800258a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800176a:	e01a      	b.n	80017a2 <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0f      	ldr	r2, [pc, #60]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x84>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d115      	bne.n	80017a2 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <HAL_TIM_PWM_MspInit+0x80>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	4a0b      	ldr	r2, [pc, #44]	@ (80017ac <HAL_TIM_PWM_MspInit+0x80>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6413      	str	r3, [r2, #64]	@ 0x40
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_TIM_PWM_MspInit+0x80>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	201d      	movs	r0, #29
 8001798:	f000 fedb 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800179c:	201d      	movs	r0, #29
 800179e:	f000 fef4 	bl	800258a <HAL_NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40000400 	.word	0x40000400

080017b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	@ 0x30
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a32      	ldr	r2, [pc, #200]	@ (800189c <HAL_TIM_Encoder_MspInit+0xe8>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d12c      	bne.n	8001830 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	4b31      	ldr	r3, [pc, #196]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	4a30      	ldr	r2, [pc, #192]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e6:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	4b2a      	ldr	r3, [pc, #168]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a29      	ldr	r2, [pc, #164]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xec>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_EL_A_Pin|Encoder_EL_B_Pin;
 800180e:	23c0      	movs	r3, #192	@ 0xc0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800181e:	2302      	movs	r3, #2
 8001820:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	481e      	ldr	r0, [pc, #120]	@ (80018a4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800182a:	f000 ff5b 	bl	80026e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800182e:	e030      	b.n	8001892 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1c      	ldr	r2, [pc, #112]	@ (80018a8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d12b      	bne.n	8001892 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a17      	ldr	r2, [pc, #92]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xec>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a10      	ldr	r2, [pc, #64]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <HAL_TIM_Encoder_MspInit+0xec>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_AZ_A_Pin|Encoder_AZ_B_Pin;
 8001872:	2303      	movs	r3, #3
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001882:	2302      	movs	r3, #2
 8001884:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	4807      	ldr	r0, [pc, #28]	@ (80018ac <HAL_TIM_Encoder_MspInit+0xf8>)
 800188e:	f000 ff29 	bl	80026e4 <HAL_GPIO_Init>
}
 8001892:	bf00      	nop
 8001894:	3730      	adds	r7, #48	@ 0x30
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40000800 	.word	0x40000800
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40000c00 	.word	0x40000c00
 80018ac:	40020000 	.word	0x40020000

080018b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	@ 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d0:	d11e      	bne.n	8001910 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_TIM_MspPostInit+0xb0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a21      	ldr	r2, [pc, #132]	@ (8001960 <HAL_TIM_MspPostInit+0xb0>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001960 <HAL_TIM_MspPostInit+0xb0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM_EL_Pin;
 80018ee:	2320      	movs	r3, #32
 80018f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018fe:	2301      	movs	r3, #1
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM_EL_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	4619      	mov	r1, r3
 8001908:	4816      	ldr	r0, [pc, #88]	@ (8001964 <HAL_TIM_MspPostInit+0xb4>)
 800190a:	f000 feeb 	bl	80026e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800190e:	e022      	b.n	8001956 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <HAL_TIM_MspPostInit+0xb8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d11d      	bne.n	8001956 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <HAL_TIM_MspPostInit+0xb0>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a0f      	ldr	r2, [pc, #60]	@ (8001960 <HAL_TIM_MspPostInit+0xb0>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <HAL_TIM_MspPostInit+0xb0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_AZ_Pin;
 8001936:	2340      	movs	r3, #64	@ 0x40
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001946:	2302      	movs	r3, #2
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(TIM_AZ_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4804      	ldr	r0, [pc, #16]	@ (8001964 <HAL_TIM_MspPostInit+0xb4>)
 8001952:	f000 fec7 	bl	80026e4 <HAL_GPIO_Init>
}
 8001956:	bf00      	nop
 8001958:	3728      	adds	r7, #40	@ 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000
 8001968:	40000400 	.word	0x40000400

0800196c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	@ 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1d      	ldr	r2, [pc, #116]	@ (8001a00 <HAL_UART_MspInit+0x94>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d133      	bne.n	80019f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b1c      	ldr	r3, [pc, #112]	@ (8001a04 <HAL_UART_MspInit+0x98>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	4a1b      	ldr	r2, [pc, #108]	@ (8001a04 <HAL_UART_MspInit+0x98>)
 8001998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800199c:	6413      	str	r3, [r2, #64]	@ 0x40
 800199e:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <HAL_UART_MspInit+0x98>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <HAL_UART_MspInit+0x98>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a14      	ldr	r2, [pc, #80]	@ (8001a04 <HAL_UART_MspInit+0x98>)
 80019b4:	f043 0308 	orr.w	r3, r3, #8
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_UART_MspInit+0x98>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019c6:	2360      	movs	r3, #96	@ 0x60
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019d6:	2307      	movs	r3, #7
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4809      	ldr	r0, [pc, #36]	@ (8001a08 <HAL_UART_MspInit+0x9c>)
 80019e2:	f000 fe7f 	bl	80026e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	2026      	movs	r0, #38	@ 0x26
 80019ec:	f000 fdb1 	bl	8002552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019f0:	2026      	movs	r0, #38	@ 0x26
 80019f2:	f000 fdca 	bl	800258a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	@ 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40004400 	.word	0x40004400
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020c00 	.word	0x40020c00

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <NMI_Handler+0x4>

08001a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <MemManage_Handler+0x4>

08001a24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a62:	f000 f8bd 	bl	8001be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a70:	4803      	ldr	r0, [pc, #12]	@ (8001a80 <ADC_IRQHandler+0x14>)
 8001a72:	f000 f93c 	bl	8001cee <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001a76:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <ADC_IRQHandler+0x18>)
 8001a78:	f000 f939 	bl	8001cee <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200000ec 	.word	0x200000ec
 8001a84:	20000134 	.word	0x20000134

08001a88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <TIM2_IRQHandler+0x10>)
 8001a8e:	f001 ff33 	bl	80038f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000017c 	.word	0x2000017c

08001a9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <TIM3_IRQHandler+0x10>)
 8001aa2:	f001 ff29 	bl	80038f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200001c4 	.word	0x200001c4

08001ab0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <USART2_IRQHandler+0x10>)
 8001ab6:	f002 fcbb 	bl	8004430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2000029c 	.word	0x2000029c

08001ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <SystemInit+0x20>)
 8001aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ace:	4a05      	ldr	r2, [pc, #20]	@ (8001ae4 <SystemInit+0x20>)
 8001ad0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ad4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack     /* set stack pointer */
 8001ae8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001aec:	f7ff ffea 	bl	8001ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af0:	480c      	ldr	r0, [pc, #48]	@ (8001b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001af2:	490d      	ldr	r1, [pc, #52]	@ (8001b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b08:	4c0a      	ldr	r4, [pc, #40]	@ (8001b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b16:	f003 fb9b 	bl	8005250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1a:	f7ff f945 	bl	8000da8 <main>
  bx  lr    
 8001b1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b28:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001b2c:	080052d8 	.word	0x080052d8
  ldr r2, =_sbss
 8001b30:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001b34:	200002f0 	.word	0x200002f0

08001b38 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b38:	e7fe      	b.n	8001b38 <CAN1_RX0_IRQHandler>
	...

08001b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b40:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0d      	ldr	r2, [pc, #52]	@ (8001b7c <HAL_Init+0x40>)
 8001b46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <HAL_Init+0x40>)
 8001b52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a07      	ldr	r2, [pc, #28]	@ (8001b7c <HAL_Init+0x40>)
 8001b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f000 fce9 	bl	800253c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6a:	200f      	movs	r0, #15
 8001b6c:	f000 f808 	bl	8001b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b70:	f7ff fd30 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023c00 	.word	0x40023c00

08001b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_InitTick+0x54>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <HAL_InitTick+0x58>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fd01 	bl	80025a6 <HAL_SYSTICK_Config>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00e      	b.n	8001bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b0f      	cmp	r3, #15
 8001bb2:	d80a      	bhi.n	8001bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f000 fcc9 	bl	8002552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc0:	4a06      	ldr	r2, [pc, #24]	@ (8001bdc <HAL_InitTick+0x5c>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e000      	b.n	8001bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200000c4 	.word	0x200000c4
 8001bd8:	200000cc 	.word	0x200000cc
 8001bdc:	200000c8 	.word	0x200000c8

08001be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_IncTick+0x20>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_IncTick+0x24>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <HAL_IncTick+0x24>)
 8001bf2:	6013      	str	r3, [r2, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	200000cc 	.word	0x200000cc
 8001c04:	200002ec 	.word	0x200002ec

08001c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <HAL_GetTick+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	200002ec 	.word	0x200002ec

08001c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c28:	f7ff ffee 	bl	8001c08 <HAL_GetTick>
 8001c2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c38:	d005      	beq.n	8001c46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <HAL_Delay+0x44>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c46:	bf00      	nop
 8001c48:	f7ff ffde 	bl	8001c08 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d8f7      	bhi.n	8001c48 <HAL_Delay+0x28>
  {
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200000cc 	.word	0x200000cc

08001c68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e033      	b.n	8001ce6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fccc 	bl	8001624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d118      	bne.n	8001cd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cae:	f023 0302 	bic.w	r3, r3, #2
 8001cb2:	f043 0202 	orr.w	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fa68 	bl	8002190 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	f023 0303 	bic.w	r3, r3, #3
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cd6:	e001      	b.n	8001cdc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d049      	beq.n	8001db8 <HAL_ADC_IRQHandler+0xca>
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d046      	beq.n	8001db8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d105      	bne.n	8001d42 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d12b      	bne.n	8001da8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d127      	bne.n	8001da8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d119      	bne.n	8001da8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0220 	bic.w	r2, r2, #32
 8001d82:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f8b0 	bl	8001f0e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f06f 0212 	mvn.w	r2, #18
 8001db6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d057      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x190>
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d054      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d105      	bne.n	8001dec <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d139      	bne.n	8001e6e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e00:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d12b      	bne.n	8001e6e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d124      	bne.n	8001e6e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d11d      	bne.n	8001e6e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d119      	bne.n	8001e6e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e48:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d105      	bne.n	8001e6e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f043 0201 	orr.w	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fa8a 	bl	8002388 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 020c 	mvn.w	r2, #12
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e8c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d017      	beq.n	8001ec4 <HAL_ADC_IRQHandler+0x1d6>
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d014      	beq.n	8001ec4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d10d      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f834 	bl	8001f22 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f06f 0201 	mvn.w	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ed2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d015      	beq.n	8001f06 <HAL_ADC_IRQHandler+0x218>
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d012      	beq.n	8001f06 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee4:	f043 0202 	orr.w	r2, r3, #2
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0220 	mvn.w	r2, #32
 8001ef4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f81d 	bl	8001f36 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0220 	mvn.w	r2, #32
 8001f04:	601a      	str	r2, [r3, #0]
  }
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1c>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e105      	b.n	8002174 <HAL_ADC_ConfigChannel+0x228>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b09      	cmp	r3, #9
 8001f76:	d925      	bls.n	8001fc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68d9      	ldr	r1, [r3, #12]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3b1e      	subs	r3, #30
 8001f8e:	2207      	movs	r2, #7
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43da      	mvns	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	400a      	ands	r2, r1
 8001f9c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68d9      	ldr	r1, [r3, #12]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4403      	add	r3, r0
 8001fb6:	3b1e      	subs	r3, #30
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	e022      	b.n	800200a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6919      	ldr	r1, [r3, #16]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	2207      	movs	r2, #7
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6919      	ldr	r1, [r3, #16]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4403      	add	r3, r0
 8002000:	409a      	lsls	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b06      	cmp	r3, #6
 8002010:	d824      	bhi.n	800205c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	3b05      	subs	r3, #5
 8002024:	221f      	movs	r2, #31
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43da      	mvns	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	400a      	ands	r2, r1
 8002032:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	4618      	mov	r0, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3b05      	subs	r3, #5
 800204e:	fa00 f203 	lsl.w	r2, r0, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	635a      	str	r2, [r3, #52]	@ 0x34
 800205a:	e04c      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d824      	bhi.n	80020ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3b23      	subs	r3, #35	@ 0x23
 8002076:	221f      	movs	r2, #31
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43da      	mvns	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	400a      	ands	r2, r1
 8002084:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	4618      	mov	r0, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	3b23      	subs	r3, #35	@ 0x23
 80020a0:	fa00 f203 	lsl.w	r2, r0, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80020ac:	e023      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	3b41      	subs	r3, #65	@ 0x41
 80020c0:	221f      	movs	r2, #31
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	400a      	ands	r2, r1
 80020ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	4618      	mov	r0, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	3b41      	subs	r3, #65	@ 0x41
 80020ea:	fa00 f203 	lsl.w	r2, r0, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020f6:	4b22      	ldr	r3, [pc, #136]	@ (8002180 <HAL_ADC_ConfigChannel+0x234>)
 80020f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a21      	ldr	r2, [pc, #132]	@ (8002184 <HAL_ADC_ConfigChannel+0x238>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d109      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1cc>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b12      	cmp	r3, #18
 800210a:	d105      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a19      	ldr	r2, [pc, #100]	@ (8002184 <HAL_ADC_ConfigChannel+0x238>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d123      	bne.n	800216a <HAL_ADC_ConfigChannel+0x21e>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b10      	cmp	r3, #16
 8002128:	d003      	beq.n	8002132 <HAL_ADC_ConfigChannel+0x1e6>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b11      	cmp	r3, #17
 8002130:	d11b      	bne.n	800216a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b10      	cmp	r3, #16
 8002144:	d111      	bne.n	800216a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002146:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <HAL_ADC_ConfigChannel+0x23c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a10      	ldr	r2, [pc, #64]	@ (800218c <HAL_ADC_ConfigChannel+0x240>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	0c9a      	lsrs	r2, r3, #18
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800215c:	e002      	b.n	8002164 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	3b01      	subs	r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f9      	bne.n	800215e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40012300 	.word	0x40012300
 8002184:	40012000 	.word	0x40012000
 8002188:	200000c4 	.word	0x200000c4
 800218c:	431bde83 	.word	0x431bde83

08002190 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002198:	4b79      	ldr	r3, [pc, #484]	@ (8002380 <ADC_Init+0x1f0>)
 800219a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	021a      	lsls	r2, r3, #8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800220a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6899      	ldr	r1, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	4a58      	ldr	r2, [pc, #352]	@ (8002384 <ADC_Init+0x1f4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d022      	beq.n	800226e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002236:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6899      	ldr	r1, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	e00f      	b.n	800228e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800227c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800228c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0202 	bic.w	r2, r2, #2
 800229c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6899      	ldr	r1, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7e1b      	ldrb	r3, [r3, #24]
 80022a8:	005a      	lsls	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01b      	beq.n	80022f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80022da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6859      	ldr	r1, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	3b01      	subs	r3, #1
 80022e8:	035a      	lsls	r2, r3, #13
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	e007      	b.n	8002304 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002302:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002312:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	3b01      	subs	r3, #1
 8002320:	051a      	lsls	r2, r3, #20
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6899      	ldr	r1, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002346:	025a      	lsls	r2, r3, #9
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800235e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	029a      	lsls	r2, r3, #10
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	40012300 	.word	0x40012300
 8002384:	0f000001 	.word	0x0f000001

08002388 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ac:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023b8:	4013      	ands	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ce:	4a04      	ldr	r2, [pc, #16]	@ (80023e0 <__NVIC_SetPriorityGrouping+0x44>)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	60d3      	str	r3, [r2, #12]
}
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e8:	4b04      	ldr	r3, [pc, #16]	@ (80023fc <__NVIC_GetPriorityGrouping+0x18>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	0a1b      	lsrs	r3, r3, #8
 80023ee:	f003 0307 	and.w	r3, r3, #7
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	2b00      	cmp	r3, #0
 8002410:	db0b      	blt.n	800242a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f003 021f 	and.w	r2, r3, #31
 8002418:	4907      	ldr	r1, [pc, #28]	@ (8002438 <__NVIC_EnableIRQ+0x38>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2001      	movs	r0, #1
 8002422:	fa00 f202 	lsl.w	r2, r0, r2
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000e100 	.word	0xe000e100

0800243c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	db0a      	blt.n	8002466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	490c      	ldr	r1, [pc, #48]	@ (8002488 <__NVIC_SetPriority+0x4c>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	440b      	add	r3, r1
 8002460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002464:	e00a      	b.n	800247c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4908      	ldr	r1, [pc, #32]	@ (800248c <__NVIC_SetPriority+0x50>)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3b04      	subs	r3, #4
 8002474:	0112      	lsls	r2, r2, #4
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	440b      	add	r3, r1
 800247a:	761a      	strb	r2, [r3, #24]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000e100 	.word	0xe000e100
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	@ 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f1c3 0307 	rsb	r3, r3, #7
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	bf28      	it	cs
 80024ae:	2304      	movcs	r3, #4
 80024b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d902      	bls.n	80024c0 <NVIC_EncodePriority+0x30>
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3b03      	subs	r3, #3
 80024be:	e000      	b.n	80024c2 <NVIC_EncodePriority+0x32>
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	401a      	ands	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43d9      	mvns	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	4313      	orrs	r3, r2
         );
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3724      	adds	r7, #36	@ 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002508:	d301      	bcc.n	800250e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250a:	2301      	movs	r3, #1
 800250c:	e00f      	b.n	800252e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250e:	4a0a      	ldr	r2, [pc, #40]	@ (8002538 <SysTick_Config+0x40>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002516:	210f      	movs	r1, #15
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f7ff ff8e 	bl	800243c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002520:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <SysTick_Config+0x40>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002526:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <SysTick_Config+0x40>)
 8002528:	2207      	movs	r2, #7
 800252a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	e000e010 	.word	0xe000e010

0800253c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff29 	bl	800239c <__NVIC_SetPriorityGrouping>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
 800255e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002564:	f7ff ff3e 	bl	80023e4 <__NVIC_GetPriorityGrouping>
 8002568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7ff ff8e 	bl	8002490 <NVIC_EncodePriority>
 8002574:	4602      	mov	r2, r0
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff5d 	bl	800243c <__NVIC_SetPriority>
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff31 	bl	8002400 <__NVIC_EnableIRQ>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ffa2 	bl	80024f8 <SysTick_Config>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025cc:	f7ff fb1c 	bl	8001c08 <HAL_GetTick>
 80025d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d008      	beq.n	80025f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2280      	movs	r2, #128	@ 0x80
 80025e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e052      	b.n	8002696 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0216 	bic.w	r2, r2, #22
 80025fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800260e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <HAL_DMA_Abort+0x62>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0208 	bic.w	r2, r2, #8
 800262e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0201 	bic.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002640:	e013      	b.n	800266a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002642:	f7ff fae1 	bl	8001c08 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b05      	cmp	r3, #5
 800264e:	d90c      	bls.n	800266a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2203      	movs	r2, #3
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e015      	b.n	8002696 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e4      	bne.n	8002642 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	223f      	movs	r2, #63	@ 0x3f
 800267e:	409a      	lsls	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2280      	movs	r2, #128	@ 0x80
 80026b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e00c      	b.n	80026d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2205      	movs	r2, #5
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	@ 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e16b      	b.n	80029d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 815a 	bne.w	80029d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d005      	beq.n	8002736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002732:	2b02      	cmp	r3, #2
 8002734:	d130      	bne.n	8002798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 0201 	and.w	r2, r3, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d017      	beq.n	80027d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d123      	bne.n	8002828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3208      	adds	r2, #8
 80027e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	08da      	lsrs	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	69b9      	ldr	r1, [r7, #24]
 8002824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0203 	and.w	r2, r3, #3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80b4 	beq.w	80029d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b60      	ldr	r3, [pc, #384]	@ (80029f0 <HAL_GPIO_Init+0x30c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	4a5f      	ldr	r2, [pc, #380]	@ (80029f0 <HAL_GPIO_Init+0x30c>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002878:	6453      	str	r3, [r2, #68]	@ 0x44
 800287a:	4b5d      	ldr	r3, [pc, #372]	@ (80029f0 <HAL_GPIO_Init+0x30c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002886:	4a5b      	ldr	r2, [pc, #364]	@ (80029f4 <HAL_GPIO_Init+0x310>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a52      	ldr	r2, [pc, #328]	@ (80029f8 <HAL_GPIO_Init+0x314>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02b      	beq.n	800290a <HAL_GPIO_Init+0x226>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a51      	ldr	r2, [pc, #324]	@ (80029fc <HAL_GPIO_Init+0x318>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d025      	beq.n	8002906 <HAL_GPIO_Init+0x222>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a50      	ldr	r2, [pc, #320]	@ (8002a00 <HAL_GPIO_Init+0x31c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01f      	beq.n	8002902 <HAL_GPIO_Init+0x21e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002a04 <HAL_GPIO_Init+0x320>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0x21a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002a08 <HAL_GPIO_Init+0x324>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_Init+0x216>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4d      	ldr	r2, [pc, #308]	@ (8002a0c <HAL_GPIO_Init+0x328>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x212>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002a10 <HAL_GPIO_Init+0x32c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002a14 <HAL_GPIO_Init+0x330>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x20a>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e00e      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028ee:	2308      	movs	r3, #8
 80028f0:	e00c      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e00a      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f6:	2305      	movs	r3, #5
 80028f8:	e008      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fa:	2304      	movs	r3, #4
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fe:	2303      	movs	r3, #3
 8002900:	e004      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002902:	2302      	movs	r3, #2
 8002904:	e002      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_GPIO_Init+0x228>
 800290a:	2300      	movs	r3, #0
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f002 0203 	and.w	r2, r2, #3
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4093      	lsls	r3, r2
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800291c:	4935      	ldr	r1, [pc, #212]	@ (80029f4 <HAL_GPIO_Init+0x310>)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294e:	4a32      	ldr	r2, [pc, #200]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002954:	4b30      	ldr	r3, [pc, #192]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002978:	4a27      	ldr	r2, [pc, #156]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800297e:	4b26      	ldr	r3, [pc, #152]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029cc:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <HAL_GPIO_Init+0x334>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	f67f ae90 	bls.w	8002700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3724      	adds	r7, #36	@ 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40013800 	.word	0x40013800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40021400 	.word	0x40021400
 8002a10:	40021800 	.word	0x40021800
 8002a14:	40021c00 	.word	0x40021c00
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a38:	e003      	b.n	8002a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	619a      	str	r2, [r3, #24]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e267      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d075      	beq.n	8002b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a6e:	4b88      	ldr	r3, [pc, #544]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d00c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b85      	ldr	r3, [pc, #532]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d112      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b82      	ldr	r3, [pc, #520]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b7e      	ldr	r3, [pc, #504]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05b      	beq.n	8002b58 <HAL_RCC_OscConfig+0x108>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e242      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x74>
 8002ab6:	4b76      	ldr	r3, [pc, #472]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x98>
 8002ace:	4b70      	ldr	r3, [pc, #448]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6f      	ldr	r2, [pc, #444]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6d      	ldr	r3, [pc, #436]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6c      	ldr	r2, [pc, #432]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ae8:	4b69      	ldr	r3, [pc, #420]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a68      	ldr	r2, [pc, #416]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b66      	ldr	r3, [pc, #408]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a65      	ldr	r2, [pc, #404]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7ff f87e 	bl	8001c08 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7ff f87a 	bl	8001c08 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e207      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5b      	ldr	r3, [pc, #364]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xc0>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7ff f86a 	bl	8001c08 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7ff f866 	bl	8001c08 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	@ 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1f3      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b51      	ldr	r3, [pc, #324]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0xe8>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b66:	4b4a      	ldr	r3, [pc, #296]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b44      	ldr	r3, [pc, #272]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b41      	ldr	r3, [pc, #260]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1c7      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4937      	ldr	r1, [pc, #220]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b34      	ldr	r3, [pc, #208]	@ (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7ff f81f 	bl	8001c08 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bce:	f7ff f81b 	bl	8001c08 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1a8      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4925      	ldr	r1, [pc, #148]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b24      	ldr	r3, [pc, #144]	@ (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fffe 	bl	8001c08 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fffa 	bl	8001c08 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e187      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d036      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe ffde 	bl	8001c08 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe ffda 	bl	8001c08 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e167      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x200>
 8002c6e:	e01b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe ffc7 	bl	8001c08 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe ffc3 	bl	8001c08 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d907      	bls.n	8002c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e150      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b88      	ldr	r3, [pc, #544]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ea      	bne.n	8002c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8097 	beq.w	8002de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b81      	ldr	r3, [pc, #516]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b7d      	ldr	r3, [pc, #500]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	4a7c      	ldr	r2, [pc, #496]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b77      	ldr	r3, [pc, #476]	@ (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b74      	ldr	r3, [pc, #464]	@ (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a73      	ldr	r2, [pc, #460]	@ (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe ff83 	bl	8001c08 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fe ff7f 	bl	8001c08 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e10c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2ea>
 8002d2c:	4b64      	ldr	r3, [pc, #400]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d30:	4a63      	ldr	r2, [pc, #396]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x30c>
 8002d42:	4b5f      	ldr	r3, [pc, #380]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	4a5e      	ldr	r2, [pc, #376]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d52:	4a5b      	ldr	r2, [pc, #364]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d5c:	4b58      	ldr	r3, [pc, #352]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	4a57      	ldr	r2, [pc, #348]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d68:	4b55      	ldr	r3, [pc, #340]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6c:	4a54      	ldr	r2, [pc, #336]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe ff44 	bl	8001c08 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe ff40 	bl	8001c08 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0cb      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b49      	ldr	r3, [pc, #292]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCC_OscConfig+0x334>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7fe ff2e 	bl	8001c08 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe ff2a 	bl	8001c08 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0b5      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	4a38      	ldr	r2, [pc, #224]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a1 	beq.w	8002f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dee:	4b34      	ldr	r3, [pc, #208]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d05c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d141      	bne.n	8002e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b31      	ldr	r3, [pc, #196]	@ (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe fefe 	bl	8001c08 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fefa 	bl	8001c08 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e087      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b27      	ldr	r3, [pc, #156]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	491b      	ldr	r1, [pc, #108]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe fed3 	bl	8001c08 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fe fecf 	bl	8001c08 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e05c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e78:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x416>
 8002e84:	e054      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe febc 	bl	8001c08 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe feb8 	bl	8001c08 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e045      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x444>
 8002eb2:	e03d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e038      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <HAL_RCC_OscConfig+0x4ec>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d028      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d121      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d11a      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d111      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	3b01      	subs	r3, #1
 8002f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0cc      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b68      	ldr	r3, [pc, #416]	@ (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d90c      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b65      	ldr	r3, [pc, #404]	@ (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	@ (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a58      	ldr	r2, [pc, #352]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d044      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d119      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3b      	ldr	r3, [pc, #236]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e067      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b37      	ldr	r3, [pc, #220]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4934      	ldr	r1, [pc, #208]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fe fdea 	bl	8001c08 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe fde6 	bl	8001c08 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e04f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2b      	ldr	r3, [pc, #172]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b25      	ldr	r3, [pc, #148]	@ (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d20c      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b22      	ldr	r3, [pc, #136]	@ (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b2:	4b12      	ldr	r3, [pc, #72]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f821 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490a      	ldr	r1, [pc, #40]	@ (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	@ (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fd4a 	bl	8001b80 <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	080052b0 	.word	0x080052b0
 8003104:	200000c4 	.word	0x200000c4
 8003108:	200000c8 	.word	0x200000c8

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003110:	b094      	sub	sp, #80	@ 0x50
 8003112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003124:	4b79      	ldr	r3, [pc, #484]	@ (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d00d      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x40>
 8003130:	2b08      	cmp	r3, #8
 8003132:	f200 80e1 	bhi.w	80032f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x34>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x3a>
 800313e:	e0db      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b73      	ldr	r3, [pc, #460]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x204>)
 8003142:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003144:	e0db      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003146:	4b73      	ldr	r3, [pc, #460]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x208>)
 8003148:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800314a:	e0d8      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800314c:	4b6f      	ldr	r3, [pc, #444]	@ (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003154:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003156:	4b6d      	ldr	r3, [pc, #436]	@ (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d063      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003162:	4b6a      	ldr	r3, [pc, #424]	@ (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	099b      	lsrs	r3, r3, #6
 8003168:	2200      	movs	r2, #0
 800316a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800316c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800316e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	633b      	str	r3, [r7, #48]	@ 0x30
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	@ 0x34
 800317a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800317e:	4622      	mov	r2, r4
 8003180:	462b      	mov	r3, r5
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003190:	0150      	lsls	r0, r2, #5
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4621      	mov	r1, r4
 8003198:	1a51      	subs	r1, r2, r1
 800319a:	6139      	str	r1, [r7, #16]
 800319c:	4629      	mov	r1, r5
 800319e:	eb63 0301 	sbc.w	r3, r3, r1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b0:	4659      	mov	r1, fp
 80031b2:	018b      	lsls	r3, r1, #6
 80031b4:	4651      	mov	r1, sl
 80031b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ba:	4651      	mov	r1, sl
 80031bc:	018a      	lsls	r2, r1, #6
 80031be:	4651      	mov	r1, sl
 80031c0:	ebb2 0801 	subs.w	r8, r2, r1
 80031c4:	4659      	mov	r1, fp
 80031c6:	eb63 0901 	sbc.w	r9, r3, r1
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031de:	4690      	mov	r8, r2
 80031e0:	4699      	mov	r9, r3
 80031e2:	4623      	mov	r3, r4
 80031e4:	eb18 0303 	adds.w	r3, r8, r3
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	462b      	mov	r3, r5
 80031ec:	eb49 0303 	adc.w	r3, r9, r3
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031fe:	4629      	mov	r1, r5
 8003200:	024b      	lsls	r3, r1, #9
 8003202:	4621      	mov	r1, r4
 8003204:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003208:	4621      	mov	r1, r4
 800320a:	024a      	lsls	r2, r1, #9
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003212:	2200      	movs	r2, #0
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003216:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800321c:	f7fc ffd4 	bl	80001c8 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003228:	e058      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322a:	4b38      	ldr	r3, [pc, #224]	@ (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	2200      	movs	r2, #0
 8003232:	4618      	mov	r0, r3
 8003234:	4611      	mov	r1, r2
 8003236:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800323a:	623b      	str	r3, [r7, #32]
 800323c:	2300      	movs	r3, #0
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003240:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	0159      	lsls	r1, r3, #5
 8003252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003256:	0150      	lsls	r0, r2, #5
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4641      	mov	r1, r8
 800325e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003262:	4649      	mov	r1, r9
 8003264:	eb63 0b01 	sbc.w	fp, r3, r1
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003274:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003278:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800327c:	ebb2 040a 	subs.w	r4, r2, sl
 8003280:	eb63 050b 	sbc.w	r5, r3, fp
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	00eb      	lsls	r3, r5, #3
 800328e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003292:	00e2      	lsls	r2, r4, #3
 8003294:	4614      	mov	r4, r2
 8003296:	461d      	mov	r5, r3
 8003298:	4643      	mov	r3, r8
 800329a:	18e3      	adds	r3, r4, r3
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	464b      	mov	r3, r9
 80032a0:	eb45 0303 	adc.w	r3, r5, r3
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032b2:	4629      	mov	r1, r5
 80032b4:	028b      	lsls	r3, r1, #10
 80032b6:	4621      	mov	r1, r4
 80032b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032bc:	4621      	mov	r1, r4
 80032be:	028a      	lsls	r2, r1, #10
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032c6:	2200      	movs	r2, #0
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	61fa      	str	r2, [r7, #28]
 80032cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d0:	f7fc ff7a 	bl	80001c8 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4613      	mov	r3, r2
 80032da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	3301      	adds	r3, #1
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x204>)
 80032fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003300:	4618      	mov	r0, r3
 8003302:	3750      	adds	r7, #80	@ 0x50
 8003304:	46bd      	mov	sp, r7
 8003306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	00f42400 	.word	0x00f42400
 8003314:	007a1200 	.word	0x007a1200

08003318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b03      	ldr	r3, [pc, #12]	@ (800332c <HAL_RCC_GetHCLKFreq+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	200000c4 	.word	0x200000c4

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003334:	f7ff fff0 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0a9b      	lsrs	r3, r3, #10
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	@ (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	080052c0 	.word	0x080052c0

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800335c:	f7ff ffdc 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0b5b      	lsrs	r3, r3, #13
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	@ (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	080052c0 	.word	0x080052c0

08003380 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e041      	b.n	8003416 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe f9c0 	bl	800172c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f000 fc7e 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <HAL_TIM_PWM_Start+0x24>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e022      	b.n	800348a <HAL_TIM_PWM_Start+0x6a>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b04      	cmp	r3, #4
 8003448:	d109      	bne.n	800345e <HAL_TIM_PWM_Start+0x3e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	bf14      	ite	ne
 8003456:	2301      	movne	r3, #1
 8003458:	2300      	moveq	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	e015      	b.n	800348a <HAL_TIM_PWM_Start+0x6a>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b08      	cmp	r3, #8
 8003462:	d109      	bne.n	8003478 <HAL_TIM_PWM_Start+0x58>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e008      	b.n	800348a <HAL_TIM_PWM_Start+0x6a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e07c      	b.n	800358c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d104      	bne.n	80034a2 <HAL_TIM_PWM_Start+0x82>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a0:	e013      	b.n	80034ca <HAL_TIM_PWM_Start+0xaa>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_PWM_Start+0x92>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034b0:	e00b      	b.n	80034ca <HAL_TIM_PWM_Start+0xaa>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d104      	bne.n	80034c2 <HAL_TIM_PWM_Start+0xa2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034c0:	e003      	b.n	80034ca <HAL_TIM_PWM_Start+0xaa>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2201      	movs	r2, #1
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fe4a 	bl	800416c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003594 <HAL_TIM_PWM_Start+0x174>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_TIM_PWM_Start+0xcc>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003598 <HAL_TIM_PWM_Start+0x178>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_TIM_PWM_Start+0xd0>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_TIM_PWM_Start+0xd2>
 80034f0:	2300      	movs	r3, #0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003504:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a22      	ldr	r2, [pc, #136]	@ (8003594 <HAL_TIM_PWM_Start+0x174>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d022      	beq.n	8003556 <HAL_TIM_PWM_Start+0x136>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003518:	d01d      	beq.n	8003556 <HAL_TIM_PWM_Start+0x136>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1f      	ldr	r2, [pc, #124]	@ (800359c <HAL_TIM_PWM_Start+0x17c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d018      	beq.n	8003556 <HAL_TIM_PWM_Start+0x136>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1d      	ldr	r2, [pc, #116]	@ (80035a0 <HAL_TIM_PWM_Start+0x180>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_TIM_PWM_Start+0x136>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1c      	ldr	r2, [pc, #112]	@ (80035a4 <HAL_TIM_PWM_Start+0x184>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00e      	beq.n	8003556 <HAL_TIM_PWM_Start+0x136>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a16      	ldr	r2, [pc, #88]	@ (8003598 <HAL_TIM_PWM_Start+0x178>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_TIM_PWM_Start+0x136>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_TIM_PWM_Start+0x188>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_TIM_PWM_Start+0x136>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a16      	ldr	r2, [pc, #88]	@ (80035ac <HAL_TIM_PWM_Start+0x18c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d111      	bne.n	800357a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b06      	cmp	r3, #6
 8003566:	d010      	beq.n	800358a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003578:	e007      	b.n	800358a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0201 	orr.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40010000 	.word	0x40010000
 8003598:	40010400 	.word	0x40010400
 800359c:	40000400 	.word	0x40000400
 80035a0:	40000800 	.word	0x40000800
 80035a4:	40000c00 	.word	0x40000c00
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40001800 	.word	0x40001800

080035b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2200      	movs	r2, #0
 80035c0:	6839      	ldr	r1, [r7, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fdd2 	bl	800416c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003688 <HAL_TIM_PWM_Stop+0xd8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_TIM_PWM_Stop+0x2c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2d      	ldr	r2, [pc, #180]	@ (800368c <HAL_TIM_PWM_Stop+0xdc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_TIM_PWM_Stop+0x30>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <HAL_TIM_PWM_Stop+0x32>
 80035e0:	2300      	movs	r3, #0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d017      	beq.n	8003616 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a1a      	ldr	r2, [r3, #32]
 80035ec:	f241 1311 	movw	r3, #4369	@ 0x1111
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10f      	bne.n	8003616 <HAL_TIM_PWM_Stop+0x66>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6a1a      	ldr	r2, [r3, #32]
 80035fc:	f240 4344 	movw	r3, #1092	@ 0x444
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d107      	bne.n	8003616 <HAL_TIM_PWM_Stop+0x66>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003614:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a1a      	ldr	r2, [r3, #32]
 800361c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <HAL_TIM_PWM_Stop+0x96>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d107      	bne.n	8003646 <HAL_TIM_PWM_Stop+0x96>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d104      	bne.n	8003656 <HAL_TIM_PWM_Stop+0xa6>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003654:	e013      	b.n	800367e <HAL_TIM_PWM_Stop+0xce>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d104      	bne.n	8003666 <HAL_TIM_PWM_Stop+0xb6>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003664:	e00b      	b.n	800367e <HAL_TIM_PWM_Stop+0xce>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d104      	bne.n	8003676 <HAL_TIM_PWM_Stop+0xc6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003674:	e003      	b.n	800367e <HAL_TIM_PWM_Stop+0xce>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40010000 	.word	0x40010000
 800368c:	40010400 	.word	0x40010400

08003690 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e097      	b.n	80037d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fe f87b 	bl	80017b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036d4:	f023 0307 	bic.w	r3, r3, #7
 80036d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f000 faeb 	bl	8003cc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	4313      	orrs	r3, r2
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003730:	f023 030c 	bic.w	r3, r3, #12
 8003734:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800373c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003740:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	4313      	orrs	r3, r2
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	011a      	lsls	r2, r3, #4
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	031b      	lsls	r3, r3, #12
 8003760:	4313      	orrs	r3, r2
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4313      	orrs	r3, r2
 8003766:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800376e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003776:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	4313      	orrs	r3, r2
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003804:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d110      	bne.n	800382e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d102      	bne.n	8003818 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003812:	7b7b      	ldrb	r3, [r7, #13]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d001      	beq.n	800381c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e069      	b.n	80038f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800382c:	e031      	b.n	8003892 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d110      	bne.n	8003856 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003834:	7bbb      	ldrb	r3, [r7, #14]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800383a:	7b3b      	ldrb	r3, [r7, #12]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d001      	beq.n	8003844 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e055      	b.n	80038f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003854:	e01d      	b.n	8003892 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d108      	bne.n	800386e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800385c:	7bbb      	ldrb	r3, [r7, #14]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d105      	bne.n	800386e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003862:	7b7b      	ldrb	r3, [r7, #13]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d102      	bne.n	800386e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003868:	7b3b      	ldrb	r3, [r7, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d001      	beq.n	8003872 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e03e      	b.n	80038f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2202      	movs	r2, #2
 8003886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_TIM_Encoder_Start+0xc4>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d008      	beq.n	80038b0 <HAL_TIM_Encoder_Start+0xd4>
 800389e:	e00f      	b.n	80038c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2201      	movs	r2, #1
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fc5f 	bl	800416c <TIM_CCxChannelCmd>
      break;
 80038ae:	e016      	b.n	80038de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2201      	movs	r2, #1
 80038b6:	2104      	movs	r1, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fc57 	bl	800416c <TIM_CCxChannelCmd>
      break;
 80038be:	e00e      	b.n	80038de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2201      	movs	r2, #1
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fc4f 	bl	800416c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	2104      	movs	r1, #4
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fc48 	bl	800416c <TIM_CCxChannelCmd>
      break;
 80038dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d020      	beq.n	800395c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01b      	beq.n	800395c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0202 	mvn.w	r2, #2
 800392c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f99e 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003948:	e005      	b.n	8003956 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f990 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f9a1 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d020      	beq.n	80039a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0204 	mvn.w	r2, #4
 8003978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2202      	movs	r2, #2
 800397e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f978 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f96a 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f97b 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d020      	beq.n	80039f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01b      	beq.n	80039f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0208 	mvn.w	r2, #8
 80039c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2204      	movs	r2, #4
 80039ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f952 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 80039e0:	e005      	b.n	80039ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f944 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f955 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d020      	beq.n	8003a40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0310 	and.w	r3, r3, #16
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01b      	beq.n	8003a40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0210 	mvn.w	r2, #16
 8003a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2208      	movs	r2, #8
 8003a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f92c 	bl	8003c84 <HAL_TIM_IC_CaptureCallback>
 8003a2c:	e005      	b.n	8003a3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f91e 	bl	8003c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f92f 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00c      	beq.n	8003a64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d007      	beq.n	8003a64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0201 	mvn.w	r2, #1
 8003a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8fc 	bl	8003c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00c      	beq.n	8003a88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fc1e 	bl	80042c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00c      	beq.n	8003aac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d007      	beq.n	8003aac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f900 	bl	8003cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d007      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f06f 0220 	mvn.w	r2, #32
 8003ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fbf0 	bl	80042b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e0ae      	b.n	8003c54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	f200 809f 	bhi.w	8003c44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b06:	a201      	add	r2, pc, #4	@ (adr r2, 8003b0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b41 	.word	0x08003b41
 8003b10:	08003c45 	.word	0x08003c45
 8003b14:	08003c45 	.word	0x08003c45
 8003b18:	08003c45 	.word	0x08003c45
 8003b1c:	08003b81 	.word	0x08003b81
 8003b20:	08003c45 	.word	0x08003c45
 8003b24:	08003c45 	.word	0x08003c45
 8003b28:	08003c45 	.word	0x08003c45
 8003b2c:	08003bc3 	.word	0x08003bc3
 8003b30:	08003c45 	.word	0x08003c45
 8003b34:	08003c45 	.word	0x08003c45
 8003b38:	08003c45 	.word	0x08003c45
 8003b3c:	08003c03 	.word	0x08003c03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f960 	bl	8003e0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0208 	orr.w	r2, r2, #8
 8003b5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0204 	bic.w	r2, r2, #4
 8003b6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6999      	ldr	r1, [r3, #24]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	619a      	str	r2, [r3, #24]
      break;
 8003b7e:	e064      	b.n	8003c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f9b0 	bl	8003eec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6999      	ldr	r1, [r3, #24]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	021a      	lsls	r2, r3, #8
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	619a      	str	r2, [r3, #24]
      break;
 8003bc0:	e043      	b.n	8003c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fa05 	bl	8003fd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	69da      	ldr	r2, [r3, #28]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0208 	orr.w	r2, r2, #8
 8003bdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69da      	ldr	r2, [r3, #28]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0204 	bic.w	r2, r2, #4
 8003bec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69d9      	ldr	r1, [r3, #28]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	61da      	str	r2, [r3, #28]
      break;
 8003c00:	e023      	b.n	8003c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fa59 	bl	80040c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69da      	ldr	r2, [r3, #28]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69d9      	ldr	r1, [r3, #28]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	021a      	lsls	r2, r3, #8
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	61da      	str	r2, [r3, #28]
      break;
 8003c42:	e002      	b.n	8003c4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	75fb      	strb	r3, [r7, #23]
      break;
 8003c48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a43      	ldr	r2, [pc, #268]	@ (8003de0 <TIM_Base_SetConfig+0x120>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cde:	d00f      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a40      	ldr	r2, [pc, #256]	@ (8003de4 <TIM_Base_SetConfig+0x124>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00b      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3f      	ldr	r2, [pc, #252]	@ (8003de8 <TIM_Base_SetConfig+0x128>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d007      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8003dec <TIM_Base_SetConfig+0x12c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d003      	beq.n	8003d00 <TIM_Base_SetConfig+0x40>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8003df0 <TIM_Base_SetConfig+0x130>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d108      	bne.n	8003d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a32      	ldr	r2, [pc, #200]	@ (8003de0 <TIM_Base_SetConfig+0x120>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d02b      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d20:	d027      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2f      	ldr	r2, [pc, #188]	@ (8003de4 <TIM_Base_SetConfig+0x124>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d023      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8003de8 <TIM_Base_SetConfig+0x128>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01f      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a2d      	ldr	r2, [pc, #180]	@ (8003dec <TIM_Base_SetConfig+0x12c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01b      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003df0 <TIM_Base_SetConfig+0x130>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d017      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2b      	ldr	r2, [pc, #172]	@ (8003df4 <TIM_Base_SetConfig+0x134>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d013      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8003df8 <TIM_Base_SetConfig+0x138>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00f      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a29      	ldr	r2, [pc, #164]	@ (8003dfc <TIM_Base_SetConfig+0x13c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00b      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a28      	ldr	r2, [pc, #160]	@ (8003e00 <TIM_Base_SetConfig+0x140>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a27      	ldr	r2, [pc, #156]	@ (8003e04 <TIM_Base_SetConfig+0x144>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d003      	beq.n	8003d72 <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a26      	ldr	r2, [pc, #152]	@ (8003e08 <TIM_Base_SetConfig+0x148>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a0e      	ldr	r2, [pc, #56]	@ (8003de0 <TIM_Base_SetConfig+0x120>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_Base_SetConfig+0xf2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a10      	ldr	r2, [pc, #64]	@ (8003df0 <TIM_Base_SetConfig+0x130>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d103      	bne.n	8003dba <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f043 0204 	orr.w	r2, r3, #4
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	601a      	str	r2, [r3, #0]
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800
 8003dec:	40000c00 	.word	0x40000c00
 8003df0:	40010400 	.word	0x40010400
 8003df4:	40014000 	.word	0x40014000
 8003df8:	40014400 	.word	0x40014400
 8003dfc:	40014800 	.word	0x40014800
 8003e00:	40001800 	.word	0x40001800
 8003e04:	40001c00 	.word	0x40001c00
 8003e08:	40002000 	.word	0x40002000

08003e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f023 0201 	bic.w	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f023 0302 	bic.w	r3, r3, #2
 8003e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a20      	ldr	r2, [pc, #128]	@ (8003ee4 <TIM_OC1_SetConfig+0xd8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d003      	beq.n	8003e70 <TIM_OC1_SetConfig+0x64>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ee8 <TIM_OC1_SetConfig+0xdc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d10c      	bne.n	8003e8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0308 	bic.w	r3, r3, #8
 8003e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a15      	ldr	r2, [pc, #84]	@ (8003ee4 <TIM_OC1_SetConfig+0xd8>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d003      	beq.n	8003e9a <TIM_OC1_SetConfig+0x8e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a14      	ldr	r2, [pc, #80]	@ (8003ee8 <TIM_OC1_SetConfig+0xdc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d111      	bne.n	8003ebe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	621a      	str	r2, [r3, #32]
}
 8003ed8:	bf00      	nop
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	40010400 	.word	0x40010400

08003eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f023 0210 	bic.w	r2, r3, #16
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f023 0320 	bic.w	r3, r3, #32
 8003f36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a22      	ldr	r2, [pc, #136]	@ (8003fd0 <TIM_OC2_SetConfig+0xe4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_OC2_SetConfig+0x68>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a21      	ldr	r2, [pc, #132]	@ (8003fd4 <TIM_OC2_SetConfig+0xe8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d10d      	bne.n	8003f70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a17      	ldr	r2, [pc, #92]	@ (8003fd0 <TIM_OC2_SetConfig+0xe4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_OC2_SetConfig+0x94>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a16      	ldr	r2, [pc, #88]	@ (8003fd4 <TIM_OC2_SetConfig+0xe8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d113      	bne.n	8003fa8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	621a      	str	r2, [r3, #32]
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40010400 	.word	0x40010400

08003fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0303 	bic.w	r3, r3, #3
 800400e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a21      	ldr	r2, [pc, #132]	@ (80040b8 <TIM_OC3_SetConfig+0xe0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <TIM_OC3_SetConfig+0x66>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a20      	ldr	r2, [pc, #128]	@ (80040bc <TIM_OC3_SetConfig+0xe4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d10d      	bne.n	800405a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a16      	ldr	r2, [pc, #88]	@ (80040b8 <TIM_OC3_SetConfig+0xe0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <TIM_OC3_SetConfig+0x92>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a15      	ldr	r2, [pc, #84]	@ (80040bc <TIM_OC3_SetConfig+0xe4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d113      	bne.n	8004092 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	621a      	str	r2, [r3, #32]
}
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	40010000 	.word	0x40010000
 80040bc:	40010400 	.word	0x40010400

080040c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800410a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	031b      	lsls	r3, r3, #12
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a12      	ldr	r2, [pc, #72]	@ (8004164 <TIM_OC4_SetConfig+0xa4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_OC4_SetConfig+0x68>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a11      	ldr	r2, [pc, #68]	@ (8004168 <TIM_OC4_SetConfig+0xa8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d109      	bne.n	800413c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800412e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	019b      	lsls	r3, r3, #6
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40010400 	.word	0x40010400

0800416c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	2201      	movs	r2, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a1a      	ldr	r2, [r3, #32]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	43db      	mvns	r3, r3
 800418e:	401a      	ands	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a1a      	ldr	r2, [r3, #32]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	fa01 f303 	lsl.w	r3, r1, r3
 80041a4:	431a      	orrs	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e05a      	b.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a21      	ldr	r2, [pc, #132]	@ (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d022      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800421c:	d01d      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1d      	ldr	r2, [pc, #116]	@ (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d018      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1b      	ldr	r2, [pc, #108]	@ (800429c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1a      	ldr	r2, [pc, #104]	@ (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00e      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a18      	ldr	r2, [pc, #96]	@ (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d009      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a17      	ldr	r2, [pc, #92]	@ (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a15      	ldr	r2, [pc, #84]	@ (80042ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d10c      	bne.n	8004274 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	4313      	orrs	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40010000 	.word	0x40010000
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800
 80042a0:	40000c00 	.word	0x40000c00
 80042a4:	40010400 	.word	0x40010400
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40001800 	.word	0x40001800

080042b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e042      	b.n	8004370 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd fb34 	bl	800196c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2224      	movs	r2, #36	@ 0x24
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800431a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fd1b 	bl	8004d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b20      	cmp	r3, #32
 8004390:	d121      	bne.n	80043d6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_UART_Transmit_IT+0x26>
 8004398:	88fb      	ldrh	r3, [r7, #6]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e01a      	b.n	80043d8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	88fa      	ldrh	r2, [r7, #6]
 80043ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	88fa      	ldrh	r2, [r7, #6]
 80043b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2221      	movs	r2, #33	@ 0x21
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d112      	bne.n	8004424 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_UART_Receive_IT+0x26>
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e00b      	b.n	8004426 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	461a      	mov	r2, r3
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fac8 	bl	80049b0 <UART_Start_Receive_IT>
 8004420:	4603      	mov	r3, r0
 8004422:	e000      	b.n	8004426 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004424:	2302      	movs	r3, #2
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b0ba      	sub	sp, #232	@ 0xe8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004456:	2300      	movs	r3, #0
 8004458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800445c:	2300      	movs	r3, #0
 800445e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800446e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10f      	bne.n	8004496 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	d009      	beq.n	8004496 <HAL_UART_IRQHandler+0x66>
 8004482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fba4 	bl	8004bdc <UART_Receive_IT>
      return;
 8004494:	e273      	b.n	800497e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 80de 	beq.w	800465c <HAL_UART_IRQHandler+0x22c>
 80044a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80d1 	beq.w	800465c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00b      	beq.n	80044de <HAL_UART_IRQHandler+0xae>
 80044c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d6:	f043 0201 	orr.w	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <HAL_UART_IRQHandler+0xd2>
 80044ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fa:	f043 0202 	orr.w	r2, r3, #2
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00b      	beq.n	8004526 <HAL_UART_IRQHandler+0xf6>
 800450e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	f043 0204 	orr.w	r2, r3, #4
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d011      	beq.n	8004556 <HAL_UART_IRQHandler+0x126>
 8004532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d105      	bne.n	800454a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800453e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454e:	f043 0208 	orr.w	r2, r3, #8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 820a 	beq.w	8004974 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004564:	f003 0320 	and.w	r3, r3, #32
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_UART_IRQHandler+0x14e>
 800456c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fb2f 	bl	8004bdc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004588:	2b40      	cmp	r3, #64	@ 0x40
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <HAL_UART_IRQHandler+0x17a>
 80045a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d04f      	beq.n	800464a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fa3a 	bl	8004a24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ba:	2b40      	cmp	r3, #64	@ 0x40
 80045bc:	d141      	bne.n	8004642 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3314      	adds	r3, #20
 80045c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80045d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3314      	adds	r3, #20
 80045e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80045ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80045f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004602:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1d9      	bne.n	80045be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d013      	beq.n	800463a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004616:	4a8a      	ldr	r2, [pc, #552]	@ (8004840 <HAL_UART_IRQHandler+0x410>)
 8004618:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe f83d 	bl	800269e <HAL_DMA_Abort_IT>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d016      	beq.n	8004658 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004634:	4610      	mov	r0, r2
 8004636:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004638:	e00e      	b.n	8004658 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f9a2 	bl	8004984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004640:	e00a      	b.n	8004658 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f99e 	bl	8004984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	e006      	b.n	8004658 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f99a 	bl	8004984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004656:	e18d      	b.n	8004974 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004658:	bf00      	nop
    return;
 800465a:	e18b      	b.n	8004974 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004660:	2b01      	cmp	r3, #1
 8004662:	f040 8167 	bne.w	8004934 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8160 	beq.w	8004934 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8159 	beq.w	8004934 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a2:	2b40      	cmp	r3, #64	@ 0x40
 80046a4:	f040 80ce 	bne.w	8004844 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 80a9 	beq.w	8004810 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046c6:	429a      	cmp	r2, r3
 80046c8:	f080 80a2 	bcs.w	8004810 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046de:	f000 8088 	beq.w	80047f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80046f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004700:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800470e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800471a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004726:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1d9      	bne.n	80046e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800473e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004752:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004756:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800475a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e1      	bne.n	800472e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3314      	adds	r3, #20
 8004770:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800477a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800477c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004780:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3314      	adds	r3, #20
 800478a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800478e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004790:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004794:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800479c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e3      	bne.n	800476a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2220      	movs	r2, #32
 80047a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c2:	f023 0310 	bic.w	r3, r3, #16
 80047c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80047d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e3      	bne.n	80047b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fd fee6 	bl	80025be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004800:	b29b      	uxth	r3, r3
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	b29b      	uxth	r3, r3
 8004806:	4619      	mov	r1, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f8c5 	bl	8004998 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800480e:	e0b3      	b.n	8004978 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004814:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004818:	429a      	cmp	r2, r3
 800481a:	f040 80ad 	bne.w	8004978 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004828:	f040 80a6 	bne.w	8004978 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004836:	4619      	mov	r1, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f8ad 	bl	8004998 <HAL_UARTEx_RxEventCallback>
      return;
 800483e:	e09b      	b.n	8004978 <HAL_UART_IRQHandler+0x548>
 8004840:	08004aeb 	.word	0x08004aeb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800484c:	b29b      	uxth	r3, r3
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 808e 	beq.w	800497c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8089 	beq.w	800497c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800487a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800487c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004880:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	330c      	adds	r3, #12
 800488a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800488e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004890:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004894:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800489c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e3      	bne.n	800486a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3314      	adds	r3, #20
 80048a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	623b      	str	r3, [r7, #32]
   return(result);
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	f023 0301 	bic.w	r3, r3, #1
 80048b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3314      	adds	r3, #20
 80048c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e3      	bne.n	80048a2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0310 	bic.w	r3, r3, #16
 80048fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	330c      	adds	r3, #12
 8004908:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800490c:	61fa      	str	r2, [r7, #28]
 800490e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	69b9      	ldr	r1, [r7, #24]
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	617b      	str	r3, [r7, #20]
   return(result);
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e3      	bne.n	80048e8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004926:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800492a:	4619      	mov	r1, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f833 	bl	8004998 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004932:	e023      	b.n	800497c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493c:	2b00      	cmp	r3, #0
 800493e:	d009      	beq.n	8004954 <HAL_UART_IRQHandler+0x524>
 8004940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f8dd 	bl	8004b0c <UART_Transmit_IT>
    return;
 8004952:	e014      	b.n	800497e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00e      	beq.n	800497e <HAL_UART_IRQHandler+0x54e>
 8004960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f91d 	bl	8004bac <UART_EndTransmit_IT>
    return;
 8004972:	e004      	b.n	800497e <HAL_UART_IRQHandler+0x54e>
    return;
 8004974:	bf00      	nop
 8004976:	e002      	b.n	800497e <HAL_UART_IRQHandler+0x54e>
      return;
 8004978:	bf00      	nop
 800497a:	e000      	b.n	800497e <HAL_UART_IRQHandler+0x54e>
      return;
 800497c:	bf00      	nop
  }
}
 800497e:	37e8      	adds	r7, #232	@ 0xe8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	4613      	mov	r3, r2
 80049bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	88fa      	ldrh	r2, [r7, #6]
 80049c8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2222      	movs	r2, #34	@ 0x22
 80049da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695a      	ldr	r2, [r3, #20]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0220 	orr.w	r2, r2, #32
 8004a14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b095      	sub	sp, #84	@ 0x54
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e5      	bne.n	8004a2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3314      	adds	r3, #20
 8004a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e5      	bne.n	8004a60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d119      	bne.n	8004ad0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f023 0310 	bic.w	r3, r3, #16
 8004ab2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004abc:	61ba      	str	r2, [r7, #24]
 8004abe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac0:	6979      	ldr	r1, [r7, #20]
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	e841 2300 	strex	r3, r2, [r1]
 8004ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e5      	bne.n	8004a9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ade:	bf00      	nop
 8004ae0:	3754      	adds	r7, #84	@ 0x54
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f7ff ff40 	bl	8004984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b04:	bf00      	nop
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b21      	cmp	r3, #33	@ 0x21
 8004b1e:	d13e      	bne.n	8004b9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b28:	d114      	bne.n	8004b54 <UART_Transmit_IT+0x48>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d110      	bne.n	8004b54 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	1c9a      	adds	r2, r3, #2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	621a      	str	r2, [r3, #32]
 8004b52:	e008      	b.n	8004b66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	1c59      	adds	r1, r3, #1
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6211      	str	r1, [r2, #32]
 8004b5e:	781a      	ldrb	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	4619      	mov	r1, r3
 8004b74:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e000      	b.n	8004ba0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
  }
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7fc fceb 	bl	80015a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	@ 0x30
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b22      	cmp	r3, #34	@ 0x22
 8004bf6:	f040 80aa 	bne.w	8004d4e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c02:	d115      	bne.n	8004c30 <UART_Receive_IT+0x54>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d111      	bne.n	8004c30 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c10:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c28:	1c9a      	adds	r2, r3, #2
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c2e:	e024      	b.n	8004c7a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c3e:	d007      	beq.n	8004c50 <UART_Receive_IT+0x74>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <UART_Receive_IT+0x82>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	e008      	b.n	8004c70 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	4619      	mov	r1, r3
 8004c88:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d15d      	bne.n	8004d4a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0220 	bic.w	r2, r2, #32
 8004c9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0201 	bic.w	r2, r2, #1
 8004cbc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d135      	bne.n	8004d40 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f023 0310 	bic.w	r3, r3, #16
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cfa:	623a      	str	r2, [r7, #32]
 8004cfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	69f9      	ldr	r1, [r7, #28]
 8004d00:	6a3a      	ldr	r2, [r7, #32]
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e5      	bne.n	8004cda <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0310 	and.w	r3, r3, #16
 8004d18:	2b10      	cmp	r3, #16
 8004d1a:	d10a      	bne.n	8004d32 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff fe2d 	bl	8004998 <HAL_UARTEx_RxEventCallback>
 8004d3e:	e002      	b.n	8004d46 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fc fc19 	bl	8001578 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	e002      	b.n	8004d50 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e000      	b.n	8004d50 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d4e:	2302      	movs	r3, #2
  }
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3730      	adds	r7, #48	@ 0x30
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d5c:	b0c0      	sub	sp, #256	@ 0x100
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	68d9      	ldr	r1, [r3, #12]
 8004d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	ea40 0301 	orr.w	r3, r0, r1
 8004d80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004db0:	f021 010c 	bic.w	r1, r1, #12
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd2:	6999      	ldr	r1, [r3, #24]
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	ea40 0301 	orr.w	r3, r0, r1
 8004dde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4b8f      	ldr	r3, [pc, #572]	@ (8005024 <UART_SetConfig+0x2cc>)
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d005      	beq.n	8004df8 <UART_SetConfig+0xa0>
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b8d      	ldr	r3, [pc, #564]	@ (8005028 <UART_SetConfig+0x2d0>)
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d104      	bne.n	8004e02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004df8:	f7fe faae 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8004dfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e00:	e003      	b.n	8004e0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e02:	f7fe fa95 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8004e06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e14:	f040 810c 	bne.w	8005030 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	462b      	mov	r3, r5
 8004e2e:	1891      	adds	r1, r2, r2
 8004e30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e32:	415b      	adcs	r3, r3
 8004e34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	eb12 0801 	adds.w	r8, r2, r1
 8004e40:	4629      	mov	r1, r5
 8004e42:	eb43 0901 	adc.w	r9, r3, r1
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e5a:	4690      	mov	r8, r2
 8004e5c:	4699      	mov	r9, r3
 8004e5e:	4623      	mov	r3, r4
 8004e60:	eb18 0303 	adds.w	r3, r8, r3
 8004e64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e68:	462b      	mov	r3, r5
 8004e6a:	eb49 0303 	adc.w	r3, r9, r3
 8004e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e86:	460b      	mov	r3, r1
 8004e88:	18db      	adds	r3, r3, r3
 8004e8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	eb42 0303 	adc.w	r3, r2, r3
 8004e92:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e9c:	f7fb f994 	bl	80001c8 <__aeabi_uldivmod>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4b61      	ldr	r3, [pc, #388]	@ (800502c <UART_SetConfig+0x2d4>)
 8004ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	011c      	lsls	r4, r3, #4
 8004eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004eb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ebc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	464b      	mov	r3, r9
 8004ec4:	1891      	adds	r1, r2, r2
 8004ec6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ec8:	415b      	adcs	r3, r3
 8004eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ecc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ed0:	4641      	mov	r1, r8
 8004ed2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	eb43 0b01 	adc.w	fp, r3, r1
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ee8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ef0:	4692      	mov	sl, r2
 8004ef2:	469b      	mov	fp, r3
 8004ef4:	4643      	mov	r3, r8
 8004ef6:	eb1a 0303 	adds.w	r3, sl, r3
 8004efa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004efe:	464b      	mov	r3, r9
 8004f00:	eb4b 0303 	adc.w	r3, fp, r3
 8004f04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	18db      	adds	r3, r3, r3
 8004f20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f22:	4613      	mov	r3, r2
 8004f24:	eb42 0303 	adc.w	r3, r2, r3
 8004f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f32:	f7fb f949 	bl	80001c8 <__aeabi_uldivmod>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800502c <UART_SetConfig+0x2d4>)
 8004f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	2264      	movs	r2, #100	@ 0x64
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	1acb      	subs	r3, r1, r3
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f52:	4b36      	ldr	r3, [pc, #216]	@ (800502c <UART_SetConfig+0x2d4>)
 8004f54:	fba3 2302 	umull	r2, r3, r3, r2
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f60:	441c      	add	r4, r3
 8004f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f74:	4642      	mov	r2, r8
 8004f76:	464b      	mov	r3, r9
 8004f78:	1891      	adds	r1, r2, r2
 8004f7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f7c:	415b      	adcs	r3, r3
 8004f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f84:	4641      	mov	r1, r8
 8004f86:	1851      	adds	r1, r2, r1
 8004f88:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	414b      	adcs	r3, r1
 8004f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f9c:	4659      	mov	r1, fp
 8004f9e:	00cb      	lsls	r3, r1, #3
 8004fa0:	4651      	mov	r1, sl
 8004fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa6:	4651      	mov	r1, sl
 8004fa8:	00ca      	lsls	r2, r1, #3
 8004faa:	4610      	mov	r0, r2
 8004fac:	4619      	mov	r1, r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	189b      	adds	r3, r3, r2
 8004fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fb8:	464b      	mov	r3, r9
 8004fba:	460a      	mov	r2, r1
 8004fbc:	eb42 0303 	adc.w	r3, r2, r3
 8004fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fd8:	460b      	mov	r3, r1
 8004fda:	18db      	adds	r3, r3, r3
 8004fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fde:	4613      	mov	r3, r2
 8004fe0:	eb42 0303 	adc.w	r3, r2, r3
 8004fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fe6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fee:	f7fb f8eb 	bl	80001c8 <__aeabi_uldivmod>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <UART_SetConfig+0x2d4>)
 8004ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	2164      	movs	r1, #100	@ 0x64
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	3332      	adds	r3, #50	@ 0x32
 800500a:	4a08      	ldr	r2, [pc, #32]	@ (800502c <UART_SetConfig+0x2d4>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	f003 0207 	and.w	r2, r3, #7
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4422      	add	r2, r4
 800501e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005020:	e106      	b.n	8005230 <UART_SetConfig+0x4d8>
 8005022:	bf00      	nop
 8005024:	40011000 	.word	0x40011000
 8005028:	40011400 	.word	0x40011400
 800502c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005034:	2200      	movs	r2, #0
 8005036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800503a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800503e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005042:	4642      	mov	r2, r8
 8005044:	464b      	mov	r3, r9
 8005046:	1891      	adds	r1, r2, r2
 8005048:	6239      	str	r1, [r7, #32]
 800504a:	415b      	adcs	r3, r3
 800504c:	627b      	str	r3, [r7, #36]	@ 0x24
 800504e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005052:	4641      	mov	r1, r8
 8005054:	1854      	adds	r4, r2, r1
 8005056:	4649      	mov	r1, r9
 8005058:	eb43 0501 	adc.w	r5, r3, r1
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	00eb      	lsls	r3, r5, #3
 8005066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800506a:	00e2      	lsls	r2, r4, #3
 800506c:	4614      	mov	r4, r2
 800506e:	461d      	mov	r5, r3
 8005070:	4643      	mov	r3, r8
 8005072:	18e3      	adds	r3, r4, r3
 8005074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005078:	464b      	mov	r3, r9
 800507a:	eb45 0303 	adc.w	r3, r5, r3
 800507e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800508e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800509e:	4629      	mov	r1, r5
 80050a0:	008b      	lsls	r3, r1, #2
 80050a2:	4621      	mov	r1, r4
 80050a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050a8:	4621      	mov	r1, r4
 80050aa:	008a      	lsls	r2, r1, #2
 80050ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050b0:	f7fb f88a 	bl	80001c8 <__aeabi_uldivmod>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4b60      	ldr	r3, [pc, #384]	@ (800523c <UART_SetConfig+0x4e4>)
 80050ba:	fba3 2302 	umull	r2, r3, r3, r2
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	011c      	lsls	r4, r3, #4
 80050c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050d4:	4642      	mov	r2, r8
 80050d6:	464b      	mov	r3, r9
 80050d8:	1891      	adds	r1, r2, r2
 80050da:	61b9      	str	r1, [r7, #24]
 80050dc:	415b      	adcs	r3, r3
 80050de:	61fb      	str	r3, [r7, #28]
 80050e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050e4:	4641      	mov	r1, r8
 80050e6:	1851      	adds	r1, r2, r1
 80050e8:	6139      	str	r1, [r7, #16]
 80050ea:	4649      	mov	r1, r9
 80050ec:	414b      	adcs	r3, r1
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050fc:	4659      	mov	r1, fp
 80050fe:	00cb      	lsls	r3, r1, #3
 8005100:	4651      	mov	r1, sl
 8005102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005106:	4651      	mov	r1, sl
 8005108:	00ca      	lsls	r2, r1, #3
 800510a:	4610      	mov	r0, r2
 800510c:	4619      	mov	r1, r3
 800510e:	4603      	mov	r3, r0
 8005110:	4642      	mov	r2, r8
 8005112:	189b      	adds	r3, r3, r2
 8005114:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005118:	464b      	mov	r3, r9
 800511a:	460a      	mov	r2, r1
 800511c:	eb42 0303 	adc.w	r3, r2, r3
 8005120:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800512e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800513c:	4649      	mov	r1, r9
 800513e:	008b      	lsls	r3, r1, #2
 8005140:	4641      	mov	r1, r8
 8005142:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005146:	4641      	mov	r1, r8
 8005148:	008a      	lsls	r2, r1, #2
 800514a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800514e:	f7fb f83b 	bl	80001c8 <__aeabi_uldivmod>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4611      	mov	r1, r2
 8005158:	4b38      	ldr	r3, [pc, #224]	@ (800523c <UART_SetConfig+0x4e4>)
 800515a:	fba3 2301 	umull	r2, r3, r3, r1
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	2264      	movs	r2, #100	@ 0x64
 8005162:	fb02 f303 	mul.w	r3, r2, r3
 8005166:	1acb      	subs	r3, r1, r3
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	3332      	adds	r3, #50	@ 0x32
 800516c:	4a33      	ldr	r2, [pc, #204]	@ (800523c <UART_SetConfig+0x4e4>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005178:	441c      	add	r4, r3
 800517a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800517e:	2200      	movs	r2, #0
 8005180:	673b      	str	r3, [r7, #112]	@ 0x70
 8005182:	677a      	str	r2, [r7, #116]	@ 0x74
 8005184:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	1891      	adds	r1, r2, r2
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	415b      	adcs	r3, r3
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005198:	4641      	mov	r1, r8
 800519a:	1851      	adds	r1, r2, r1
 800519c:	6039      	str	r1, [r7, #0]
 800519e:	4649      	mov	r1, r9
 80051a0:	414b      	adcs	r3, r1
 80051a2:	607b      	str	r3, [r7, #4]
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051b0:	4659      	mov	r1, fp
 80051b2:	00cb      	lsls	r3, r1, #3
 80051b4:	4651      	mov	r1, sl
 80051b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ba:	4651      	mov	r1, sl
 80051bc:	00ca      	lsls	r2, r1, #3
 80051be:	4610      	mov	r0, r2
 80051c0:	4619      	mov	r1, r3
 80051c2:	4603      	mov	r3, r0
 80051c4:	4642      	mov	r2, r8
 80051c6:	189b      	adds	r3, r3, r2
 80051c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051ca:	464b      	mov	r3, r9
 80051cc:	460a      	mov	r2, r1
 80051ce:	eb42 0303 	adc.w	r3, r2, r3
 80051d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80051de:	667a      	str	r2, [r7, #100]	@ 0x64
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051ec:	4649      	mov	r1, r9
 80051ee:	008b      	lsls	r3, r1, #2
 80051f0:	4641      	mov	r1, r8
 80051f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051f6:	4641      	mov	r1, r8
 80051f8:	008a      	lsls	r2, r1, #2
 80051fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051fe:	f7fa ffe3 	bl	80001c8 <__aeabi_uldivmod>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4b0d      	ldr	r3, [pc, #52]	@ (800523c <UART_SetConfig+0x4e4>)
 8005208:	fba3 1302 	umull	r1, r3, r3, r2
 800520c:	095b      	lsrs	r3, r3, #5
 800520e:	2164      	movs	r1, #100	@ 0x64
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	3332      	adds	r3, #50	@ 0x32
 800521a:	4a08      	ldr	r2, [pc, #32]	@ (800523c <UART_SetConfig+0x4e4>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	f003 020f 	and.w	r2, r3, #15
 8005226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4422      	add	r2, r4
 800522e:	609a      	str	r2, [r3, #8]
}
 8005230:	bf00      	nop
 8005232:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005236:	46bd      	mov	sp, r7
 8005238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800523c:	51eb851f 	.word	0x51eb851f

08005240 <memset>:
 8005240:	4402      	add	r2, r0
 8005242:	4603      	mov	r3, r0
 8005244:	4293      	cmp	r3, r2
 8005246:	d100      	bne.n	800524a <memset+0xa>
 8005248:	4770      	bx	lr
 800524a:	f803 1b01 	strb.w	r1, [r3], #1
 800524e:	e7f9      	b.n	8005244 <memset+0x4>

08005250 <__libc_init_array>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4d0d      	ldr	r5, [pc, #52]	@ (8005288 <__libc_init_array+0x38>)
 8005254:	4c0d      	ldr	r4, [pc, #52]	@ (800528c <__libc_init_array+0x3c>)
 8005256:	1b64      	subs	r4, r4, r5
 8005258:	10a4      	asrs	r4, r4, #2
 800525a:	2600      	movs	r6, #0
 800525c:	42a6      	cmp	r6, r4
 800525e:	d109      	bne.n	8005274 <__libc_init_array+0x24>
 8005260:	4d0b      	ldr	r5, [pc, #44]	@ (8005290 <__libc_init_array+0x40>)
 8005262:	4c0c      	ldr	r4, [pc, #48]	@ (8005294 <__libc_init_array+0x44>)
 8005264:	f000 f818 	bl	8005298 <_init>
 8005268:	1b64      	subs	r4, r4, r5
 800526a:	10a4      	asrs	r4, r4, #2
 800526c:	2600      	movs	r6, #0
 800526e:	42a6      	cmp	r6, r4
 8005270:	d105      	bne.n	800527e <__libc_init_array+0x2e>
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	f855 3b04 	ldr.w	r3, [r5], #4
 8005278:	4798      	blx	r3
 800527a:	3601      	adds	r6, #1
 800527c:	e7ee      	b.n	800525c <__libc_init_array+0xc>
 800527e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005282:	4798      	blx	r3
 8005284:	3601      	adds	r6, #1
 8005286:	e7f2      	b.n	800526e <__libc_init_array+0x1e>
 8005288:	080052d0 	.word	0x080052d0
 800528c:	080052d0 	.word	0x080052d0
 8005290:	080052d0 	.word	0x080052d0
 8005294:	080052d4 	.word	0x080052d4

08005298 <_init>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

080052a4 <_fini>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr
